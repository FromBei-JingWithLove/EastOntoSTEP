// $ANTLR 3.1.3 Mar 18, 2009 10:09:25 Express.g 2022-05-29 16:40:25
 
/*
 * Unless otherwise noted, this software was developed at the National Institute of 
 * Standards and Technology by employees of the Federal Government in the course of 
 * their official duties. Pursuant to title  17 Section 105 of the United States 
 * Code this software is not subject to copyright protection and is in the public 
 * domain.
 * 
 * We would appreciate acknowledgement if the software is used.
 *
 * Links to non-Federal Government Web sites do not imply NIST endorsement of any 
 * particular product, service, organization, company,  information provider, or content.
 */

import java.util.Hashtable;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ExpressParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CONSTANT_IDENT", "ENTITY_IDENT", "FUNCTION_IDENT", "PROCEDURE_IDENT", "PARAMETER_IDENT", "SCHEMA_IDENT", "TYPE_IDENT", "VARIABLE_IDENT", "ENUMERATION_IDENT", "ATTRIBUTE_IDENT", "ENTITY_ATTR_IDENT", "TYPE_ATTR_IDENT", "ENTITY_VAR_IDENT", "TYPE_VAR_IDENT", "ENTITY_PARAM_IDENT", "TYPE_PARAM_IDENT", "SUBTYPE_CONSTRAINT_ID", "ACTUAL_PARAMETER_LIST", "ADD_LIKE_OP", "AGGREGATE_INITIALIZER", "AGGREGATE_SOURCE", "AGGREGATE_TYPE", "AGGREGATION_TYPES", "ALGORITHM_HEAD", "ALIAS_STMT", "ARRAY_TYPE", "ASSIGNMENT_STMT", "BAG_TYPE", "BASE_TYPE", "BINARY_TYPE", "BOOLEAN_TYPE", "BOUND_1", "BOUND_2", "BOUND_SPEC", "BUILT_IN_CONSTANT", "BUILT_IN_FUNCTION", "BUILT_IN_PROCEDURE", "CASE_ACTION", "CASE_LABEL", "CASE_STMT", "COMPOUND_STMT", "CONSTANT_BODY", "CONSTANT_DECL", "CONSTANT_FACTOR", "CONSTANT_ID", "DECLARATION", "DOMAIN_RULE", "ELEMENT", "ENTITY_HEAD", "ENTITY_DECL", "ENTITY_BODY", "SUBSUPER", "SUPERTYPE_CONSTRAINT", "ABSTRACT_SUPERTYPE_DECLARATION", "SUBTYPE_DECLARATION", "EXPLICIT_ATTR", "ATTRIBUTE_DECL", "ATTRIBUTE_ID", "QUALIFIED_ATTRIBUTE", "DERIVE_CLAUSE", "DERIVED_ATTR", "INVERSE_CLAUSE", "INVERSE_ATTR", "UNIQUE_CLAUSE", "UNIQUE_RULE", "REFERENCED_ATTRIBUTE", "ENTITY_CONSTRUCTOR", "ENTITY_ID", "ENUMERATION_REFERENCE", "ESCAPE_STMT", "EXPRESSION", "FACTOR", "FORMAL_PARAMETER", "ATTRIBUTE_QUALIFIER", "FUNCTION_CALL", "FUNCTION_DECL", "FUNCTION_HEAD", "FUNCTION_ID", "GENERALIZED_TYPES", "GENERAL_AGGREGATION_TYPES", "GENERAL_ARRAY_TYPE", "GENERAL_BAG_TYPE", "GENERAL_LIST_TYPE", "GENERAL_REF", "GENERAL_SET_TYPE", "GENERIC_TYPE", "GROUP_QUALIFIER", "IF_STMT", "INCREMENT", "INCREMENT_CONTROL", "INDEX", "INDEX_1", "INDEX_2", "INDEX_QUALIFIER", "INTEGER_TYPE", "INTERVAL", "INTERVAL_HIGH", "INTERVAL_ITEM", "INTERVAL_LOW", "INTERVAL_OP", "LABEL", "LIST_TYPE", "LITERAL", "REAL_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", "LOCAL_DECL", "LOCAL_VARIABLE", "LOGICAL_EXPRESSION", "LOGICAL_LITERAL", "LOGICAL_TYPE", "MULTIPLICATION_LIKE_OP", "NAMED_TYPES", "NULL_STMT", "NUMBER_TYPE", "NUMERIC_EXPRESSION", "ONE_OF", "PARAMETER", "PARAMETER_ID", "PARAMETER_TYPE", "POPULATION", "PRECISION_SPEC", "PRIMARY", "PROCEDURE_CALL_STMT", "PROCEDURE_DECL", "PROCEDURE_HEAD", "PROCEDURE_ID", "QUALIFIABLE_FACTOR", "QUALIFIER", "QUERY_EXPRESSION", "REAL_TYPE", "REFERENCE_CLAUSE", "REL_OP", "REL_OP_EXTENDED", "REPEAT_CONTROL", "REPEAT_STMT", "REPETITION", "RESOURCE_OR_RENAME", "RESOURCE_REF", "RETURN_STMT", "RULE_DECL", "RULE_HEAD", "RULE_ID", "SCHEMA_ID", "SCHEMA_BODY", "SCHEMA_DECL", "INTERFACE_SPECIFICATION", "USE_CLAUSE", "NAMED_TYPE_OR_RENAME", "SELECTOR", "SET_TYPE", "SIMPLE_EXPRESSION", "SIMPLE_FACTOR", "SIMPLE_TYPES", "SKIP_STMT", "STMT", "STRING_TYPE", "SUBTYPE_CONSTRAINT", "SUPERTYPE_EXPRESSION", "SUPERTYPE_FACTOR", "SUPERTYPE_RULE", "SUPERTYPE_TERM", "SYNTAX", "TERM", "TYPE_DECL", "UNDERLYING_TYPE", "CONSTRUCTED_TYPES", "ENUMERATION_TYPE", "ENUMERATION_ID", "SELECT_TYPE", "TYPE_ID", "TYPE_LABEL", "TYPE_LABEL_ID", "UNARY_OP", "UNTIL_CONTROL", "VARIABLE_ID", "WHERE_CLAUSE", "WHILE_CONTROL", "WIDTH", "WIDTH_SPEC", "ENTITY_REF", "TYPE_REF", "ENUMERATION_REF", "ATTRIBUTE_REF", "CONSTANT_REF", "FUNCTION_REF", "PARAMETER_REF", "VARIABLE_REF", "SCHEMA_REF", "TYPE_LABEL_REF", "PROCEDURE_REF", "SIMPLE_ID", "ELSE_CLAUSE", "RENAME_ID", "ENUMERATION_ITEMS", "ENUMERATION_EXTENSION", "SELECT_LIST", "SELECT_EXTENSION", "REDECLARED_ATTRIBUTE", "SUBTYPE_CONSTRAINT_DECL", "SUBTYPE_CONSTRAINT_HEAD", "SUBTYPE_CONSTRAINT_BODY", "ABSTRACT_SUPERTYPE", "TOTAL_OVER", "CONCRETE_TYPES", "GENERIC_ENTITY_TYPE", "SCHEMA_VERSION_ID", "LANGUAGE_VERSION_ID", "CONST_E", "CONST_PI", "CONST_SELF", "FUNCTION_ABS", "FUNCTION_ACOS", "FUNCTION_ASIN", "FUNCTION_ATAN", "FUNCTION_BLENGTH", "FUNCTION_COS", "FUNCTION_EXISTS", "FUNCTION_EXP", "FUNCTION_FORMAT", "FUNCTION_HIBOUND", "FUNCTION_HIINDEX", "FUNCTION_LENGTH", "FUNCTION_LOBOUND", "FUNCTION_LOINDEX", "FUNCTION_LOG", "FUNCTION_LOG2", "FUNCTION_LOG10", "FUNCTION_NVL", "FUNCTION_ODD", "FUNCTION_ROLESOF", "FUNCTION_SIN", "FUNCTION_SQRT", "FUNCTION_TAN", "FUNCTION_TYPEOF", "FUNCTION_USEDIN", "FUNCTION_VALUE", "FUNCTION_VALUE_IN", "FUNCTION_VALUE_UNIQUE", "FUNCTION_SIZEOF", "PROCEDURE_INSERT", "PROCEDURE_REMOVE", "NOT", "OR", "XOR", "DIV", "MOD", "AND", "LPAREN", "COMMA", "RPAREN", "PLUS", "MINUS", "LBRACK", "RBRACK", "COLON", "IDENT", "SEMI", "COLEQ", "QUESTION", "STAR", "DOT", "DOUBLESTAR", "BACKSLASH", "LCURLY", "RCURLY", "LT", "LE", "FLOAT", "INT", "STRING", "DIVSIGN", "DOUBLEBAR", "QUERY", "LTSTAR", "BAR", "GT", "GE", "LTGT", "ASSIGN", "COLLTGT", "COLEQCOL", "LANG_VERSION", "COMMENT", "LINECOMMENT", "AMPERSAND", "AT", "WS", "DIGIT", "'aggregate'", "'of'", "'alias'", "'for'", "'end_alias'", "'array'", "'optional'", "'unique'", "'bag'", "'binary'", "'boolean'", "'case'", "'otherwise'", "'end_case'", "'begin'", "'end'", "'constant'", "'end_constant'", "'entity'", "'abstract'", "'end_entity'", "'supertype'", "'subtype'", "'end_subtype_constraint'", "'subtype_constraint'", "'total_over'", "'renamed'", "'derive'", "'inverse'", "'set'", "'escape'", "'end_function'", "'function'", "'list'", "'generic'", "'generic_entity'", "'if'", "'then'", "'end_if'", "'else'", "'to'", "'by'", "'integer'", "'local'", "'end_local'", "'false'", "'true'", "'unknown'", "'logical'", "'number'", "'oneof'", "'end_procedure'", "'procedure'", "'var'", "'real'", "'reference'", "'from'", "'in'", "'like'", "'repeat'", "'end_repeat'", "'as'", "'return'", "'end_rule'", "'rule'", "'schema'", "'end_schema'", "'use'", "'skip'", "'string'", "'andor'", "'type'", "'end_type'", "'extensible'", "'enumeration'", "'based_on'", "'with'", "'select'", "'until'", "'where'", "'while'", "'fixed'"
    };
    public static final int SUPERTYPE_RULE=164;
    public static final int FUNCTION_HEAD=80;
    public static final int SIMPLE_FACTOR=156;
    public static final int FUNCTION_VALUE_IN=241;
    public static final int DERIVED_ATTR=64;
    public static final int RETURN_STMT=143;
    public static final int WHILE_CONTROL=181;
    public static final int INTEGER_LITERAL=108;
    public static final int FUNCTION_IDENT=6;
    public static final int CONSTRUCTED_TYPES=170;
    public static final int ENTITY_BODY=54;
    public static final int MINUS=256;
    public static final int FUNCTION_REF=189;
    public static final int BACKSLASH=267;
    public static final int CASE_LABEL=42;
    public static final int ENTITY_CONSTRUCTOR=70;
    public static final int INTERVAL_LOW=102;
    public static final int TYPE_IDENT=10;
    public static final int ENUMERATION_REFERENCE=72;
    public static final int REAL_TYPE=134;
    public static final int T__374=374;
    public static final int T__371=371;
    public static final int RULE_ID=146;
    public static final int T__370=370;
    public static final int T__373=373;
    public static final int T__372=372;
    public static final int LPAREN=252;
    public static final int ENTITY_IDENT=5;
    public static final int DECLARATION=49;
    public static final int AT=290;
    public static final int LBRACK=257;
    public static final int QUERY=277;
    public static final int TYPE_VAR_IDENT=17;
    public static final int REPEAT_CONTROL=138;
    public static final int SUBTYPE_CONSTRAINT_HEAD=204;
    public static final int ATTRIBUTE_ID=61;
    public static final int XOR=248;
    public static final int T__368=368;
    public static final int ATTRIBUTE_IDENT=13;
    public static final int SKIP_STMT=158;
    public static final int T__367=367;
    public static final int BAG_TYPE=31;
    public static final int T__369=369;
    public static final int LOGICAL_EXPRESSION=112;
    public static final int VARIABLE_ID=179;
    public static final int FUNCTION_HIINDEX=225;
    public static final int LANGUAGE_VERSION_ID=211;
    public static final int MULTIPLICATION_LIKE_OP=115;
    public static final int TYPE_DECL=168;
    public static final int FUNCTION_ATAN=218;
    public static final int SUBTYPE_CONSTRAINT=161;
    public static final int TERM=167;
    public static final int FUNCTION_LOBOUND=227;
    public static final int FUNCTION_SIN=235;
    public static final int CONSTANT_BODY=45;
    public static final int SUPERTYPE_FACTOR=163;
    public static final int ELSE_CLAUSE=196;
    public static final int GENERIC_ENTITY_TYPE=209;
    public static final int SCHEMA_BODY=148;
    public static final int ENTITY_PARAM_IDENT=18;
    public static final int ATTRIBUTE_DECL=60;
    public static final int LTGT=282;
    public static final int CONCRETE_TYPES=208;
    public static final int ESCAPE_STMT=73;
    public static final int INTERVAL=99;
    public static final int RULE_HEAD=145;
    public static final int NUMBER_TYPE=118;
    public static final int PROCEDURE_HEAD=129;
    public static final int PROCEDURE_INSERT=244;
    public static final int FACTOR=75;
    public static final int REFERENCE_CLAUSE=135;
    public static final int SELECT_EXTENSION=201;
    public static final int EXPLICIT_ATTR=59;
    public static final int FUNCTION_ACOS=216;
    public static final int FUNCTION_BLENGTH=219;
    public static final int INTERVAL_OP=103;
    public static final int FUNCTION_LOG2=230;
    public static final int DIV=249;
    public static final int GENERAL_ARRAY_TYPE=84;
    public static final int SELECT_TYPE=173;
    public static final int GENERALIZED_TYPES=82;
    public static final int SELECTOR=153;
    public static final int STAR=264;
    public static final int STRING=274;
    public static final int BASE_TYPE=32;
    public static final int T__342=342;
    public static final int SCHEMA_ID=147;
    public static final int T__341=341;
    public static final int T__344=344;
    public static final int T__343=343;
    public static final int T__340=340;
    public static final int DOUBLEBAR=276;
    public static final int REDECLARED_ATTRIBUTE=202;
    public static final int FUNCTION_EXP=222;
    public static final int ENTITY_REF=184;
    public static final int PROCEDURE_IDENT=7;
    public static final int UNARY_OP=177;
    public static final int SCHEMA_REF=192;
    public static final int T__339=339;
    public static final int CONST_SELF=214;
    public static final int T__338=338;
    public static final int LABEL=104;
    public static final int SIMPLE_TYPES=157;
    public static final int INDEX=94;
    public static final int T__335=335;
    public static final int T__334=334;
    public static final int T__337=337;
    public static final int BOUND_SPEC=37;
    public static final int T__336=336;
    public static final int T__331=331;
    public static final int T__330=330;
    public static final int T__333=333;
    public static final int REPEAT_STMT=139;
    public static final int T__332=332;
    public static final int WIDTH_SPEC=183;
    public static final int GENERAL_LIST_TYPE=86;
    public static final int ALGORITHM_HEAD=27;
    public static final int CASE_STMT=43;
    public static final int FUNCTION_ID=81;
    public static final int AGGREGATE_INITIALIZER=23;
    public static final int ABSTRACT_SUPERTYPE=206;
    public static final int CASE_ACTION=41;
    public static final int SUPERTYPE_TERM=165;
    public static final int NOT=246;
    public static final int RBRACK=258;
    public static final int ABSTRACT_SUPERTYPE_DECLARATION=57;
    public static final int GENERAL_REF=87;
    public static final int ADD_LIKE_OP=22;
    public static final int COLLTGT=284;
    public static final int RENAME_ID=197;
    public static final int T__328=328;
    public static final int STRING_TYPE=160;
    public static final int T__327=327;
    public static final int ENTITY_VAR_IDENT=16;
    public static final int REL_OP=136;
    public static final int T__329=329;
    public static final int CONST_PI=213;
    public static final int T__324=324;
    public static final int T__323=323;
    public static final int T__326=326;
    public static final int T__325=325;
    public static final int T__364=364;
    public static final int DOUBLESTAR=266;
    public static final int T__363=363;
    public static final int T__366=366;
    public static final int T__365=365;
    public static final int T__360=360;
    public static final int SUBTYPE_CONSTRAINT_DECL=203;
    public static final int T__362=362;
    public static final int T__361=361;
    public static final int SUPERTYPE_CONSTRAINT=56;
    public static final int ENTITY_HEAD=52;
    public static final int WHERE_CLAUSE=180;
    public static final int QUESTION=263;
    public static final int FUNCTION_SQRT=236;
    public static final int ACTUAL_PARAMETER_LIST=21;
    public static final int BUILT_IN_PROCEDURE=40;
    public static final int CONSTANT_IDENT=4;
    public static final int PROCEDURE_REF=194;
    public static final int REFERENCED_ATTRIBUTE=69;
    public static final int AGGREGATION_TYPES=26;
    public static final int T__357=357;
    public static final int FUNCTION_SIZEOF=243;
    public static final int WS=291;
    public static final int EOF=-1;
    public static final int T__356=356;
    public static final int T__359=359;
    public static final int LIST_TYPE=105;
    public static final int GE=281;
    public static final int T__358=358;
    public static final int T__353=353;
    public static final int T__352=352;
    public static final int T__355=355;
    public static final int T__354=354;
    public static final int MOD=250;
    public static final int T__351=351;
    public static final int T__350=350;
    public static final int INCREMENT_CONTROL=93;
    public static final int COLON=259;
    public static final int SELECT_LIST=200;
    public static final int BOOLEAN_TYPE=34;
    public static final int GT=280;
    public static final int DIGIT=292;
    public static final int FUNCTION_ABS=215;
    public static final int SUBSUPER=55;
    public static final int T__349=349;
    public static final int GENERIC_TYPE=89;
    public static final int REL_OP_EXTENDED=137;
    public static final int T__346=346;
    public static final int T__345=345;
    public static final int T__348=348;
    public static final int T__347=347;
    public static final int UNDERLYING_TYPE=169;
    public static final int POPULATION=124;
    public static final int FUNCTION_NVL=232;
    public static final int T__300=300;
    public static final int ENTITY_ID=71;
    public static final int FUNCTION_TAN=237;
    public static final int INTEGER_TYPE=98;
    public static final int UNIQUE_CLAUSE=67;
    public static final int UNIQUE_RULE=68;
    public static final int PROCEDURE_CALL_STMT=127;
    public static final int AGGREGATE_TYPE=25;
    public static final int USE_CLAUSE=151;
    public static final int ENUMERATION_ITEMS=198;
    public static final int GROUP_QUALIFIER=90;
    public static final int PROCEDURE_REMOVE=245;
    public static final int FUNCTION_FORMAT=223;
    public static final int FUNCTION_USEDIN=239;
    public static final int LINECOMMENT=288;
    public static final int VARIABLE_IDENT=11;
    public static final int NAMED_TYPES=116;
    public static final int FUNCTION_COS=220;
    public static final int LANG_VERSION=286;
    public static final int PRECISION_SPEC=125;
    public static final int PARAMETER=121;
    public static final int PARAMETER_ID=122;
    public static final int AMPERSAND=289;
    public static final int LITERAL=106;
    public static final int DERIVE_CLAUSE=63;
    public static final int DOT=265;
    public static final int FUNCTION_LOINDEX=228;
    public static final int INTERVAL_ITEM=101;
    public static final int ENUMERATION_IDENT=12;
    public static final int CONSTANT_FACTOR=47;
    public static final int BUILT_IN_FUNCTION=39;
    public static final int RULE_DECL=144;
    public static final int DIVSIGN=275;
    public static final int PARAMETER_IDENT=8;
    public static final int TYPE_LABEL=175;
    public static final int RESOURCE_OR_RENAME=141;
    public static final int ATTRIBUTE_QUALIFIER=77;
    public static final int QUALIFIER=132;
    public static final int UNTIL_CONTROL=178;
    public static final int PROCEDURE_DECL=128;
    public static final int FUNCTION_ASIN=217;
    public static final int T__320=320;
    public static final int T__322=322;
    public static final int ATTRIBUTE_REF=187;
    public static final int FUNCTION_VALUE_UNIQUE=242;
    public static final int T__321=321;
    public static final int LOCAL_DECL=110;
    public static final int SUBTYPE_CONSTRAINT_ID=20;
    public static final int BUILT_IN_CONSTANT=38;
    public static final int FUNCTION_EXISTS=221;
    public static final int SEMI=261;
    public static final int COLEQCOL=285;
    public static final int ONE_OF=120;
    public static final int WIDTH=182;
    public static final int ASSIGN=283;
    public static final int FUNCTION_TYPEOF=238;
    public static final int ASSIGNMENT_STMT=30;
    public static final int SYNTAX=166;
    public static final int COMMENT=287;
    public static final int SCHEMA_IDENT=9;
    public static final int FUNCTION_DECL=79;
    public static final int REAL_LITERAL=107;
    public static final int INDEX_QUALIFIER=97;
    public static final int BINARY_TYPE=33;
    public static final int T__317=317;
    public static final int T__316=316;
    public static final int T__319=319;
    public static final int ENUMERATION_REF=186;
    public static final int T__318=318;
    public static final int T__313=313;
    public static final int SCHEMA_DECL=149;
    public static final int T__312=312;
    public static final int T__315=315;
    public static final int RCURLY=269;
    public static final int T__314=314;
    public static final int COMMA=253;
    public static final int SUBTYPE_DECLARATION=58;
    public static final int ENUMERATION_TYPE=171;
    public static final int T__311=311;
    public static final int T__310=310;
    public static final int QUALIFIED_ATTRIBUTE=62;
    public static final int PARAMETER_TYPE=123;
    public static final int LCURLY=268;
    public static final int BOUND_1=35;
    public static final int BOUND_2=36;
    public static final int TYPE_LABEL_REF=193;
    public static final int INCREMENT=92;
    public static final int ELEMENT=51;
    public static final int SCHEMA_VERSION_ID=210;
    public static final int FUNCTION_VALUE=240;
    public static final int T__309=309;
    public static final int CONSTANT_DECL=46;
    public static final int T__306=306;
    public static final int LOGICAL_TYPE=114;
    public static final int T__305=305;
    public static final int LE=271;
    public static final int T__308=308;
    public static final int INDEX_2=96;
    public static final int T__307=307;
    public static final int INDEX_1=95;
    public static final int T__302=302;
    public static final int GENERAL_BAG_TYPE=85;
    public static final int T__301=301;
    public static final int EXPRESSION=74;
    public static final int T__304=304;
    public static final int T__303=303;
    public static final int FUNCTION_CALL=78;
    public static final int QUALIFIABLE_FACTOR=131;
    public static final int TYPE_REF=185;
    public static final int CONSTANT_REF=188;
    public static final int INVERSE_CLAUSE=65;
    public static final int LT=270;
    public static final int NULL_STMT=117;
    public static final int PARAMETER_REF=190;
    public static final int RESOURCE_REF=142;
    public static final int NAMED_TYPE_OR_RENAME=152;
    public static final int TYPE_LABEL_ID=176;
    public static final int TOTAL_OVER=207;
    public static final int COMPOUND_STMT=44;
    public static final int INVERSE_ATTR=66;
    public static final int REPETITION=140;
    public static final int LOGICAL_LITERAL=113;
    public static final int TYPE_PARAM_IDENT=19;
    public static final int T__298=298;
    public static final int T__297=297;
    public static final int FUNCTION_LOG=229;
    public static final int T__299=299;
    public static final int T__294=294;
    public static final int T__293=293;
    public static final int T__296=296;
    public static final int T__295=295;
    public static final int ENUMERATION_EXTENSION=199;
    public static final int RPAREN=254;
    public static final int NUMERIC_EXPRESSION=119;
    public static final int LTSTAR=278;
    public static final int INTERFACE_SPECIFICATION=150;
    public static final int SIMPLE_ID=195;
    public static final int TYPE_ID=174;
    public static final int FUNCTION_ODD=233;
    public static final int AGGREGATE_SOURCE=24;
    public static final int AND=251;
    public static final int INTERVAL_HIGH=100;
    public static final int PLUS=255;
    public static final int FUNCTION_ROLESOF=234;
    public static final int SIMPLE_EXPRESSION=155;
    public static final int FLOAT=272;
    public static final int LOCAL_VARIABLE=111;
    public static final int ENUMERATION_ID=172;
    public static final int PROCEDURE_ID=130;
    public static final int QUERY_EXPRESSION=133;
    public static final int VARIABLE_REF=191;
    public static final int CONST_E=212;
    public static final int ENTITY_ATTR_IDENT=14;
    public static final int FUNCTION_LOG10=231;
    public static final int INT=273;
    public static final int IF_STMT=91;
    public static final int ALIAS_STMT=28;
    public static final int SUPERTYPE_EXPRESSION=162;
    public static final int COLEQ=262;
    public static final int DOMAIN_RULE=50;
    public static final int FORMAL_PARAMETER=76;
    public static final int GENERAL_SET_TYPE=88;
    public static final int CONSTANT_ID=48;
    public static final int SET_TYPE=154;
    public static final int FUNCTION_HIBOUND=224;
    public static final int OR=247;
    public static final int ARRAY_TYPE=29;
    public static final int PRIMARY=126;
    public static final int GENERAL_AGGREGATION_TYPES=83;
    public static final int STMT=159;
    public static final int TYPE_ATTR_IDENT=15;
    public static final int ENTITY_DECL=53;
    public static final int BAR=279;
    public static final int IDENT=260;
    public static final int FUNCTION_LENGTH=226;
    public static final int STRING_LITERAL=109;
    public static final int SUBTYPE_CONSTRAINT_BODY=205;

    // delegates
    // delegators


        public ExpressParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ExpressParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[565+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ExpressParser.tokenNames; }
    public String getGrammarFileName() { return "Express.g"; }


    	static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(ExpressParser.class);
    	public  Scope rootScope;
    	public  Scope currentScope;
    	private Scope lastCreatedScope;

    	/* We keep track of scopes defined by schemas. It is useful when
    	multiple schemas are parsed, to deal with external elements */
    	private Hashtable<String, Scope> schemas;

    	public boolean isFirst=true; /* is the first pass running ? */

    	Stack<String> paraphrase = new Stack<String>();
    	boolean bnice = false;
    	
    	public Hashtable<String, Scope> getSchemas()
    	{
    		return schemas;
    	}
    	
    	public void newScope(String mess) {
    		if (isFirst) newScope1();
    		else 
    		{
    			newScope2();
    		}
    		log.debug("New scope..." + mess + "-" + isFirst);
    	}

    	private boolean nextIs(int type)
    	{
    		return nextIs(type, 1);
    	}

    	private boolean nextIs(int type, int pos)
    	{
    		if (isFirst)
    			return false;
    		String txt = input.LT(pos).getText();
    		log.debug("checking " + txt + ":" + type + " in the scope " + currentScope.scopeId);
    		int i = currentScope.searchId(txt);
    		return i == type;
    		/*
    		if (i != type && bnice && currentScope.next != null)
    		{
    			log.debug("also checking " + txt + ":" + type + " in the scope " + currentScope.next.scopeId);
    			i = currentScope.next.searchId(txt);
    			if (i != type && currentScope.next.next != null)
    			{
    				log.debug("also checking " + txt + ":" + type + " in the scope " + currentScope.next.next.scopeId);
    				i = currentScope.next.next.searchId(txt);
    				return i == type;
    			}
    			else
    				return true;
    		}
    		else
    			return true;
    		*/
    	}

    	public void newScope1() 
    	{
    		/* creates a new Scope when entering a rule defining
    		a scope in the grammar. */
    		Scope ns;

    		ns = new Scope(currentScope);
    		currentScope=ns;
    		lastCreatedScope.setNext(ns);
    		lastCreatedScope=ns;
    		log.debug("Scope changed to " + currentScope.scopeId); 
    	}


    	public void newScope2() 
    	{
    		/* retrieve the scope created in the first pass when
    		entering the same rule. 
    		See comments in the lexer's IDENT rule definition */

    		currentScope=lastCreatedScope.next;
    		lastCreatedScope=currentScope;
    		log.debug("Scope changed to " + currentScope.scopeId); 
    	}

    	public void upScope() 
    	{
    		/* when exiting a scope */
    		currentScope=currentScope.parent;
    		log.debug("Up, scope=" + currentScope.scopeId); 
    	}
    	
    	private void newSchemaScope(String id) 
    	{
    		/* we record schema scopes so as to retrieve external
    		elements when parsing multiple schemas */
    		newScope("(schema)");
    		if (isFirst) 
    			schemas.put(id,currentScope);
    	}

    	private void newEntityScope(String id) 
    	{
    		/* entity case: additional information is recorded to build
    		the entity inheritance tree */
    		newScope("(entite)");
    		if (isFirst) 
    		{
    			currentScope.setEntity();
    			currentScope.parent.addEntityScope(id,currentScope);
    		}
    	}

    	private void addId(String id, int type) 
    	{
    		/* record an id in the current scope */
    		log.debug("adding " + id + ":" + type + ", scope " + currentScope.scopeId);
    		currentScope.addId(id,type);
    	}

    	private void addSuper(String name) 
    	{
    		/* add superentity in the current entity scope */
    		currentScope.addSuperEntity(name);
    	}

    	public void setRootScope(Scope rs) 
    	{
    		rootScope=rs;
    		currentScope=rootScope;
    		lastCreatedScope=rootScope;
    		isFirst=false;
    	}

    	public void addReference(ExternalId ei) 
    	{
    		/* add an element referenced from another schema */
    		log.debug("referencing " + ei.schema + ":" + ei.id);
    		currentScope.addReference(ei);
    	}

    	public void addUse(ExternalId ei) 
    	{
    		/* add an element used from another schema */
    		log.debug("using " + ei.schema + ":" + ei.id);
    		currentScope.addUse(ei);
    	}

    	public void addAllReferenceExternals(String schema) 
    	{
    		/* when all elements of another schema are referenced */
    		log.debug("referencing " + schema);
    		currentScope.addAllReferenceExternals(schema);
    	}

    	public void addAllUseExternals(String schema) 
    	{
    		/* when all elements of another schema are used */
    		log.debug("using " + schema);
    		currentScope.addAllUseExternals(schema);
    	}
    	
    	public void displayRecognitionError(String[] tokenNames, RecognitionException e)
    	{
    		log.error(getErrorHeader(e) + " " + getErrorMessage(e, tokenNames) + " source:" + getSourceName());
    	}
    	protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) throws RecognitionException
    	{
    		throw new MismatchedTokenException(ttype, input);
    	}


    public static class actual_parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "actual_parameter_list"
    // Express.g:352:1: actual_parameter_list : LPAREN parameter ( COMMA parameter )* RPAREN -> ^( ACTUAL_PARAMETER_LIST ( parameter )+ ) ;
    public final actual_parameter_list_return actual_parameter_list() throws RecognitionException {
        actual_parameter_list_return retval = new actual_parameter_list_return();
        retval.start = input.LT(1);
        int actual_parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN1=null;
        Token COMMA3=null;
        Token RPAREN5=null;
        parameter_return parameter2 = null;

        parameter_return parameter4 = null;


        CommonTree LPAREN1_tree=null;
        CommonTree COMMA3_tree=null;
        CommonTree RPAREN5_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // Express.g:353:3: ( LPAREN parameter ( COMMA parameter )* RPAREN -> ^( ACTUAL_PARAMETER_LIST ( parameter )+ ) )
            // Express.g:353:6: LPAREN parameter ( COMMA parameter )* RPAREN
            {
            LPAREN1=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_actual_parameter_list1060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1);

            pushFollow(FOLLOW_parameter_in_actual_parameter_list1063);
            parameter2=parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter.add(parameter2.getTree());
            // Express.g:353:24: ( COMMA parameter )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COMMA) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Express.g:353:27: COMMA parameter
            	    {
            	    COMMA3=(Token)match(input,COMMA,FOLLOW_COMMA_in_actual_parameter_list1068); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA3);

            	    pushFollow(FOLLOW_parameter_in_actual_parameter_list1071);
            	    parameter4=parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_parameter.add(parameter4.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            RPAREN5=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_actual_parameter_list1077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN5);



            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 354:3: -> ^( ACTUAL_PARAMETER_LIST ( parameter )+ )
            {
                // Express.g:354:6: ^( ACTUAL_PARAMETER_LIST ( parameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACTUAL_PARAMETER_LIST, "ACTUAL_PARAMETER_LIST"), root_1);

                if ( !(stream_parameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, actual_parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "actual_parameter_list"

    public static class add_like_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add_like_op"
    // Express.g:357:1: add_like_op : ( PLUS -> ^( ADD_LIKE_OP PLUS ) | MINUS -> ^( ADD_LIKE_OP MINUS ) | OR -> ^( ADD_LIKE_OP OR ) | XOR -> ^( ADD_LIKE_OP XOR ) );
    public final add_like_op_return add_like_op() throws RecognitionException {
        add_like_op_return retval = new add_like_op_return();
        retval.start = input.LT(1);
        int add_like_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS6=null;
        Token MINUS7=null;
        Token OR8=null;
        Token XOR9=null;

        CommonTree PLUS6_tree=null;
        CommonTree MINUS7_tree=null;
        CommonTree OR8_tree=null;
        CommonTree XOR9_tree=null;
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleTokenStream stream_XOR=new RewriteRuleTokenStream(adaptor,"token XOR");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // Express.g:358:3: ( PLUS -> ^( ADD_LIKE_OP PLUS ) | MINUS -> ^( ADD_LIKE_OP MINUS ) | OR -> ^( ADD_LIKE_OP OR ) | XOR -> ^( ADD_LIKE_OP XOR ) )
            int alt2=4;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt2=1;
                }
                break;
            case MINUS:
                {
                alt2=2;
                }
                break;
            case OR:
                {
                alt2=3;
                }
                break;
            case XOR:
                {
                alt2=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }

            switch (alt2) {
                case 1 :
                    // Express.g:358:6: PLUS
                    {
                    PLUS6=(Token)match(input,PLUS,FOLLOW_PLUS_in_add_like_op1102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS6);



                    // AST REWRITE
                    // elements: PLUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 358:11: -> ^( ADD_LIKE_OP PLUS )
                    {
                        // Express.g:358:14: ^( ADD_LIKE_OP PLUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_LIKE_OP, "ADD_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_PLUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:359:6: MINUS
                    {
                    MINUS7=(Token)match(input,MINUS,FOLLOW_MINUS_in_add_like_op1117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS7);



                    // AST REWRITE
                    // elements: MINUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 359:12: -> ^( ADD_LIKE_OP MINUS )
                    {
                        // Express.g:359:15: ^( ADD_LIKE_OP MINUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_LIKE_OP, "ADD_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_MINUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:360:6: OR
                    {
                    OR8=(Token)match(input,OR,FOLLOW_OR_in_add_like_op1132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OR.add(OR8);



                    // AST REWRITE
                    // elements: OR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 360:9: -> ^( ADD_LIKE_OP OR )
                    {
                        // Express.g:360:12: ^( ADD_LIKE_OP OR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_LIKE_OP, "ADD_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_OR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:361:6: XOR
                    {
                    XOR9=(Token)match(input,XOR,FOLLOW_XOR_in_add_like_op1147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_XOR.add(XOR9);



                    // AST REWRITE
                    // elements: XOR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 361:10: -> ^( ADD_LIKE_OP XOR )
                    {
                        // Express.g:361:13: ^( ADD_LIKE_OP XOR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ADD_LIKE_OP, "ADD_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_XOR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, add_like_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "add_like_op"

    public static class aggregate_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate_initializer"
    // Express.g:364:1: aggregate_initializer : LBRACK ( element ( COMMA element )* )? RBRACK -> ^( AGGREGATE_INITIALIZER ( element )* ) ;
    public final aggregate_initializer_return aggregate_initializer() throws RecognitionException {
        aggregate_initializer_return retval = new aggregate_initializer_return();
        retval.start = input.LT(1);
        int aggregate_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK10=null;
        Token COMMA12=null;
        Token RBRACK14=null;
        element_return element11 = null;

        element_return element13 = null;


        CommonTree LBRACK10_tree=null;
        CommonTree COMMA12_tree=null;
        CommonTree RBRACK14_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_element=new RewriteRuleSubtreeStream(adaptor,"rule element");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // Express.g:365:3: ( LBRACK ( element ( COMMA element )* )? RBRACK -> ^( AGGREGATE_INITIALIZER ( element )* ) )
            // Express.g:365:6: LBRACK ( element ( COMMA element )* )? RBRACK
            {
            LBRACK10=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_aggregate_initializer1169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK10);

            // Express.g:365:14: ( element ( COMMA element )* )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( ((LA4_0>=CONST_E && LA4_0<=FUNCTION_SIZEOF)||LA4_0==NOT||LA4_0==LPAREN||(LA4_0>=PLUS && LA4_0<=LBRACK)||LA4_0==IDENT||(LA4_0>=QUESTION && LA4_0<=STAR)||LA4_0==LCURLY||(LA4_0>=FLOAT && LA4_0<=STRING)||LA4_0==QUERY||(LA4_0>=338 && LA4_0<=340)) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Express.g:365:17: element ( COMMA element )*
                    {
                    pushFollow(FOLLOW_element_in_aggregate_initializer1175);
                    element11=element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element.add(element11.getTree());
                    // Express.g:365:26: ( COMMA element )*
                    loop3:
                    do {
                        int alt3=2;
                        int LA3_0 = input.LA(1);

                        if ( (LA3_0==COMMA) ) {
                            alt3=1;
                        }


                        switch (alt3) {
                    	case 1 :
                    	    // Express.g:365:29: COMMA element
                    	    {
                    	    COMMA12=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregate_initializer1181); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA12);

                    	    pushFollow(FOLLOW_element_in_aggregate_initializer1184);
                    	    element13=element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_element.add(element13.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop3;
                        }
                    } while (true);


                    }
                    break;

            }

            RBRACK14=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_aggregate_initializer1194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK14);



            // AST REWRITE
            // elements: element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 366:3: -> ^( AGGREGATE_INITIALIZER ( element )* )
            {
                // Express.g:366:6: ^( AGGREGATE_INITIALIZER ( element )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATE_INITIALIZER, "AGGREGATE_INITIALIZER"), root_1);

                // Express.g:366:30: ( element )*
                while ( stream_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_element.nextTree());

                }
                stream_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, aggregate_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "aggregate_initializer"

    public static class aggregate_source_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate_source"
    // Express.g:369:1: aggregate_source : simple_expression -> ^( AGGREGATE_SOURCE simple_expression ) ;
    public final aggregate_source_return aggregate_source() throws RecognitionException {
        aggregate_source_return retval = new aggregate_source_return();
        retval.start = input.LT(1);
        int aggregate_source_StartIndex = input.index();
        CommonTree root_0 = null;

        simple_expression_return simple_expression15 = null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // Express.g:370:3: ( simple_expression -> ^( AGGREGATE_SOURCE simple_expression ) )
            // Express.g:370:6: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_aggregate_source1219);
            simple_expression15=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression15.getTree());


            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 370:24: -> ^( AGGREGATE_SOURCE simple_expression )
            {
                // Express.g:370:27: ^( AGGREGATE_SOURCE simple_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATE_SOURCE, "AGGREGATE_SOURCE"), root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, aggregate_source_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "aggregate_source"

    public static class aggregate_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate_type"
    // Express.g:373:1: aggregate_type : 'aggregate' ( COLON type_label )? 'of' parameter_type -> ^( AGGREGATE_TYPE ( type_label )? parameter_type ) ;
    public final aggregate_type_return aggregate_type() throws RecognitionException {
        aggregate_type_return retval = new aggregate_type_return();
        retval.start = input.LT(1);
        int aggregate_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal16=null;
        Token COLON17=null;
        Token string_literal19=null;
        type_label_return type_label18 = null;

        parameter_type_return parameter_type20 = null;


        CommonTree string_literal16_tree=null;
        CommonTree COLON17_tree=null;
        CommonTree string_literal19_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_293=new RewriteRuleTokenStream(adaptor,"token 293");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_type_label=new RewriteRuleSubtreeStream(adaptor,"rule type_label");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // Express.g:374:3: ( 'aggregate' ( COLON type_label )? 'of' parameter_type -> ^( AGGREGATE_TYPE ( type_label )? parameter_type ) )
            // Express.g:374:6: 'aggregate' ( COLON type_label )? 'of' parameter_type
            {
            string_literal16=(Token)match(input,293,FOLLOW_293_in_aggregate_type1242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_293.add(string_literal16);

            // Express.g:374:18: ( COLON type_label )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Express.g:374:20: COLON type_label
                    {
                    COLON17=(Token)match(input,COLON,FOLLOW_COLON_in_aggregate_type1246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON17);

                    pushFollow(FOLLOW_type_label_in_aggregate_type1249);
                    type_label18=type_label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_label.add(type_label18.getTree());

                    }
                    break;

            }

            string_literal19=(Token)match(input,294,FOLLOW_294_in_aggregate_type1255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal19);

            pushFollow(FOLLOW_parameter_type_in_aggregate_type1257);
            parameter_type20=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type20.getTree());


            // AST REWRITE
            // elements: type_label, parameter_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 375:3: -> ^( AGGREGATE_TYPE ( type_label )? parameter_type )
            {
                // Express.g:375:6: ^( AGGREGATE_TYPE ( type_label )? parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATE_TYPE, "AGGREGATE_TYPE"), root_1);

                // Express.g:375:23: ( type_label )?
                if ( stream_type_label.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_label.nextTree());

                }
                stream_type_label.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, aggregate_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "aggregate_type"

    public static class aggregation_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregation_types"
    // Express.g:378:1: aggregation_types : ( array_type -> ^( AGGREGATION_TYPES array_type ) | bag_type -> ^( AGGREGATION_TYPES bag_type ) | list_type -> ^( AGGREGATION_TYPES list_type ) | set_type -> ^( AGGREGATION_TYPES set_type ) );
    public final aggregation_types_return aggregation_types() throws RecognitionException {
        aggregation_types_return retval = new aggregation_types_return();
        retval.start = input.LT(1);
        int aggregation_types_StartIndex = input.index();
        CommonTree root_0 = null;

        array_type_return array_type21 = null;

        bag_type_return bag_type22 = null;

        list_type_return list_type23 = null;

        set_type_return set_type24 = null;


        RewriteRuleSubtreeStream stream_list_type=new RewriteRuleSubtreeStream(adaptor,"rule list_type");
        RewriteRuleSubtreeStream stream_bag_type=new RewriteRuleSubtreeStream(adaptor,"rule bag_type");
        RewriteRuleSubtreeStream stream_set_type=new RewriteRuleSubtreeStream(adaptor,"rule set_type");
        RewriteRuleSubtreeStream stream_array_type=new RewriteRuleSubtreeStream(adaptor,"rule array_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // Express.g:379:3: ( array_type -> ^( AGGREGATION_TYPES array_type ) | bag_type -> ^( AGGREGATION_TYPES bag_type ) | list_type -> ^( AGGREGATION_TYPES list_type ) | set_type -> ^( AGGREGATION_TYPES set_type ) )
            int alt6=4;
            switch ( input.LA(1) ) {
            case 298:
                {
                alt6=1;
                }
                break;
            case 301:
                {
                alt6=2;
                }
                break;
            case 326:
                {
                alt6=3;
                }
                break;
            case 322:
                {
                alt6=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // Express.g:379:6: array_type
                    {
                    pushFollow(FOLLOW_array_type_in_aggregation_types1284);
                    array_type21=array_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_array_type.add(array_type21.getTree());


                    // AST REWRITE
                    // elements: array_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 379:17: -> ^( AGGREGATION_TYPES array_type )
                    {
                        // Express.g:379:20: ^( AGGREGATION_TYPES array_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATION_TYPES, "AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_array_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:380:6: bag_type
                    {
                    pushFollow(FOLLOW_bag_type_in_aggregation_types1299);
                    bag_type22=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bag_type.add(bag_type22.getTree());


                    // AST REWRITE
                    // elements: bag_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 380:16: -> ^( AGGREGATION_TYPES bag_type )
                    {
                        // Express.g:380:19: ^( AGGREGATION_TYPES bag_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATION_TYPES, "AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_bag_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:381:6: list_type
                    {
                    pushFollow(FOLLOW_list_type_in_aggregation_types1315);
                    list_type23=list_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_list_type.add(list_type23.getTree());


                    // AST REWRITE
                    // elements: list_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 381:16: -> ^( AGGREGATION_TYPES list_type )
                    {
                        // Express.g:381:19: ^( AGGREGATION_TYPES list_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATION_TYPES, "AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_list_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:382:6: set_type
                    {
                    pushFollow(FOLLOW_set_type_in_aggregation_types1331);
                    set_type24=set_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_set_type.add(set_type24.getTree());


                    // AST REWRITE
                    // elements: set_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 382:15: -> ^( AGGREGATION_TYPES set_type )
                    {
                        // Express.g:382:18: ^( AGGREGATION_TYPES set_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATION_TYPES, "AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_set_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, aggregation_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "aggregation_types"

    public static class algorithm_head_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "algorithm_head"
    // Express.g:385:1: algorithm_head : ( declaration )* ( constant_decl )? ( local_decl )? -> ^( ALGORITHM_HEAD ( declaration )* ( constant_decl )? ( local_decl )? ) ;
    public final algorithm_head_return algorithm_head() throws RecognitionException {
        algorithm_head_return retval = new algorithm_head_return();
        retval.start = input.LT(1);
        int algorithm_head_StartIndex = input.index();
        CommonTree root_0 = null;

        declaration_return declaration25 = null;

        constant_decl_return constant_decl26 = null;

        local_decl_return local_decl27 = null;


        RewriteRuleSubtreeStream stream_local_decl=new RewriteRuleSubtreeStream(adaptor,"rule local_decl");
        RewriteRuleSubtreeStream stream_constant_decl=new RewriteRuleSubtreeStream(adaptor,"rule constant_decl");
        RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // Express.g:386:3: ( ( declaration )* ( constant_decl )? ( local_decl )? -> ^( ALGORITHM_HEAD ( declaration )* ( constant_decl )? ( local_decl )? ) )
            // Express.g:386:6: ( declaration )* ( constant_decl )? ( local_decl )?
            {
            // Express.g:386:6: ( declaration )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==311||LA7_0==317||LA7_0==325||LA7_0==345||LA7_0==364) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // Express.g:0:0: declaration
            	    {
            	    pushFollow(FOLLOW_declaration_in_algorithm_head1353);
            	    declaration25=declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declaration.add(declaration25.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // Express.g:386:19: ( constant_decl )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==309) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // Express.g:0:0: constant_decl
                    {
                    pushFollow(FOLLOW_constant_decl_in_algorithm_head1356);
                    constant_decl26=constant_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_decl.add(constant_decl26.getTree());

                    }
                    break;

            }

            // Express.g:386:34: ( local_decl )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==336) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // Express.g:0:0: local_decl
                    {
                    pushFollow(FOLLOW_local_decl_in_algorithm_head1359);
                    local_decl27=local_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_local_decl.add(local_decl27.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: declaration, local_decl, constant_decl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 387:3: -> ^( ALGORITHM_HEAD ( declaration )* ( constant_decl )? ( local_decl )? )
            {
                // Express.g:387:6: ^( ALGORITHM_HEAD ( declaration )* ( constant_decl )? ( local_decl )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALGORITHM_HEAD, "ALGORITHM_HEAD"), root_1);

                // Express.g:387:23: ( declaration )*
                while ( stream_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_declaration.nextTree());

                }
                stream_declaration.reset();
                // Express.g:387:36: ( constant_decl )?
                if ( stream_constant_decl.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant_decl.nextTree());

                }
                stream_constant_decl.reset();
                // Express.g:387:51: ( local_decl )?
                if ( stream_local_decl.hasNext() ) {
                    adaptor.addChild(root_1, stream_local_decl.nextTree());

                }
                stream_local_decl.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, algorithm_head_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "algorithm_head"

    public static class alias_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alias_stmt"
    // Express.g:390:1: alias_stmt : ({...}? => 'alias' variable_id 'for' IDENT ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI | 'alias' variable_id 'for' general_ref ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI -> ^( ALIAS_STMT variable_id general_ref ( qualifier )* ( stmt )+ ) );
    public final alias_stmt_return alias_stmt() throws RecognitionException {
        alias_stmt_return retval = new alias_stmt_return();
        retval.start = input.LT(1);
        int alias_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal28=null;
        Token string_literal30=null;
        Token IDENT31=null;
        Token SEMI33=null;
        Token string_literal35=null;
        Token SEMI36=null;
        Token string_literal37=null;
        Token string_literal39=null;
        Token SEMI42=null;
        Token string_literal44=null;
        Token SEMI45=null;
        variable_id_return variable_id29 = null;

        qualifier_return qualifier32 = null;

        stmt_return stmt34 = null;

        variable_id_return variable_id38 = null;

        general_ref_return general_ref40 = null;

        qualifier_return qualifier41 = null;

        stmt_return stmt43 = null;


        CommonTree string_literal28_tree=null;
        CommonTree string_literal30_tree=null;
        CommonTree IDENT31_tree=null;
        CommonTree SEMI33_tree=null;
        CommonTree string_literal35_tree=null;
        CommonTree SEMI36_tree=null;
        CommonTree string_literal37_tree=null;
        CommonTree string_literal39_tree=null;
        CommonTree SEMI42_tree=null;
        CommonTree string_literal44_tree=null;
        CommonTree SEMI45_tree=null;
        RewriteRuleTokenStream stream_297=new RewriteRuleTokenStream(adaptor,"token 297");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_295=new RewriteRuleTokenStream(adaptor,"token 295");
        RewriteRuleTokenStream stream_296=new RewriteRuleTokenStream(adaptor,"token 296");
        RewriteRuleSubtreeStream stream_variable_id=new RewriteRuleSubtreeStream(adaptor,"rule variable_id");
        RewriteRuleSubtreeStream stream_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifier");
        RewriteRuleSubtreeStream stream_general_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_ref");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        newScope("alias");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // Express.g:392:3: ({...}? => 'alias' variable_id 'for' IDENT ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI | 'alias' variable_id 'for' general_ref ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI -> ^( ALIAS_STMT variable_id general_ref ( qualifier )* ( stmt )+ ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==295) ) {
                int LA14_1 = input.LA(2);

                if ( ((synpred16_Express()&&( isFirst ))) ) {
                    alt14=1;
                }
                else if ( (true) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // Express.g:392:5: {...}? => 'alias' variable_id 'for' IDENT ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "alias_stmt", " isFirst ");
                    }
                    string_literal28=(Token)match(input,295,FOLLOW_295_in_alias_stmt1397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal28_tree = (CommonTree)adaptor.create(string_literal28);
                    adaptor.addChild(root_0, string_literal28_tree);
                    }
                    pushFollow(FOLLOW_variable_id_in_alias_stmt1399);
                    variable_id29=variable_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id29.getTree());
                    string_literal30=(Token)match(input,296,FOLLOW_296_in_alias_stmt1401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal30_tree = (CommonTree)adaptor.create(string_literal30);
                    adaptor.addChild(root_0, string_literal30_tree);
                    }
                    IDENT31=(Token)match(input,IDENT,FOLLOW_IDENT_in_alias_stmt1403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT31_tree = (CommonTree)adaptor.create(IDENT31);
                    adaptor.addChild(root_0, IDENT31_tree);
                    }
                    // Express.g:392:52: ( qualifier )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==LBRACK||LA10_0==DOT||LA10_0==BACKSLASH) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // Express.g:0:0: qualifier
                    	    {
                    	    pushFollow(FOLLOW_qualifier_in_alias_stmt1405);
                    	    qualifier32=qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifier32.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);

                    SEMI33=(Token)match(input,SEMI,FOLLOW_SEMI_in_alias_stmt1408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI33_tree = (CommonTree)adaptor.create(SEMI33);
                    adaptor.addChild(root_0, SEMI33_tree);
                    }
                    // Express.g:392:68: ( stmt )+
                    int cnt11=0;
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( ((LA11_0>=PROCEDURE_INSERT && LA11_0<=PROCEDURE_REMOVE)||(LA11_0>=IDENT && LA11_0<=SEMI)||LA11_0==295||LA11_0==304||LA11_0==307||LA11_0==323||LA11_0==329||LA11_0==352||LA11_0==355||LA11_0==361) ) {
                            alt11=1;
                        }


                        switch (alt11) {
                    	case 1 :
                    	    // Express.g:0:0: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_alias_stmt1410);
                    	    stmt34=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmt34.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt11 >= 1 ) break loop11;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(11, input);
                                throw eee;
                        }
                        cnt11++;
                    } while (true);

                    string_literal35=(Token)match(input,297,FOLLOW_297_in_alias_stmt1413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal35_tree = (CommonTree)adaptor.create(string_literal35);
                    adaptor.addChild(root_0, string_literal35_tree);
                    }
                    if ( state.backtracking==0 ) {
                       upScope(); 
                    }
                    SEMI36=(Token)match(input,SEMI,FOLLOW_SEMI_in_alias_stmt1417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI36_tree = (CommonTree)adaptor.create(SEMI36);
                    adaptor.addChild(root_0, SEMI36_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:393:7: 'alias' variable_id 'for' general_ref ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI
                    {
                    string_literal37=(Token)match(input,295,FOLLOW_295_in_alias_stmt1425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_295.add(string_literal37);

                    pushFollow(FOLLOW_variable_id_in_alias_stmt1427);
                    variable_id38=variable_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_id.add(variable_id38.getTree());
                    string_literal39=(Token)match(input,296,FOLLOW_296_in_alias_stmt1429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_296.add(string_literal39);

                    pushFollow(FOLLOW_general_ref_in_alias_stmt1431);
                    general_ref40=general_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_ref.add(general_ref40.getTree());
                    // Express.g:393:45: ( qualifier )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==LBRACK||LA12_0==DOT||LA12_0==BACKSLASH) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // Express.g:0:0: qualifier
                    	    {
                    	    pushFollow(FOLLOW_qualifier_in_alias_stmt1433);
                    	    qualifier41=qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_qualifier.add(qualifier41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);

                    SEMI42=(Token)match(input,SEMI,FOLLOW_SEMI_in_alias_stmt1436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI42);

                    // Express.g:393:61: ( stmt )+
                    int cnt13=0;
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( ((LA13_0>=PROCEDURE_INSERT && LA13_0<=PROCEDURE_REMOVE)||(LA13_0>=IDENT && LA13_0<=SEMI)||LA13_0==295||LA13_0==304||LA13_0==307||LA13_0==323||LA13_0==329||LA13_0==352||LA13_0==355||LA13_0==361) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // Express.g:0:0: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_alias_stmt1438);
                    	    stmt43=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmt.add(stmt43.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt13 >= 1 ) break loop13;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(13, input);
                                throw eee;
                        }
                        cnt13++;
                    } while (true);

                    string_literal44=(Token)match(input,297,FOLLOW_297_in_alias_stmt1441); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_297.add(string_literal44);

                    if ( state.backtracking==0 ) {
                       upScope(); 
                    }
                    SEMI45=(Token)match(input,SEMI,FOLLOW_SEMI_in_alias_stmt1445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI45);



                    // AST REWRITE
                    // elements: qualifier, variable_id, stmt, general_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 394:3: -> ^( ALIAS_STMT variable_id general_ref ( qualifier )* ( stmt )+ )
                    {
                        // Express.g:394:6: ^( ALIAS_STMT variable_id general_ref ( qualifier )* ( stmt )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALIAS_STMT, "ALIAS_STMT"), root_1);

                        adaptor.addChild(root_1, stream_variable_id.nextTree());
                        adaptor.addChild(root_1, stream_general_ref.nextTree());
                        // Express.g:394:43: ( qualifier )*
                        while ( stream_qualifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_qualifier.nextTree());

                        }
                        stream_qualifier.reset();
                        if ( !(stream_stmt.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt.nextTree());

                        }
                        stream_stmt.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, alias_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alias_stmt"

    public static class array_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_type"
    // Express.g:397:1: array_type : 'array' bound_spec 'of' ( 'optional' )? ( 'unique' )? base_type -> ^( ARRAY_TYPE bound_spec base_type ) ;
    public final array_type_return array_type() throws RecognitionException {
        array_type_return retval = new array_type_return();
        retval.start = input.LT(1);
        int array_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal46=null;
        Token string_literal48=null;
        Token string_literal49=null;
        Token string_literal50=null;
        bound_spec_return bound_spec47 = null;

        base_type_return base_type51 = null;


        CommonTree string_literal46_tree=null;
        CommonTree string_literal48_tree=null;
        CommonTree string_literal49_tree=null;
        CommonTree string_literal50_tree=null;
        RewriteRuleTokenStream stream_298=new RewriteRuleTokenStream(adaptor,"token 298");
        RewriteRuleTokenStream stream_299=new RewriteRuleTokenStream(adaptor,"token 299");
        RewriteRuleTokenStream stream_300=new RewriteRuleTokenStream(adaptor,"token 300");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // Express.g:398:3: ( 'array' bound_spec 'of' ( 'optional' )? ( 'unique' )? base_type -> ^( ARRAY_TYPE bound_spec base_type ) )
            // Express.g:398:6: 'array' bound_spec 'of' ( 'optional' )? ( 'unique' )? base_type
            {
            string_literal46=(Token)match(input,298,FOLLOW_298_in_array_type1478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_298.add(string_literal46);

            pushFollow(FOLLOW_bound_spec_in_array_type1481);
            bound_spec47=bound_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec47.getTree());
            string_literal48=(Token)match(input,294,FOLLOW_294_in_array_type1484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal48);

            // Express.g:398:33: ( 'optional' )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==299) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // Express.g:398:36: 'optional'
                    {
                    string_literal49=(Token)match(input,299,FOLLOW_299_in_array_type1490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_299.add(string_literal49);


                    }
                    break;

            }

            // Express.g:398:51: ( 'unique' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==300) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // Express.g:398:54: 'unique'
                    {
                    string_literal50=(Token)match(input,300,FOLLOW_300_in_array_type1499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_300.add(string_literal50);


                    }
                    break;

            }

            pushFollow(FOLLOW_base_type_in_array_type1505);
            base_type51=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type51.getTree());


            // AST REWRITE
            // elements: bound_spec, base_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 399:3: -> ^( ARRAY_TYPE bound_spec base_type )
            {
                // Express.g:399:6: ^( ARRAY_TYPE bound_spec base_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_TYPE, "ARRAY_TYPE"), root_1);

                adaptor.addChild(root_1, stream_bound_spec.nextTree());
                adaptor.addChild(root_1, stream_base_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, array_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "array_type"

    public static class assignment_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_stmt"
    // Express.g:402:1: assignment_stmt : ( general_ref ( qualifier )* ) COLEQ expression SEMI -> ^( ASSIGNMENT_STMT general_ref ( qualifier )* expression ) ;
    public final assignment_stmt_return assignment_stmt() throws RecognitionException {
        assignment_stmt_return retval = new assignment_stmt_return();
        retval.start = input.LT(1);
        int assignment_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLEQ54=null;
        Token SEMI56=null;
        general_ref_return general_ref52 = null;

        qualifier_return qualifier53 = null;

        expression_return expression55 = null;


        CommonTree COLEQ54_tree=null;
        CommonTree SEMI56_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLEQ=new RewriteRuleTokenStream(adaptor,"token COLEQ");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifier");
        RewriteRuleSubtreeStream stream_general_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // Express.g:403:3: ( ( general_ref ( qualifier )* ) COLEQ expression SEMI -> ^( ASSIGNMENT_STMT general_ref ( qualifier )* expression ) )
            // Express.g:403:5: ( general_ref ( qualifier )* ) COLEQ expression SEMI
            {
            // Express.g:403:5: ( general_ref ( qualifier )* )
            // Express.g:403:7: general_ref ( qualifier )*
            {
            pushFollow(FOLLOW_general_ref_in_assignment_stmt1532);
            general_ref52=general_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_general_ref.add(general_ref52.getTree());
            // Express.g:403:19: ( qualifier )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==LBRACK||LA17_0==DOT||LA17_0==BACKSLASH) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // Express.g:0:0: qualifier
            	    {
            	    pushFollow(FOLLOW_qualifier_in_assignment_stmt1534);
            	    qualifier53=qualifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_qualifier.add(qualifier53.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            COLEQ54=(Token)match(input,COLEQ,FOLLOW_COLEQ_in_assignment_stmt1539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLEQ.add(COLEQ54);

            pushFollow(FOLLOW_expression_in_assignment_stmt1542);
            expression55=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression55.getTree());
            SEMI56=(Token)match(input,SEMI,FOLLOW_SEMI_in_assignment_stmt1545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI56);



            // AST REWRITE
            // elements: general_ref, expression, qualifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 404:3: -> ^( ASSIGNMENT_STMT general_ref ( qualifier )* expression )
            {
                // Express.g:404:6: ^( ASSIGNMENT_STMT general_ref ( qualifier )* expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGNMENT_STMT, "ASSIGNMENT_STMT"), root_1);

                adaptor.addChild(root_1, stream_general_ref.nextTree());
                // Express.g:404:36: ( qualifier )*
                while ( stream_qualifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifier.nextTree());

                }
                stream_qualifier.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, assignment_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_stmt"

    public static class bag_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bag_type"
    // Express.g:407:1: bag_type : 'bag' ( bound_spec )? 'of' base_type -> ^( BAG_TYPE ( bound_spec )? base_type ) ;
    public final bag_type_return bag_type() throws RecognitionException {
        bag_type_return retval = new bag_type_return();
        retval.start = input.LT(1);
        int bag_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal57=null;
        Token string_literal59=null;
        bound_spec_return bound_spec58 = null;

        base_type_return base_type60 = null;


        CommonTree string_literal57_tree=null;
        CommonTree string_literal59_tree=null;
        RewriteRuleTokenStream stream_301=new RewriteRuleTokenStream(adaptor,"token 301");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // Express.g:408:3: ( 'bag' ( bound_spec )? 'of' base_type -> ^( BAG_TYPE ( bound_spec )? base_type ) )
            // Express.g:408:6: 'bag' ( bound_spec )? 'of' base_type
            {
            string_literal57=(Token)match(input,301,FOLLOW_301_in_bag_type1574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_301.add(string_literal57);

            // Express.g:408:13: ( bound_spec )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==LBRACK) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_bag_type1577);
                    bound_spec58=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec58.getTree());

                    }
                    break;

            }

            string_literal59=(Token)match(input,294,FOLLOW_294_in_bag_type1580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal59);

            pushFollow(FOLLOW_base_type_in_bag_type1582);
            base_type60=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type60.getTree());


            // AST REWRITE
            // elements: bound_spec, base_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 409:3: -> ^( BAG_TYPE ( bound_spec )? base_type )
            {
                // Express.g:409:6: ^( BAG_TYPE ( bound_spec )? base_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BAG_TYPE, "BAG_TYPE"), root_1);

                // Express.g:409:17: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                adaptor.addChild(root_1, stream_base_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, bag_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bag_type"

    public static class base_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "base_type"
    // Express.g:412:1: base_type : ( aggregation_types -> ^( BASE_TYPE aggregation_types ) | simple_types -> ^( BASE_TYPE simple_types ) | named_types -> ^( BASE_TYPE named_types ) );
    public final base_type_return base_type() throws RecognitionException {
        base_type_return retval = new base_type_return();
        retval.start = input.LT(1);
        int base_type_StartIndex = input.index();
        CommonTree root_0 = null;

        aggregation_types_return aggregation_types61 = null;

        simple_types_return simple_types62 = null;

        named_types_return named_types63 = null;


        RewriteRuleSubtreeStream stream_aggregation_types=new RewriteRuleSubtreeStream(adaptor,"rule aggregation_types");
        RewriteRuleSubtreeStream stream_simple_types=new RewriteRuleSubtreeStream(adaptor,"rule simple_types");
        RewriteRuleSubtreeStream stream_named_types=new RewriteRuleSubtreeStream(adaptor,"rule named_types");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // Express.g:413:3: ( aggregation_types -> ^( BASE_TYPE aggregation_types ) | simple_types -> ^( BASE_TYPE simple_types ) | named_types -> ^( BASE_TYPE named_types ) )
            int alt19=3;
            switch ( input.LA(1) ) {
            case 298:
            case 301:
            case 322:
            case 326:
                {
                alt19=1;
                }
                break;
            case 302:
            case 303:
            case 335:
            case 341:
            case 342:
            case 347:
            case 362:
                {
                alt19=2;
                }
                break;
            case IDENT:
                {
                alt19=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    // Express.g:413:6: aggregation_types
                    {
                    pushFollow(FOLLOW_aggregation_types_in_base_type1609);
                    aggregation_types61=aggregation_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregation_types.add(aggregation_types61.getTree());


                    // AST REWRITE
                    // elements: aggregation_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 413:24: -> ^( BASE_TYPE aggregation_types )
                    {
                        // Express.g:413:27: ^( BASE_TYPE aggregation_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BASE_TYPE, "BASE_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_aggregation_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:414:6: simple_types
                    {
                    pushFollow(FOLLOW_simple_types_in_base_type1624);
                    simple_types62=simple_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_types.add(simple_types62.getTree());


                    // AST REWRITE
                    // elements: simple_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 414:19: -> ^( BASE_TYPE simple_types )
                    {
                        // Express.g:414:22: ^( BASE_TYPE simple_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BASE_TYPE, "BASE_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_simple_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:415:6: named_types
                    {
                    pushFollow(FOLLOW_named_types_in_base_type1639);
                    named_types63=named_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_named_types.add(named_types63.getTree());


                    // AST REWRITE
                    // elements: named_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 415:17: -> ^( BASE_TYPE named_types )
                    {
                        // Express.g:415:20: ^( BASE_TYPE named_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BASE_TYPE, "BASE_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_named_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, base_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "base_type"

    public static class binary_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_type"
    // Express.g:418:1: binary_type : 'binary' ( width_spec )? -> ^( BINARY_TYPE ( width_spec )? ) ;
    public final binary_type_return binary_type() throws RecognitionException {
        binary_type_return retval = new binary_type_return();
        retval.start = input.LT(1);
        int binary_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal64=null;
        width_spec_return width_spec65 = null;


        CommonTree string_literal64_tree=null;
        RewriteRuleTokenStream stream_302=new RewriteRuleTokenStream(adaptor,"token 302");
        RewriteRuleSubtreeStream stream_width_spec=new RewriteRuleSubtreeStream(adaptor,"rule width_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // Express.g:419:3: ( 'binary' ( width_spec )? -> ^( BINARY_TYPE ( width_spec )? ) )
            // Express.g:419:6: 'binary' ( width_spec )?
            {
            string_literal64=(Token)match(input,302,FOLLOW_302_in_binary_type1660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_302.add(string_literal64);

            // Express.g:419:16: ( width_spec )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==LPAREN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Express.g:0:0: width_spec
                    {
                    pushFollow(FOLLOW_width_spec_in_binary_type1663);
                    width_spec65=width_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_width_spec.add(width_spec65.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: width_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 420:3: -> ^( BINARY_TYPE ( width_spec )? )
            {
                // Express.g:420:5: ^( BINARY_TYPE ( width_spec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BINARY_TYPE, "BINARY_TYPE"), root_1);

                // Express.g:420:19: ( width_spec )?
                if ( stream_width_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_width_spec.nextTree());

                }
                stream_width_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, binary_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_type"

    public static class boolean_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_type"
    // Express.g:423:1: boolean_type : 'boolean' -> ^( BOOLEAN_TYPE ) ;
    public final boolean_type_return boolean_type() throws RecognitionException {
        boolean_type_return retval = new boolean_type_return();
        retval.start = input.LT(1);
        int boolean_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal66=null;

        CommonTree string_literal66_tree=null;
        RewriteRuleTokenStream stream_303=new RewriteRuleTokenStream(adaptor,"token 303");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // Express.g:424:3: ( 'boolean' -> ^( BOOLEAN_TYPE ) )
            // Express.g:424:6: 'boolean'
            {
            string_literal66=(Token)match(input,303,FOLLOW_303_in_boolean_type1688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_303.add(string_literal66);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 424:16: -> ^( BOOLEAN_TYPE )
            {
                // Express.g:424:18: ^( BOOLEAN_TYPE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOLEAN_TYPE, "BOOLEAN_TYPE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, boolean_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolean_type"

    public static class bound_1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound_1"
    // Express.g:427:1: bound_1 : numeric_expression -> ^( BOUND_1 numeric_expression ) ;
    public final bound_1_return bound_1() throws RecognitionException {
        bound_1_return retval = new bound_1_return();
        retval.start = input.LT(1);
        int bound_1_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression67 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // Express.g:428:3: ( numeric_expression -> ^( BOUND_1 numeric_expression ) )
            // Express.g:428:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_bound_11707);
            numeric_expression67=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression67.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 428:25: -> ^( BOUND_1 numeric_expression )
            {
                // Express.g:428:27: ^( BOUND_1 numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOUND_1, "BOUND_1"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, bound_1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound_1"

    public static class bound_2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound_2"
    // Express.g:431:1: bound_2 : numeric_expression -> ^( BOUND_2 numeric_expression ) ;
    public final bound_2_return bound_2() throws RecognitionException {
        bound_2_return retval = new bound_2_return();
        retval.start = input.LT(1);
        int bound_2_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression68 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // Express.g:432:3: ( numeric_expression -> ^( BOUND_2 numeric_expression ) )
            // Express.g:432:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_bound_21728);
            numeric_expression68=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression68.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 432:25: -> ^( BOUND_2 numeric_expression )
            {
                // Express.g:432:27: ^( BOUND_2 numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOUND_2, "BOUND_2"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, bound_2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound_2"

    public static class bound_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound_spec"
    // Express.g:435:1: bound_spec : LBRACK bound_1 COLON bound_2 RBRACK -> ^( BOUND_SPEC bound_1 bound_2 ) ;
    public final bound_spec_return bound_spec() throws RecognitionException {
        bound_spec_return retval = new bound_spec_return();
        retval.start = input.LT(1);
        int bound_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK69=null;
        Token COLON71=null;
        Token RBRACK73=null;
        bound_1_return bound_170 = null;

        bound_2_return bound_272 = null;


        CommonTree LBRACK69_tree=null;
        CommonTree COLON71_tree=null;
        CommonTree RBRACK73_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_bound_1=new RewriteRuleSubtreeStream(adaptor,"rule bound_1");
        RewriteRuleSubtreeStream stream_bound_2=new RewriteRuleSubtreeStream(adaptor,"rule bound_2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // Express.g:436:3: ( LBRACK bound_1 COLON bound_2 RBRACK -> ^( BOUND_SPEC bound_1 bound_2 ) )
            // Express.g:436:6: LBRACK bound_1 COLON bound_2 RBRACK
            {
            LBRACK69=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_bound_spec1749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK69);

            pushFollow(FOLLOW_bound_1_in_bound_spec1752);
            bound_170=bound_1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bound_1.add(bound_170.getTree());
            COLON71=(Token)match(input,COLON,FOLLOW_COLON_in_bound_spec1755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON71);

            pushFollow(FOLLOW_bound_2_in_bound_spec1758);
            bound_272=bound_2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bound_2.add(bound_272.getTree());
            RBRACK73=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_bound_spec1761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK73);



            // AST REWRITE
            // elements: bound_1, bound_2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 437:3: -> ^( BOUND_SPEC bound_1 bound_2 )
            {
                // Express.g:437:6: ^( BOUND_SPEC bound_1 bound_2 )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOUND_SPEC, "BOUND_SPEC"), root_1);

                adaptor.addChild(root_1, stream_bound_1.nextTree());
                adaptor.addChild(root_1, stream_bound_2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, bound_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound_spec"

    public static class built_in_constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "built_in_constant"
    // Express.g:440:1: built_in_constant : ( CONST_E -> ^( BUILT_IN_CONSTANT CONST_E ) | CONST_PI -> ^( BUILT_IN_CONSTANT CONST_PI ) | CONST_SELF -> ^( BUILT_IN_CONSTANT CONST_SELF ) | QUESTION -> ^( BUILT_IN_CONSTANT QUESTION ) | STAR -> ^( BUILT_IN_CONSTANT STAR ) );
    public final built_in_constant_return built_in_constant() throws RecognitionException {
        built_in_constant_return retval = new built_in_constant_return();
        retval.start = input.LT(1);
        int built_in_constant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONST_E74=null;
        Token CONST_PI75=null;
        Token CONST_SELF76=null;
        Token QUESTION77=null;
        Token STAR78=null;

        CommonTree CONST_E74_tree=null;
        CommonTree CONST_PI75_tree=null;
        CommonTree CONST_SELF76_tree=null;
        CommonTree QUESTION77_tree=null;
        CommonTree STAR78_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_CONST_SELF=new RewriteRuleTokenStream(adaptor,"token CONST_SELF");
        RewriteRuleTokenStream stream_CONST_E=new RewriteRuleTokenStream(adaptor,"token CONST_E");
        RewriteRuleTokenStream stream_CONST_PI=new RewriteRuleTokenStream(adaptor,"token CONST_PI");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // Express.g:441:3: ( CONST_E -> ^( BUILT_IN_CONSTANT CONST_E ) | CONST_PI -> ^( BUILT_IN_CONSTANT CONST_PI ) | CONST_SELF -> ^( BUILT_IN_CONSTANT CONST_SELF ) | QUESTION -> ^( BUILT_IN_CONSTANT QUESTION ) | STAR -> ^( BUILT_IN_CONSTANT STAR ) )
            int alt21=5;
            switch ( input.LA(1) ) {
            case CONST_E:
                {
                alt21=1;
                }
                break;
            case CONST_PI:
                {
                alt21=2;
                }
                break;
            case CONST_SELF:
                {
                alt21=3;
                }
                break;
            case QUESTION:
                {
                alt21=4;
                }
                break;
            case STAR:
                {
                alt21=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // Express.g:441:6: CONST_E
                    {
                    CONST_E74=(Token)match(input,CONST_E,FOLLOW_CONST_E_in_built_in_constant1787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONST_E.add(CONST_E74);



                    // AST REWRITE
                    // elements: CONST_E
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 441:14: -> ^( BUILT_IN_CONSTANT CONST_E )
                    {
                        // Express.g:441:17: ^( BUILT_IN_CONSTANT CONST_E )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_CONSTANT, "BUILT_IN_CONSTANT"), root_1);

                        adaptor.addChild(root_1, stream_CONST_E.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:442:6: CONST_PI
                    {
                    CONST_PI75=(Token)match(input,CONST_PI,FOLLOW_CONST_PI_in_built_in_constant1802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONST_PI.add(CONST_PI75);



                    // AST REWRITE
                    // elements: CONST_PI
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 442:15: -> ^( BUILT_IN_CONSTANT CONST_PI )
                    {
                        // Express.g:442:18: ^( BUILT_IN_CONSTANT CONST_PI )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_CONSTANT, "BUILT_IN_CONSTANT"), root_1);

                        adaptor.addChild(root_1, stream_CONST_PI.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:443:6: CONST_SELF
                    {
                    CONST_SELF76=(Token)match(input,CONST_SELF,FOLLOW_CONST_SELF_in_built_in_constant1817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONST_SELF.add(CONST_SELF76);



                    // AST REWRITE
                    // elements: CONST_SELF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 443:17: -> ^( BUILT_IN_CONSTANT CONST_SELF )
                    {
                        // Express.g:443:20: ^( BUILT_IN_CONSTANT CONST_SELF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_CONSTANT, "BUILT_IN_CONSTANT"), root_1);

                        adaptor.addChild(root_1, stream_CONST_SELF.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:444:6: QUESTION
                    {
                    QUESTION77=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_built_in_constant1832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION77);



                    // AST REWRITE
                    // elements: QUESTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 444:16: -> ^( BUILT_IN_CONSTANT QUESTION )
                    {
                        // Express.g:444:19: ^( BUILT_IN_CONSTANT QUESTION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_CONSTANT, "BUILT_IN_CONSTANT"), root_1);

                        adaptor.addChild(root_1, stream_QUESTION.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:445:6: STAR
                    {
                    STAR78=(Token)match(input,STAR,FOLLOW_STAR_in_built_in_constant1848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR78);



                    // AST REWRITE
                    // elements: STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 445:12: -> ^( BUILT_IN_CONSTANT STAR )
                    {
                        // Express.g:445:15: ^( BUILT_IN_CONSTANT STAR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_CONSTANT, "BUILT_IN_CONSTANT"), root_1);

                        adaptor.addChild(root_1, stream_STAR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, built_in_constant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "built_in_constant"

    public static class built_in_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "built_in_function"
    // Express.g:448:1: built_in_function : ( FUNCTION_ABS -> ^( BUILT_IN_FUNCTION FUNCTION_ABS ) | FUNCTION_ACOS -> ^( BUILT_IN_FUNCTION FUNCTION_ACOS ) | FUNCTION_ASIN -> ^( BUILT_IN_FUNCTION FUNCTION_ASIN ) | FUNCTION_ATAN -> ^( BUILT_IN_FUNCTION FUNCTION_ATAN ) | FUNCTION_BLENGTH -> ^( BUILT_IN_FUNCTION FUNCTION_BLENGTH ) | FUNCTION_COS -> ^( BUILT_IN_FUNCTION FUNCTION_COS ) | FUNCTION_EXISTS -> ^( BUILT_IN_FUNCTION FUNCTION_EXISTS ) | FUNCTION_EXP -> ^( BUILT_IN_FUNCTION FUNCTION_EXP ) | FUNCTION_FORMAT -> ^( BUILT_IN_FUNCTION FUNCTION_FORMAT ) | FUNCTION_HIBOUND -> ^( BUILT_IN_FUNCTION FUNCTION_HIBOUND ) | FUNCTION_HIINDEX -> ^( BUILT_IN_FUNCTION FUNCTION_HIINDEX ) | FUNCTION_LENGTH -> ^( BUILT_IN_FUNCTION FUNCTION_LENGTH ) | FUNCTION_LOBOUND -> ^( BUILT_IN_FUNCTION FUNCTION_LOBOUND ) | FUNCTION_LOINDEX -> ^( BUILT_IN_FUNCTION FUNCTION_LOINDEX ) | FUNCTION_LOG -> ^( BUILT_IN_FUNCTION FUNCTION_LOG ) | FUNCTION_LOG2 -> ^( BUILT_IN_FUNCTION FUNCTION_LOG2 ) | FUNCTION_LOG10 -> ^( BUILT_IN_FUNCTION FUNCTION_LOG10 ) | FUNCTION_NVL -> ^( BUILT_IN_FUNCTION FUNCTION_NVL ) | FUNCTION_ODD -> ^( BUILT_IN_FUNCTION FUNCTION_ODD ) | FUNCTION_ROLESOF -> ^( BUILT_IN_FUNCTION FUNCTION_ROLESOF ) | FUNCTION_SIN -> ^( BUILT_IN_FUNCTION FUNCTION_SIN ) | FUNCTION_SIZEOF -> ^( BUILT_IN_FUNCTION FUNCTION_SIZEOF ) | FUNCTION_SQRT -> ^( BUILT_IN_FUNCTION FUNCTION_SQRT ) | FUNCTION_TAN -> ^( BUILT_IN_FUNCTION FUNCTION_TAN ) | FUNCTION_TYPEOF -> ^( BUILT_IN_FUNCTION FUNCTION_TYPEOF ) | FUNCTION_USEDIN -> ^( BUILT_IN_FUNCTION FUNCTION_USEDIN ) | FUNCTION_VALUE -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE ) | FUNCTION_VALUE_IN -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE_IN ) | FUNCTION_VALUE_UNIQUE -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE_UNIQUE ) );
    public final built_in_function_return built_in_function() throws RecognitionException {
        built_in_function_return retval = new built_in_function_return();
        retval.start = input.LT(1);
        int built_in_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FUNCTION_ABS79=null;
        Token FUNCTION_ACOS80=null;
        Token FUNCTION_ASIN81=null;
        Token FUNCTION_ATAN82=null;
        Token FUNCTION_BLENGTH83=null;
        Token FUNCTION_COS84=null;
        Token FUNCTION_EXISTS85=null;
        Token FUNCTION_EXP86=null;
        Token FUNCTION_FORMAT87=null;
        Token FUNCTION_HIBOUND88=null;
        Token FUNCTION_HIINDEX89=null;
        Token FUNCTION_LENGTH90=null;
        Token FUNCTION_LOBOUND91=null;
        Token FUNCTION_LOINDEX92=null;
        Token FUNCTION_LOG93=null;
        Token FUNCTION_LOG294=null;
        Token FUNCTION_LOG1095=null;
        Token FUNCTION_NVL96=null;
        Token FUNCTION_ODD97=null;
        Token FUNCTION_ROLESOF98=null;
        Token FUNCTION_SIN99=null;
        Token FUNCTION_SIZEOF100=null;
        Token FUNCTION_SQRT101=null;
        Token FUNCTION_TAN102=null;
        Token FUNCTION_TYPEOF103=null;
        Token FUNCTION_USEDIN104=null;
        Token FUNCTION_VALUE105=null;
        Token FUNCTION_VALUE_IN106=null;
        Token FUNCTION_VALUE_UNIQUE107=null;

        CommonTree FUNCTION_ABS79_tree=null;
        CommonTree FUNCTION_ACOS80_tree=null;
        CommonTree FUNCTION_ASIN81_tree=null;
        CommonTree FUNCTION_ATAN82_tree=null;
        CommonTree FUNCTION_BLENGTH83_tree=null;
        CommonTree FUNCTION_COS84_tree=null;
        CommonTree FUNCTION_EXISTS85_tree=null;
        CommonTree FUNCTION_EXP86_tree=null;
        CommonTree FUNCTION_FORMAT87_tree=null;
        CommonTree FUNCTION_HIBOUND88_tree=null;
        CommonTree FUNCTION_HIINDEX89_tree=null;
        CommonTree FUNCTION_LENGTH90_tree=null;
        CommonTree FUNCTION_LOBOUND91_tree=null;
        CommonTree FUNCTION_LOINDEX92_tree=null;
        CommonTree FUNCTION_LOG93_tree=null;
        CommonTree FUNCTION_LOG294_tree=null;
        CommonTree FUNCTION_LOG1095_tree=null;
        CommonTree FUNCTION_NVL96_tree=null;
        CommonTree FUNCTION_ODD97_tree=null;
        CommonTree FUNCTION_ROLESOF98_tree=null;
        CommonTree FUNCTION_SIN99_tree=null;
        CommonTree FUNCTION_SIZEOF100_tree=null;
        CommonTree FUNCTION_SQRT101_tree=null;
        CommonTree FUNCTION_TAN102_tree=null;
        CommonTree FUNCTION_TYPEOF103_tree=null;
        CommonTree FUNCTION_USEDIN104_tree=null;
        CommonTree FUNCTION_VALUE105_tree=null;
        CommonTree FUNCTION_VALUE_IN106_tree=null;
        CommonTree FUNCTION_VALUE_UNIQUE107_tree=null;
        RewriteRuleTokenStream stream_FUNCTION_ROLESOF=new RewriteRuleTokenStream(adaptor,"token FUNCTION_ROLESOF");
        RewriteRuleTokenStream stream_FUNCTION_HIINDEX=new RewriteRuleTokenStream(adaptor,"token FUNCTION_HIINDEX");
        RewriteRuleTokenStream stream_FUNCTION_NVL=new RewriteRuleTokenStream(adaptor,"token FUNCTION_NVL");
        RewriteRuleTokenStream stream_FUNCTION_VALUE_UNIQUE=new RewriteRuleTokenStream(adaptor,"token FUNCTION_VALUE_UNIQUE");
        RewriteRuleTokenStream stream_FUNCTION_VALUE_IN=new RewriteRuleTokenStream(adaptor,"token FUNCTION_VALUE_IN");
        RewriteRuleTokenStream stream_FUNCTION_TAN=new RewriteRuleTokenStream(adaptor,"token FUNCTION_TAN");
        RewriteRuleTokenStream stream_FUNCTION_ATAN=new RewriteRuleTokenStream(adaptor,"token FUNCTION_ATAN");
        RewriteRuleTokenStream stream_FUNCTION_EXISTS=new RewriteRuleTokenStream(adaptor,"token FUNCTION_EXISTS");
        RewriteRuleTokenStream stream_FUNCTION_LOBOUND=new RewriteRuleTokenStream(adaptor,"token FUNCTION_LOBOUND");
        RewriteRuleTokenStream stream_FUNCTION_EXP=new RewriteRuleTokenStream(adaptor,"token FUNCTION_EXP");
        RewriteRuleTokenStream stream_FUNCTION_LOG10=new RewriteRuleTokenStream(adaptor,"token FUNCTION_LOG10");
        RewriteRuleTokenStream stream_FUNCTION_SIN=new RewriteRuleTokenStream(adaptor,"token FUNCTION_SIN");
        RewriteRuleTokenStream stream_FUNCTION_TYPEOF=new RewriteRuleTokenStream(adaptor,"token FUNCTION_TYPEOF");
        RewriteRuleTokenStream stream_FUNCTION_SQRT=new RewriteRuleTokenStream(adaptor,"token FUNCTION_SQRT");
        RewriteRuleTokenStream stream_FUNCTION_FORMAT=new RewriteRuleTokenStream(adaptor,"token FUNCTION_FORMAT");
        RewriteRuleTokenStream stream_FUNCTION_USEDIN=new RewriteRuleTokenStream(adaptor,"token FUNCTION_USEDIN");
        RewriteRuleTokenStream stream_FUNCTION_COS=new RewriteRuleTokenStream(adaptor,"token FUNCTION_COS");
        RewriteRuleTokenStream stream_FUNCTION_SIZEOF=new RewriteRuleTokenStream(adaptor,"token FUNCTION_SIZEOF");
        RewriteRuleTokenStream stream_FUNCTION_HIBOUND=new RewriteRuleTokenStream(adaptor,"token FUNCTION_HIBOUND");
        RewriteRuleTokenStream stream_FUNCTION_LOG=new RewriteRuleTokenStream(adaptor,"token FUNCTION_LOG");
        RewriteRuleTokenStream stream_FUNCTION_LOINDEX=new RewriteRuleTokenStream(adaptor,"token FUNCTION_LOINDEX");
        RewriteRuleTokenStream stream_FUNCTION_ACOS=new RewriteRuleTokenStream(adaptor,"token FUNCTION_ACOS");
        RewriteRuleTokenStream stream_FUNCTION_BLENGTH=new RewriteRuleTokenStream(adaptor,"token FUNCTION_BLENGTH");
        RewriteRuleTokenStream stream_FUNCTION_ABS=new RewriteRuleTokenStream(adaptor,"token FUNCTION_ABS");
        RewriteRuleTokenStream stream_FUNCTION_LOG2=new RewriteRuleTokenStream(adaptor,"token FUNCTION_LOG2");
        RewriteRuleTokenStream stream_FUNCTION_VALUE=new RewriteRuleTokenStream(adaptor,"token FUNCTION_VALUE");
        RewriteRuleTokenStream stream_FUNCTION_ODD=new RewriteRuleTokenStream(adaptor,"token FUNCTION_ODD");
        RewriteRuleTokenStream stream_FUNCTION_LENGTH=new RewriteRuleTokenStream(adaptor,"token FUNCTION_LENGTH");
        RewriteRuleTokenStream stream_FUNCTION_ASIN=new RewriteRuleTokenStream(adaptor,"token FUNCTION_ASIN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // Express.g:449:3: ( FUNCTION_ABS -> ^( BUILT_IN_FUNCTION FUNCTION_ABS ) | FUNCTION_ACOS -> ^( BUILT_IN_FUNCTION FUNCTION_ACOS ) | FUNCTION_ASIN -> ^( BUILT_IN_FUNCTION FUNCTION_ASIN ) | FUNCTION_ATAN -> ^( BUILT_IN_FUNCTION FUNCTION_ATAN ) | FUNCTION_BLENGTH -> ^( BUILT_IN_FUNCTION FUNCTION_BLENGTH ) | FUNCTION_COS -> ^( BUILT_IN_FUNCTION FUNCTION_COS ) | FUNCTION_EXISTS -> ^( BUILT_IN_FUNCTION FUNCTION_EXISTS ) | FUNCTION_EXP -> ^( BUILT_IN_FUNCTION FUNCTION_EXP ) | FUNCTION_FORMAT -> ^( BUILT_IN_FUNCTION FUNCTION_FORMAT ) | FUNCTION_HIBOUND -> ^( BUILT_IN_FUNCTION FUNCTION_HIBOUND ) | FUNCTION_HIINDEX -> ^( BUILT_IN_FUNCTION FUNCTION_HIINDEX ) | FUNCTION_LENGTH -> ^( BUILT_IN_FUNCTION FUNCTION_LENGTH ) | FUNCTION_LOBOUND -> ^( BUILT_IN_FUNCTION FUNCTION_LOBOUND ) | FUNCTION_LOINDEX -> ^( BUILT_IN_FUNCTION FUNCTION_LOINDEX ) | FUNCTION_LOG -> ^( BUILT_IN_FUNCTION FUNCTION_LOG ) | FUNCTION_LOG2 -> ^( BUILT_IN_FUNCTION FUNCTION_LOG2 ) | FUNCTION_LOG10 -> ^( BUILT_IN_FUNCTION FUNCTION_LOG10 ) | FUNCTION_NVL -> ^( BUILT_IN_FUNCTION FUNCTION_NVL ) | FUNCTION_ODD -> ^( BUILT_IN_FUNCTION FUNCTION_ODD ) | FUNCTION_ROLESOF -> ^( BUILT_IN_FUNCTION FUNCTION_ROLESOF ) | FUNCTION_SIN -> ^( BUILT_IN_FUNCTION FUNCTION_SIN ) | FUNCTION_SIZEOF -> ^( BUILT_IN_FUNCTION FUNCTION_SIZEOF ) | FUNCTION_SQRT -> ^( BUILT_IN_FUNCTION FUNCTION_SQRT ) | FUNCTION_TAN -> ^( BUILT_IN_FUNCTION FUNCTION_TAN ) | FUNCTION_TYPEOF -> ^( BUILT_IN_FUNCTION FUNCTION_TYPEOF ) | FUNCTION_USEDIN -> ^( BUILT_IN_FUNCTION FUNCTION_USEDIN ) | FUNCTION_VALUE -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE ) | FUNCTION_VALUE_IN -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE_IN ) | FUNCTION_VALUE_UNIQUE -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE_UNIQUE ) )
            int alt22=29;
            switch ( input.LA(1) ) {
            case FUNCTION_ABS:
                {
                alt22=1;
                }
                break;
            case FUNCTION_ACOS:
                {
                alt22=2;
                }
                break;
            case FUNCTION_ASIN:
                {
                alt22=3;
                }
                break;
            case FUNCTION_ATAN:
                {
                alt22=4;
                }
                break;
            case FUNCTION_BLENGTH:
                {
                alt22=5;
                }
                break;
            case FUNCTION_COS:
                {
                alt22=6;
                }
                break;
            case FUNCTION_EXISTS:
                {
                alt22=7;
                }
                break;
            case FUNCTION_EXP:
                {
                alt22=8;
                }
                break;
            case FUNCTION_FORMAT:
                {
                alt22=9;
                }
                break;
            case FUNCTION_HIBOUND:
                {
                alt22=10;
                }
                break;
            case FUNCTION_HIINDEX:
                {
                alt22=11;
                }
                break;
            case FUNCTION_LENGTH:
                {
                alt22=12;
                }
                break;
            case FUNCTION_LOBOUND:
                {
                alt22=13;
                }
                break;
            case FUNCTION_LOINDEX:
                {
                alt22=14;
                }
                break;
            case FUNCTION_LOG:
                {
                alt22=15;
                }
                break;
            case FUNCTION_LOG2:
                {
                alt22=16;
                }
                break;
            case FUNCTION_LOG10:
                {
                alt22=17;
                }
                break;
            case FUNCTION_NVL:
                {
                alt22=18;
                }
                break;
            case FUNCTION_ODD:
                {
                alt22=19;
                }
                break;
            case FUNCTION_ROLESOF:
                {
                alt22=20;
                }
                break;
            case FUNCTION_SIN:
                {
                alt22=21;
                }
                break;
            case FUNCTION_SIZEOF:
                {
                alt22=22;
                }
                break;
            case FUNCTION_SQRT:
                {
                alt22=23;
                }
                break;
            case FUNCTION_TAN:
                {
                alt22=24;
                }
                break;
            case FUNCTION_TYPEOF:
                {
                alt22=25;
                }
                break;
            case FUNCTION_USEDIN:
                {
                alt22=26;
                }
                break;
            case FUNCTION_VALUE:
                {
                alt22=27;
                }
                break;
            case FUNCTION_VALUE_IN:
                {
                alt22=28;
                }
                break;
            case FUNCTION_VALUE_UNIQUE:
                {
                alt22=29;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }

            switch (alt22) {
                case 1 :
                    // Express.g:449:6: FUNCTION_ABS
                    {
                    FUNCTION_ABS79=(Token)match(input,FUNCTION_ABS,FOLLOW_FUNCTION_ABS_in_built_in_function1871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_ABS.add(FUNCTION_ABS79);



                    // AST REWRITE
                    // elements: FUNCTION_ABS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 449:19: -> ^( BUILT_IN_FUNCTION FUNCTION_ABS )
                    {
                        // Express.g:449:22: ^( BUILT_IN_FUNCTION FUNCTION_ABS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_ABS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:450:6: FUNCTION_ACOS
                    {
                    FUNCTION_ACOS80=(Token)match(input,FUNCTION_ACOS,FOLLOW_FUNCTION_ACOS_in_built_in_function1886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_ACOS.add(FUNCTION_ACOS80);



                    // AST REWRITE
                    // elements: FUNCTION_ACOS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 450:20: -> ^( BUILT_IN_FUNCTION FUNCTION_ACOS )
                    {
                        // Express.g:450:23: ^( BUILT_IN_FUNCTION FUNCTION_ACOS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_ACOS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:451:6: FUNCTION_ASIN
                    {
                    FUNCTION_ASIN81=(Token)match(input,FUNCTION_ASIN,FOLLOW_FUNCTION_ASIN_in_built_in_function1902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_ASIN.add(FUNCTION_ASIN81);



                    // AST REWRITE
                    // elements: FUNCTION_ASIN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 451:20: -> ^( BUILT_IN_FUNCTION FUNCTION_ASIN )
                    {
                        // Express.g:451:23: ^( BUILT_IN_FUNCTION FUNCTION_ASIN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_ASIN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:452:6: FUNCTION_ATAN
                    {
                    FUNCTION_ATAN82=(Token)match(input,FUNCTION_ATAN,FOLLOW_FUNCTION_ATAN_in_built_in_function1917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_ATAN.add(FUNCTION_ATAN82);



                    // AST REWRITE
                    // elements: FUNCTION_ATAN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 452:20: -> ^( BUILT_IN_FUNCTION FUNCTION_ATAN )
                    {
                        // Express.g:452:23: ^( BUILT_IN_FUNCTION FUNCTION_ATAN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_ATAN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:453:6: FUNCTION_BLENGTH
                    {
                    FUNCTION_BLENGTH83=(Token)match(input,FUNCTION_BLENGTH,FOLLOW_FUNCTION_BLENGTH_in_built_in_function1932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_BLENGTH.add(FUNCTION_BLENGTH83);



                    // AST REWRITE
                    // elements: FUNCTION_BLENGTH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 453:23: -> ^( BUILT_IN_FUNCTION FUNCTION_BLENGTH )
                    {
                        // Express.g:453:26: ^( BUILT_IN_FUNCTION FUNCTION_BLENGTH )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_BLENGTH.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:454:6: FUNCTION_COS
                    {
                    FUNCTION_COS84=(Token)match(input,FUNCTION_COS,FOLLOW_FUNCTION_COS_in_built_in_function1947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_COS.add(FUNCTION_COS84);



                    // AST REWRITE
                    // elements: FUNCTION_COS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 454:19: -> ^( BUILT_IN_FUNCTION FUNCTION_COS )
                    {
                        // Express.g:454:22: ^( BUILT_IN_FUNCTION FUNCTION_COS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_COS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Express.g:455:6: FUNCTION_EXISTS
                    {
                    FUNCTION_EXISTS85=(Token)match(input,FUNCTION_EXISTS,FOLLOW_FUNCTION_EXISTS_in_built_in_function1962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_EXISTS.add(FUNCTION_EXISTS85);



                    // AST REWRITE
                    // elements: FUNCTION_EXISTS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 455:22: -> ^( BUILT_IN_FUNCTION FUNCTION_EXISTS )
                    {
                        // Express.g:455:25: ^( BUILT_IN_FUNCTION FUNCTION_EXISTS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_EXISTS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // Express.g:456:6: FUNCTION_EXP
                    {
                    FUNCTION_EXP86=(Token)match(input,FUNCTION_EXP,FOLLOW_FUNCTION_EXP_in_built_in_function1978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_EXP.add(FUNCTION_EXP86);



                    // AST REWRITE
                    // elements: FUNCTION_EXP
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 456:19: -> ^( BUILT_IN_FUNCTION FUNCTION_EXP )
                    {
                        // Express.g:456:22: ^( BUILT_IN_FUNCTION FUNCTION_EXP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_EXP.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // Express.g:457:6: FUNCTION_FORMAT
                    {
                    FUNCTION_FORMAT87=(Token)match(input,FUNCTION_FORMAT,FOLLOW_FUNCTION_FORMAT_in_built_in_function1993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_FORMAT.add(FUNCTION_FORMAT87);



                    // AST REWRITE
                    // elements: FUNCTION_FORMAT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 457:22: -> ^( BUILT_IN_FUNCTION FUNCTION_FORMAT )
                    {
                        // Express.g:457:25: ^( BUILT_IN_FUNCTION FUNCTION_FORMAT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_FORMAT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // Express.g:458:6: FUNCTION_HIBOUND
                    {
                    FUNCTION_HIBOUND88=(Token)match(input,FUNCTION_HIBOUND,FOLLOW_FUNCTION_HIBOUND_in_built_in_function2008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_HIBOUND.add(FUNCTION_HIBOUND88);



                    // AST REWRITE
                    // elements: FUNCTION_HIBOUND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 458:23: -> ^( BUILT_IN_FUNCTION FUNCTION_HIBOUND )
                    {
                        // Express.g:458:26: ^( BUILT_IN_FUNCTION FUNCTION_HIBOUND )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_HIBOUND.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // Express.g:459:6: FUNCTION_HIINDEX
                    {
                    FUNCTION_HIINDEX89=(Token)match(input,FUNCTION_HIINDEX,FOLLOW_FUNCTION_HIINDEX_in_built_in_function2023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_HIINDEX.add(FUNCTION_HIINDEX89);



                    // AST REWRITE
                    // elements: FUNCTION_HIINDEX
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 459:23: -> ^( BUILT_IN_FUNCTION FUNCTION_HIINDEX )
                    {
                        // Express.g:459:26: ^( BUILT_IN_FUNCTION FUNCTION_HIINDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_HIINDEX.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // Express.g:460:6: FUNCTION_LENGTH
                    {
                    FUNCTION_LENGTH90=(Token)match(input,FUNCTION_LENGTH,FOLLOW_FUNCTION_LENGTH_in_built_in_function2038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_LENGTH.add(FUNCTION_LENGTH90);



                    // AST REWRITE
                    // elements: FUNCTION_LENGTH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 460:22: -> ^( BUILT_IN_FUNCTION FUNCTION_LENGTH )
                    {
                        // Express.g:460:25: ^( BUILT_IN_FUNCTION FUNCTION_LENGTH )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_LENGTH.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // Express.g:461:6: FUNCTION_LOBOUND
                    {
                    FUNCTION_LOBOUND91=(Token)match(input,FUNCTION_LOBOUND,FOLLOW_FUNCTION_LOBOUND_in_built_in_function2054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_LOBOUND.add(FUNCTION_LOBOUND91);



                    // AST REWRITE
                    // elements: FUNCTION_LOBOUND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 461:23: -> ^( BUILT_IN_FUNCTION FUNCTION_LOBOUND )
                    {
                        // Express.g:461:26: ^( BUILT_IN_FUNCTION FUNCTION_LOBOUND )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_LOBOUND.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // Express.g:462:6: FUNCTION_LOINDEX
                    {
                    FUNCTION_LOINDEX92=(Token)match(input,FUNCTION_LOINDEX,FOLLOW_FUNCTION_LOINDEX_in_built_in_function2070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_LOINDEX.add(FUNCTION_LOINDEX92);



                    // AST REWRITE
                    // elements: FUNCTION_LOINDEX
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 462:23: -> ^( BUILT_IN_FUNCTION FUNCTION_LOINDEX )
                    {
                        // Express.g:462:26: ^( BUILT_IN_FUNCTION FUNCTION_LOINDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_LOINDEX.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // Express.g:463:6: FUNCTION_LOG
                    {
                    FUNCTION_LOG93=(Token)match(input,FUNCTION_LOG,FOLLOW_FUNCTION_LOG_in_built_in_function2086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_LOG.add(FUNCTION_LOG93);



                    // AST REWRITE
                    // elements: FUNCTION_LOG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 463:19: -> ^( BUILT_IN_FUNCTION FUNCTION_LOG )
                    {
                        // Express.g:463:22: ^( BUILT_IN_FUNCTION FUNCTION_LOG )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_LOG.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // Express.g:464:6: FUNCTION_LOG2
                    {
                    FUNCTION_LOG294=(Token)match(input,FUNCTION_LOG2,FOLLOW_FUNCTION_LOG2_in_built_in_function2102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_LOG2.add(FUNCTION_LOG294);



                    // AST REWRITE
                    // elements: FUNCTION_LOG2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 464:20: -> ^( BUILT_IN_FUNCTION FUNCTION_LOG2 )
                    {
                        // Express.g:464:23: ^( BUILT_IN_FUNCTION FUNCTION_LOG2 )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_LOG2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // Express.g:465:6: FUNCTION_LOG10
                    {
                    FUNCTION_LOG1095=(Token)match(input,FUNCTION_LOG10,FOLLOW_FUNCTION_LOG10_in_built_in_function2118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_LOG10.add(FUNCTION_LOG1095);



                    // AST REWRITE
                    // elements: FUNCTION_LOG10
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 465:22: -> ^( BUILT_IN_FUNCTION FUNCTION_LOG10 )
                    {
                        // Express.g:465:25: ^( BUILT_IN_FUNCTION FUNCTION_LOG10 )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_LOG10.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 18 :
                    // Express.g:466:6: FUNCTION_NVL
                    {
                    FUNCTION_NVL96=(Token)match(input,FUNCTION_NVL,FOLLOW_FUNCTION_NVL_in_built_in_function2135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_NVL.add(FUNCTION_NVL96);



                    // AST REWRITE
                    // elements: FUNCTION_NVL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 466:20: -> ^( BUILT_IN_FUNCTION FUNCTION_NVL )
                    {
                        // Express.g:466:23: ^( BUILT_IN_FUNCTION FUNCTION_NVL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_NVL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    // Express.g:467:6: FUNCTION_ODD
                    {
                    FUNCTION_ODD97=(Token)match(input,FUNCTION_ODD,FOLLOW_FUNCTION_ODD_in_built_in_function2152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_ODD.add(FUNCTION_ODD97);



                    // AST REWRITE
                    // elements: FUNCTION_ODD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 467:19: -> ^( BUILT_IN_FUNCTION FUNCTION_ODD )
                    {
                        // Express.g:467:22: ^( BUILT_IN_FUNCTION FUNCTION_ODD )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_ODD.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 20 :
                    // Express.g:468:6: FUNCTION_ROLESOF
                    {
                    FUNCTION_ROLESOF98=(Token)match(input,FUNCTION_ROLESOF,FOLLOW_FUNCTION_ROLESOF_in_built_in_function2168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_ROLESOF.add(FUNCTION_ROLESOF98);



                    // AST REWRITE
                    // elements: FUNCTION_ROLESOF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 468:23: -> ^( BUILT_IN_FUNCTION FUNCTION_ROLESOF )
                    {
                        // Express.g:468:26: ^( BUILT_IN_FUNCTION FUNCTION_ROLESOF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_ROLESOF.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    // Express.g:469:6: FUNCTION_SIN
                    {
                    FUNCTION_SIN99=(Token)match(input,FUNCTION_SIN,FOLLOW_FUNCTION_SIN_in_built_in_function2184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_SIN.add(FUNCTION_SIN99);



                    // AST REWRITE
                    // elements: FUNCTION_SIN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 469:19: -> ^( BUILT_IN_FUNCTION FUNCTION_SIN )
                    {
                        // Express.g:469:22: ^( BUILT_IN_FUNCTION FUNCTION_SIN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_SIN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 22 :
                    // Express.g:470:6: FUNCTION_SIZEOF
                    {
                    FUNCTION_SIZEOF100=(Token)match(input,FUNCTION_SIZEOF,FOLLOW_FUNCTION_SIZEOF_in_built_in_function2200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_SIZEOF.add(FUNCTION_SIZEOF100);



                    // AST REWRITE
                    // elements: FUNCTION_SIZEOF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 470:22: -> ^( BUILT_IN_FUNCTION FUNCTION_SIZEOF )
                    {
                        // Express.g:470:25: ^( BUILT_IN_FUNCTION FUNCTION_SIZEOF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_SIZEOF.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 23 :
                    // Express.g:471:6: FUNCTION_SQRT
                    {
                    FUNCTION_SQRT101=(Token)match(input,FUNCTION_SQRT,FOLLOW_FUNCTION_SQRT_in_built_in_function2216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_SQRT.add(FUNCTION_SQRT101);



                    // AST REWRITE
                    // elements: FUNCTION_SQRT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 471:20: -> ^( BUILT_IN_FUNCTION FUNCTION_SQRT )
                    {
                        // Express.g:471:23: ^( BUILT_IN_FUNCTION FUNCTION_SQRT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_SQRT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 24 :
                    // Express.g:472:6: FUNCTION_TAN
                    {
                    FUNCTION_TAN102=(Token)match(input,FUNCTION_TAN,FOLLOW_FUNCTION_TAN_in_built_in_function2232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_TAN.add(FUNCTION_TAN102);



                    // AST REWRITE
                    // elements: FUNCTION_TAN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 472:19: -> ^( BUILT_IN_FUNCTION FUNCTION_TAN )
                    {
                        // Express.g:472:22: ^( BUILT_IN_FUNCTION FUNCTION_TAN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_TAN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 25 :
                    // Express.g:473:6: FUNCTION_TYPEOF
                    {
                    FUNCTION_TYPEOF103=(Token)match(input,FUNCTION_TYPEOF,FOLLOW_FUNCTION_TYPEOF_in_built_in_function2248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_TYPEOF.add(FUNCTION_TYPEOF103);



                    // AST REWRITE
                    // elements: FUNCTION_TYPEOF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 473:22: -> ^( BUILT_IN_FUNCTION FUNCTION_TYPEOF )
                    {
                        // Express.g:473:25: ^( BUILT_IN_FUNCTION FUNCTION_TYPEOF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_TYPEOF.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 26 :
                    // Express.g:474:6: FUNCTION_USEDIN
                    {
                    FUNCTION_USEDIN104=(Token)match(input,FUNCTION_USEDIN,FOLLOW_FUNCTION_USEDIN_in_built_in_function2264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_USEDIN.add(FUNCTION_USEDIN104);



                    // AST REWRITE
                    // elements: FUNCTION_USEDIN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 474:22: -> ^( BUILT_IN_FUNCTION FUNCTION_USEDIN )
                    {
                        // Express.g:474:25: ^( BUILT_IN_FUNCTION FUNCTION_USEDIN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_USEDIN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 27 :
                    // Express.g:475:6: FUNCTION_VALUE
                    {
                    FUNCTION_VALUE105=(Token)match(input,FUNCTION_VALUE,FOLLOW_FUNCTION_VALUE_in_built_in_function2280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_VALUE.add(FUNCTION_VALUE105);



                    // AST REWRITE
                    // elements: FUNCTION_VALUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 475:21: -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE )
                    {
                        // Express.g:475:24: ^( BUILT_IN_FUNCTION FUNCTION_VALUE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_VALUE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 28 :
                    // Express.g:476:6: FUNCTION_VALUE_IN
                    {
                    FUNCTION_VALUE_IN106=(Token)match(input,FUNCTION_VALUE_IN,FOLLOW_FUNCTION_VALUE_IN_in_built_in_function2296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_VALUE_IN.add(FUNCTION_VALUE_IN106);



                    // AST REWRITE
                    // elements: FUNCTION_VALUE_IN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 476:24: -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE_IN )
                    {
                        // Express.g:476:27: ^( BUILT_IN_FUNCTION FUNCTION_VALUE_IN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_VALUE_IN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 29 :
                    // Express.g:477:6: FUNCTION_VALUE_UNIQUE
                    {
                    FUNCTION_VALUE_UNIQUE107=(Token)match(input,FUNCTION_VALUE_UNIQUE,FOLLOW_FUNCTION_VALUE_UNIQUE_in_built_in_function2312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION_VALUE_UNIQUE.add(FUNCTION_VALUE_UNIQUE107);



                    // AST REWRITE
                    // elements: FUNCTION_VALUE_UNIQUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:28: -> ^( BUILT_IN_FUNCTION FUNCTION_VALUE_UNIQUE )
                    {
                        // Express.g:477:31: ^( BUILT_IN_FUNCTION FUNCTION_VALUE_UNIQUE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_FUNCTION, "BUILT_IN_FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_FUNCTION_VALUE_UNIQUE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, built_in_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "built_in_function"

    public static class built_in_procedure_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "built_in_procedure"
    // Express.g:480:1: built_in_procedure : ( PROCEDURE_INSERT -> ^( BUILT_IN_PROCEDURE PROCEDURE_INSERT ) | PROCEDURE_REMOVE -> ^( BUILT_IN_PROCEDURE PROCEDURE_REMOVE ) );
    public final built_in_procedure_return built_in_procedure() throws RecognitionException {
        built_in_procedure_return retval = new built_in_procedure_return();
        retval.start = input.LT(1);
        int built_in_procedure_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PROCEDURE_INSERT108=null;
        Token PROCEDURE_REMOVE109=null;

        CommonTree PROCEDURE_INSERT108_tree=null;
        CommonTree PROCEDURE_REMOVE109_tree=null;
        RewriteRuleTokenStream stream_PROCEDURE_REMOVE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE_REMOVE");
        RewriteRuleTokenStream stream_PROCEDURE_INSERT=new RewriteRuleTokenStream(adaptor,"token PROCEDURE_INSERT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // Express.g:481:3: ( PROCEDURE_INSERT -> ^( BUILT_IN_PROCEDURE PROCEDURE_INSERT ) | PROCEDURE_REMOVE -> ^( BUILT_IN_PROCEDURE PROCEDURE_REMOVE ) )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==PROCEDURE_INSERT) ) {
                alt23=1;
            }
            else if ( (LA23_0==PROCEDURE_REMOVE) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // Express.g:481:6: PROCEDURE_INSERT
                    {
                    PROCEDURE_INSERT108=(Token)match(input,PROCEDURE_INSERT,FOLLOW_PROCEDURE_INSERT_in_built_in_procedure2334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PROCEDURE_INSERT.add(PROCEDURE_INSERT108);



                    // AST REWRITE
                    // elements: PROCEDURE_INSERT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 481:23: -> ^( BUILT_IN_PROCEDURE PROCEDURE_INSERT )
                    {
                        // Express.g:481:26: ^( BUILT_IN_PROCEDURE PROCEDURE_INSERT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_PROCEDURE, "BUILT_IN_PROCEDURE"), root_1);

                        adaptor.addChild(root_1, stream_PROCEDURE_INSERT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:482:6: PROCEDURE_REMOVE
                    {
                    PROCEDURE_REMOVE109=(Token)match(input,PROCEDURE_REMOVE,FOLLOW_PROCEDURE_REMOVE_in_built_in_procedure2350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PROCEDURE_REMOVE.add(PROCEDURE_REMOVE109);



                    // AST REWRITE
                    // elements: PROCEDURE_REMOVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 482:23: -> ^( BUILT_IN_PROCEDURE PROCEDURE_REMOVE )
                    {
                        // Express.g:482:26: ^( BUILT_IN_PROCEDURE PROCEDURE_REMOVE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILT_IN_PROCEDURE, "BUILT_IN_PROCEDURE"), root_1);

                        adaptor.addChild(root_1, stream_PROCEDURE_REMOVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, built_in_procedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "built_in_procedure"

    public static class case_action_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_action"
    // Express.g:485:1: case_action : case_label ( COMMA case_label )* COLON stmt -> ^( CASE_ACTION ( case_label )+ stmt ) ;
    public final case_action_return case_action() throws RecognitionException {
        case_action_return retval = new case_action_return();
        retval.start = input.LT(1);
        int case_action_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA111=null;
        Token COLON113=null;
        case_label_return case_label110 = null;

        case_label_return case_label112 = null;

        stmt_return stmt114 = null;


        CommonTree COMMA111_tree=null;
        CommonTree COLON113_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_case_label=new RewriteRuleSubtreeStream(adaptor,"rule case_label");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // Express.g:486:3: ( case_label ( COMMA case_label )* COLON stmt -> ^( CASE_ACTION ( case_label )+ stmt ) )
            // Express.g:486:6: case_label ( COMMA case_label )* COLON stmt
            {
            pushFollow(FOLLOW_case_label_in_case_action2374);
            case_label110=case_label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_case_label.add(case_label110.getTree());
            // Express.g:486:18: ( COMMA case_label )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // Express.g:486:21: COMMA case_label
            	    {
            	    COMMA111=(Token)match(input,COMMA,FOLLOW_COMMA_in_case_action2380); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA111);

            	    pushFollow(FOLLOW_case_label_in_case_action2383);
            	    case_label112=case_label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_label.add(case_label112.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);

            COLON113=(Token)match(input,COLON,FOLLOW_COLON_in_case_action2389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON113);

            pushFollow(FOLLOW_stmt_in_case_action2392);
            stmt114=stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmt.add(stmt114.getTree());


            // AST REWRITE
            // elements: case_label, stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 487:3: -> ^( CASE_ACTION ( case_label )+ stmt )
            {
                // Express.g:487:6: ^( CASE_ACTION ( case_label )+ stmt )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_ACTION, "CASE_ACTION"), root_1);

                if ( !(stream_case_label.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_label.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_label.nextTree());

                }
                stream_case_label.reset();
                adaptor.addChild(root_1, stream_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, case_action_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_action"

    public static class case_label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_label"
    // Express.g:490:1: case_label : expression -> ^( CASE_LABEL expression ) ;
    public final case_label_return case_label() throws RecognitionException {
        case_label_return retval = new case_label_return();
        retval.start = input.LT(1);
        int case_label_StartIndex = input.index();
        CommonTree root_0 = null;

        expression_return expression115 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // Express.g:491:3: ( expression -> ^( CASE_LABEL expression ) )
            // Express.g:491:6: expression
            {
            pushFollow(FOLLOW_expression_in_case_label2419);
            expression115=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression115.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 492:3: -> ^( CASE_LABEL expression )
            {
                // Express.g:492:6: ^( CASE_LABEL expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_LABEL, "CASE_LABEL"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, case_label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_label"

    public static class case_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_stmt"
    // Express.g:495:1: case_stmt : 'case' selector 'of' ( case_action )* ( 'otherwise' COLON stmt )? 'end_case' SEMI -> ^( CASE_STMT selector ( case_action )* ( stmt )? ) ;
    public final case_stmt_return case_stmt() throws RecognitionException {
        case_stmt_return retval = new case_stmt_return();
        retval.start = input.LT(1);
        int case_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal116=null;
        Token string_literal118=null;
        Token string_literal120=null;
        Token COLON121=null;
        Token string_literal123=null;
        Token SEMI124=null;
        selector_return selector117 = null;

        case_action_return case_action119 = null;

        stmt_return stmt122 = null;


        CommonTree string_literal116_tree=null;
        CommonTree string_literal118_tree=null;
        CommonTree string_literal120_tree=null;
        CommonTree COLON121_tree=null;
        CommonTree string_literal123_tree=null;
        CommonTree SEMI124_tree=null;
        RewriteRuleTokenStream stream_304=new RewriteRuleTokenStream(adaptor,"token 304");
        RewriteRuleTokenStream stream_305=new RewriteRuleTokenStream(adaptor,"token 305");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_306=new RewriteRuleTokenStream(adaptor,"token 306");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        RewriteRuleSubtreeStream stream_case_action=new RewriteRuleSubtreeStream(adaptor,"rule case_action");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // Express.g:496:3: ( 'case' selector 'of' ( case_action )* ( 'otherwise' COLON stmt )? 'end_case' SEMI -> ^( CASE_STMT selector ( case_action )* ( stmt )? ) )
            // Express.g:496:6: 'case' selector 'of' ( case_action )* ( 'otherwise' COLON stmt )? 'end_case' SEMI
            {
            string_literal116=(Token)match(input,304,FOLLOW_304_in_case_stmt2444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_304.add(string_literal116);

            pushFollow(FOLLOW_selector_in_case_stmt2447);
            selector117=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector117.getTree());
            string_literal118=(Token)match(input,294,FOLLOW_294_in_case_stmt2450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal118);

            // Express.g:496:30: ( case_action )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( ((LA25_0>=CONST_E && LA25_0<=FUNCTION_SIZEOF)||LA25_0==NOT||LA25_0==LPAREN||(LA25_0>=PLUS && LA25_0<=LBRACK)||LA25_0==IDENT||(LA25_0>=QUESTION && LA25_0<=STAR)||LA25_0==LCURLY||(LA25_0>=FLOAT && LA25_0<=STRING)||LA25_0==QUERY||(LA25_0>=338 && LA25_0<=340)) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // Express.g:0:0: case_action
            	    {
            	    pushFollow(FOLLOW_case_action_in_case_stmt2453);
            	    case_action119=case_action();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_action.add(case_action119.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            // Express.g:496:44: ( 'otherwise' COLON stmt )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==305) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // Express.g:496:47: 'otherwise' COLON stmt
                    {
                    string_literal120=(Token)match(input,305,FOLLOW_305_in_case_stmt2460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_305.add(string_literal120);

                    COLON121=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt2463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON121);

                    pushFollow(FOLLOW_stmt_in_case_stmt2466);
                    stmt122=stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmt.add(stmt122.getTree());

                    }
                    break;

            }

            string_literal123=(Token)match(input,306,FOLLOW_306_in_case_stmt2472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_306.add(string_literal123);

            SEMI124=(Token)match(input,SEMI,FOLLOW_SEMI_in_case_stmt2475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI124);



            // AST REWRITE
            // elements: selector, stmt, case_action
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 497:3: -> ^( CASE_STMT selector ( case_action )* ( stmt )? )
            {
                // Express.g:497:6: ^( CASE_STMT selector ( case_action )* ( stmt )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_STMT, "CASE_STMT"), root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());
                // Express.g:497:27: ( case_action )*
                while ( stream_case_action.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_action.nextTree());

                }
                stream_case_action.reset();
                // Express.g:497:40: ( stmt )?
                if ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, case_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_stmt"

    public static class compound_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_stmt"
    // Express.g:500:1: compound_stmt : 'begin' ( stmt )+ 'end' SEMI -> ^( COMPOUND_STMT ( stmt )+ ) ;
    public final compound_stmt_return compound_stmt() throws RecognitionException {
        compound_stmt_return retval = new compound_stmt_return();
        retval.start = input.LT(1);
        int compound_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal125=null;
        Token string_literal127=null;
        Token SEMI128=null;
        stmt_return stmt126 = null;


        CommonTree string_literal125_tree=null;
        CommonTree string_literal127_tree=null;
        CommonTree SEMI128_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_307=new RewriteRuleTokenStream(adaptor,"token 307");
        RewriteRuleTokenStream stream_308=new RewriteRuleTokenStream(adaptor,"token 308");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // Express.g:501:3: ( 'begin' ( stmt )+ 'end' SEMI -> ^( COMPOUND_STMT ( stmt )+ ) )
            // Express.g:501:6: 'begin' ( stmt )+ 'end' SEMI
            {
            string_literal125=(Token)match(input,307,FOLLOW_307_in_compound_stmt2505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_307.add(string_literal125);

            // Express.g:501:15: ( stmt )+
            int cnt27=0;
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( ((LA27_0>=PROCEDURE_INSERT && LA27_0<=PROCEDURE_REMOVE)||(LA27_0>=IDENT && LA27_0<=SEMI)||LA27_0==295||LA27_0==304||LA27_0==307||LA27_0==323||LA27_0==329||LA27_0==352||LA27_0==355||LA27_0==361) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_compound_stmt2508);
            	    stmt126=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt126.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt27 >= 1 ) break loop27;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(27, input);
                        throw eee;
                }
                cnt27++;
            } while (true);

            string_literal127=(Token)match(input,308,FOLLOW_308_in_compound_stmt2512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_308.add(string_literal127);

            SEMI128=(Token)match(input,SEMI,FOLLOW_SEMI_in_compound_stmt2515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI128);



            // AST REWRITE
            // elements: stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 502:3: -> ^( COMPOUND_STMT ( stmt )+ )
            {
                // Express.g:502:6: ^( COMPOUND_STMT ( stmt )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPOUND_STMT, "COMPOUND_STMT"), root_1);

                if ( !(stream_stmt.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, compound_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_stmt"

    public static class constant_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_body"
    // Express.g:505:1: constant_body : constant_id COLON base_type COLEQ expression SEMI -> ^( CONSTANT_BODY constant_id base_type expression ) ;
    public final constant_body_return constant_body() throws RecognitionException {
        constant_body_return retval = new constant_body_return();
        retval.start = input.LT(1);
        int constant_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLON130=null;
        Token COLEQ132=null;
        Token SEMI134=null;
        constant_id_return constant_id129 = null;

        base_type_return base_type131 = null;

        expression_return expression133 = null;


        CommonTree COLON130_tree=null;
        CommonTree COLEQ132_tree=null;
        CommonTree SEMI134_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLEQ=new RewriteRuleTokenStream(adaptor,"token COLEQ");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_constant_id=new RewriteRuleSubtreeStream(adaptor,"rule constant_id");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // Express.g:506:3: ( constant_id COLON base_type COLEQ expression SEMI -> ^( CONSTANT_BODY constant_id base_type expression ) )
            // Express.g:506:6: constant_id COLON base_type COLEQ expression SEMI
            {
            pushFollow(FOLLOW_constant_id_in_constant_body2540);
            constant_id129=constant_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constant_id.add(constant_id129.getTree());
            COLON130=(Token)match(input,COLON,FOLLOW_COLON_in_constant_body2543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON130);

            pushFollow(FOLLOW_base_type_in_constant_body2546);
            base_type131=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type131.getTree());
            COLEQ132=(Token)match(input,COLEQ,FOLLOW_COLEQ_in_constant_body2549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLEQ.add(COLEQ132);

            pushFollow(FOLLOW_expression_in_constant_body2552);
            expression133=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression133.getTree());
            SEMI134=(Token)match(input,SEMI,FOLLOW_SEMI_in_constant_body2555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI134);



            // AST REWRITE
            // elements: expression, constant_id, base_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 507:3: -> ^( CONSTANT_BODY constant_id base_type expression )
            {
                // Express.g:507:6: ^( CONSTANT_BODY constant_id base_type expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_BODY, "CONSTANT_BODY"), root_1);

                adaptor.addChild(root_1, stream_constant_id.nextTree());
                adaptor.addChild(root_1, stream_base_type.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, constant_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_body"

    public static class constant_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_decl"
    // Express.g:510:1: constant_decl : 'constant' ( constant_body )+ 'end_constant' SEMI -> ^( CONSTANT_DECL ( constant_body )+ ) ;
    public final constant_decl_return constant_decl() throws RecognitionException {
        constant_decl_return retval = new constant_decl_return();
        retval.start = input.LT(1);
        int constant_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal135=null;
        Token string_literal137=null;
        Token SEMI138=null;
        constant_body_return constant_body136 = null;


        CommonTree string_literal135_tree=null;
        CommonTree string_literal137_tree=null;
        CommonTree SEMI138_tree=null;
        RewriteRuleTokenStream stream_310=new RewriteRuleTokenStream(adaptor,"token 310");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_309=new RewriteRuleTokenStream(adaptor,"token 309");
        RewriteRuleSubtreeStream stream_constant_body=new RewriteRuleSubtreeStream(adaptor,"rule constant_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // Express.g:511:3: ( 'constant' ( constant_body )+ 'end_constant' SEMI -> ^( CONSTANT_DECL ( constant_body )+ ) )
            // Express.g:511:6: 'constant' ( constant_body )+ 'end_constant' SEMI
            {
            string_literal135=(Token)match(input,309,FOLLOW_309_in_constant_decl2583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_309.add(string_literal135);

            // Express.g:511:18: ( constant_body )+
            int cnt28=0;
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==IDENT) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // Express.g:0:0: constant_body
            	    {
            	    pushFollow(FOLLOW_constant_body_in_constant_decl2586);
            	    constant_body136=constant_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_constant_body.add(constant_body136.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt28 >= 1 ) break loop28;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(28, input);
                        throw eee;
                }
                cnt28++;
            } while (true);

            string_literal137=(Token)match(input,310,FOLLOW_310_in_constant_decl2590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_310.add(string_literal137);

            SEMI138=(Token)match(input,SEMI,FOLLOW_SEMI_in_constant_decl2593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI138);



            // AST REWRITE
            // elements: constant_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 512:3: -> ^( CONSTANT_DECL ( constant_body )+ )
            {
                // Express.g:512:6: ^( CONSTANT_DECL ( constant_body )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_DECL, "CONSTANT_DECL"), root_1);

                if ( !(stream_constant_body.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_constant_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant_body.nextTree());

                }
                stream_constant_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, constant_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_decl"

    public static class constant_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_factor"
    // Express.g:515:1: constant_factor : ( built_in_constant -> ^( CONSTANT_FACTOR built_in_constant ) | constant_ref -> ^( CONSTANT_FACTOR constant_ref ) );
    public final constant_factor_return constant_factor() throws RecognitionException {
        constant_factor_return retval = new constant_factor_return();
        retval.start = input.LT(1);
        int constant_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        built_in_constant_return built_in_constant139 = null;

        constant_ref_return constant_ref140 = null;


        RewriteRuleSubtreeStream stream_built_in_constant=new RewriteRuleSubtreeStream(adaptor,"rule built_in_constant");
        RewriteRuleSubtreeStream stream_constant_ref=new RewriteRuleSubtreeStream(adaptor,"rule constant_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // Express.g:516:3: ( built_in_constant -> ^( CONSTANT_FACTOR built_in_constant ) | constant_ref -> ^( CONSTANT_FACTOR constant_ref ) )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( ((LA29_0>=CONST_E && LA29_0<=CONST_SELF)||(LA29_0>=QUESTION && LA29_0<=STAR)) ) {
                alt29=1;
            }
            else if ( (LA29_0==IDENT) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // Express.g:516:6: built_in_constant
                    {
                    pushFollow(FOLLOW_built_in_constant_in_constant_factor2618);
                    built_in_constant139=built_in_constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_built_in_constant.add(built_in_constant139.getTree());


                    // AST REWRITE
                    // elements: built_in_constant
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 516:24: -> ^( CONSTANT_FACTOR built_in_constant )
                    {
                        // Express.g:516:27: ^( CONSTANT_FACTOR built_in_constant )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_FACTOR, "CONSTANT_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_built_in_constant.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:517:6: constant_ref
                    {
                    pushFollow(FOLLOW_constant_ref_in_constant_factor2633);
                    constant_ref140=constant_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_ref.add(constant_ref140.getTree());


                    // AST REWRITE
                    // elements: constant_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 517:19: -> ^( CONSTANT_FACTOR constant_ref )
                    {
                        // Express.g:517:22: ^( CONSTANT_FACTOR constant_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_FACTOR, "CONSTANT_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_constant_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, constant_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_factor"

    public static class constant_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_id"
    // Express.g:520:1: constant_id : ({...}? =>id= IDENT | {...}? IDENT -> ^( CONSTANT_ID IDENT ) );
    public final constant_id_return constant_id() throws RecognitionException {
        constant_id_return retval = new constant_id_return();
        retval.start = input.LT(1);
        int constant_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token IDENT141=null;

        CommonTree id_tree=null;
        CommonTree IDENT141_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // Express.g:521:3: ({...}? =>id= IDENT | {...}? IDENT -> ^( CONSTANT_ID IDENT ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==IDENT) ) {
                int LA30_1 = input.LA(2);

                if ( ((synpred65_Express()&&( isFirst ))) ) {
                    alt30=1;
                }
                else if ( ((nextIs(CONSTANT_IDENT))) ) {
                    alt30=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 30, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // Express.g:521:6: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "constant_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_constant_id2660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       log.debug((id!=null?id.getText():null));addId((id!=null?id.getText():null),CONSTANT_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:522:6: {...}? IDENT
                    {
                    if ( !((nextIs(CONSTANT_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "constant_id", "nextIs(CONSTANT_IDENT)");
                    }
                    IDENT141=(Token)match(input,IDENT,FOLLOW_IDENT_in_constant_id2671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT141);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 522:38: -> ^( CONSTANT_ID IDENT )
                    {
                        // Express.g:522:41: ^( CONSTANT_ID IDENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_ID, "CONSTANT_ID"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, constant_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_id"

    public static class declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration"
    // Express.g:528:1: declaration : ( entity_decl -> ^( DECLARATION entity_decl ) | subtype_constraint_decl -> ^( DECLARATION subtype_constraint_decl ) | function_decl -> ^( DECLARATION function_decl ) | procedure_decl -> ^( DECLARATION procedure_decl ) | type_decl -> ^( DECLARATION type_decl ) );
    public final declaration_return declaration() throws RecognitionException {
        declaration_return retval = new declaration_return();
        retval.start = input.LT(1);
        int declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        entity_decl_return entity_decl142 = null;

        subtype_constraint_decl_return subtype_constraint_decl143 = null;

        function_decl_return function_decl144 = null;

        procedure_decl_return procedure_decl145 = null;

        type_decl_return type_decl146 = null;


        RewriteRuleSubtreeStream stream_function_decl=new RewriteRuleSubtreeStream(adaptor,"rule function_decl");
        RewriteRuleSubtreeStream stream_type_decl=new RewriteRuleSubtreeStream(adaptor,"rule type_decl");
        RewriteRuleSubtreeStream stream_subtype_constraint_decl=new RewriteRuleSubtreeStream(adaptor,"rule subtype_constraint_decl");
        RewriteRuleSubtreeStream stream_procedure_decl=new RewriteRuleSubtreeStream(adaptor,"rule procedure_decl");
        RewriteRuleSubtreeStream stream_entity_decl=new RewriteRuleSubtreeStream(adaptor,"rule entity_decl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // Express.g:529:3: ( entity_decl -> ^( DECLARATION entity_decl ) | subtype_constraint_decl -> ^( DECLARATION subtype_constraint_decl ) | function_decl -> ^( DECLARATION function_decl ) | procedure_decl -> ^( DECLARATION procedure_decl ) | type_decl -> ^( DECLARATION type_decl ) )
            int alt31=5;
            switch ( input.LA(1) ) {
            case 311:
                {
                alt31=1;
                }
                break;
            case 317:
                {
                alt31=2;
                }
                break;
            case 325:
                {
                alt31=3;
                }
                break;
            case 345:
                {
                alt31=4;
                }
                break;
            case 364:
                {
                alt31=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // Express.g:529:6: entity_decl
                    {
                    pushFollow(FOLLOW_entity_decl_in_declaration2697);
                    entity_decl142=entity_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_decl.add(entity_decl142.getTree());


                    // AST REWRITE
                    // elements: entity_decl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 529:18: -> ^( DECLARATION entity_decl )
                    {
                        // Express.g:529:21: ^( DECLARATION entity_decl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_entity_decl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:530:6: subtype_constraint_decl
                    {
                    pushFollow(FOLLOW_subtype_constraint_decl_in_declaration2712);
                    subtype_constraint_decl143=subtype_constraint_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subtype_constraint_decl.add(subtype_constraint_decl143.getTree());


                    // AST REWRITE
                    // elements: subtype_constraint_decl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 530:30: -> ^( DECLARATION subtype_constraint_decl )
                    {
                        // Express.g:530:33: ^( DECLARATION subtype_constraint_decl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_subtype_constraint_decl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:531:6: function_decl
                    {
                    pushFollow(FOLLOW_function_decl_in_declaration2727);
                    function_decl144=function_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_decl.add(function_decl144.getTree());


                    // AST REWRITE
                    // elements: function_decl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 531:20: -> ^( DECLARATION function_decl )
                    {
                        // Express.g:531:23: ^( DECLARATION function_decl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_function_decl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:532:6: procedure_decl
                    {
                    pushFollow(FOLLOW_procedure_decl_in_declaration2743);
                    procedure_decl145=procedure_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_decl.add(procedure_decl145.getTree());


                    // AST REWRITE
                    // elements: procedure_decl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 532:21: -> ^( DECLARATION procedure_decl )
                    {
                        // Express.g:532:24: ^( DECLARATION procedure_decl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_procedure_decl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:533:6: type_decl
                    {
                    pushFollow(FOLLOW_type_decl_in_declaration2758);
                    type_decl146=type_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl.add(type_decl146.getTree());


                    // AST REWRITE
                    // elements: type_decl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 533:16: -> ^( DECLARATION type_decl )
                    {
                        // Express.g:533:19: ^( DECLARATION type_decl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_type_decl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declaration"

    public static class domain_rule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "domain_rule"
    // Express.g:536:1: domain_rule options {k=2; } : ({...}? => logical_expression | ( label COLON )? logical_expression -> ^( DOMAIN_RULE ( label )? logical_expression ) );
    public final domain_rule_return domain_rule() throws RecognitionException {
        domain_rule_return retval = new domain_rule_return();
        retval.start = input.LT(1);
        int domain_rule_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLON149=null;
        logical_expression_return logical_expression147 = null;

        label_return label148 = null;

        logical_expression_return logical_expression150 = null;


        CommonTree COLON149_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_logical_expression=new RewriteRuleSubtreeStream(adaptor,"rule logical_expression");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // Express.g:538:3: ({...}? => logical_expression | ( label COLON )? logical_expression -> ^( DOMAIN_RULE ( label )? logical_expression ) )
            int alt33=2;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // Express.g:538:5: {...}? => logical_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst && input.LA(2) != COLON )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "domain_rule", " isFirst && input.LA(2) != COLON ");
                    }
                    if ( state.backtracking==0 ) {
                      bnice = true;
                    }
                    pushFollow(FOLLOW_logical_expression_in_domain_rule2791);
                    logical_expression147=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression147.getTree());
                    if ( state.backtracking==0 ) {
                      bnice = false;
                    }

                    }
                    break;
                case 2 :
                    // Express.g:539:6: ( label COLON )? logical_expression
                    {
                    // Express.g:539:6: ( label COLON )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==IDENT) ) {
                        int LA32_1 = input.LA(2);

                        if ( (LA32_1==COLON) ) {
                            alt32=1;
                        }
                    }
                    switch (alt32) {
                        case 1 :
                            // Express.g:539:8: label COLON
                            {
                            pushFollow(FOLLOW_label_in_domain_rule2803);
                            label148=label();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_label.add(label148.getTree());
                            COLON149=(Token)match(input,COLON,FOLLOW_COLON_in_domain_rule2806); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON149);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      bnice = true;
                    }
                    pushFollow(FOLLOW_logical_expression_in_domain_rule2814);
                    logical_expression150=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logical_expression.add(logical_expression150.getTree());
                    if ( state.backtracking==0 ) {
                      bnice = false;
                    }


                    // AST REWRITE
                    // elements: logical_expression, label
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 540:3: -> ^( DOMAIN_RULE ( label )? logical_expression )
                    {
                        // Express.g:540:6: ^( DOMAIN_RULE ( label )? logical_expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOMAIN_RULE, "DOMAIN_RULE"), root_1);

                        // Express.g:540:20: ( label )?
                        if ( stream_label.hasNext() ) {
                            adaptor.addChild(root_1, stream_label.nextTree());

                        }
                        stream_label.reset();
                        adaptor.addChild(root_1, stream_logical_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, domain_rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "domain_rule"

    public static class element_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element"
    // Express.g:543:1: element : expression ( COLON repetition )? -> ^( ELEMENT expression ( repetition )? ) ;
    public final element_return element() throws RecognitionException {
        element_return retval = new element_return();
        retval.start = input.LT(1);
        int element_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLON152=null;
        expression_return expression151 = null;

        repetition_return repetition153 = null;


        CommonTree COLON152_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_repetition=new RewriteRuleSubtreeStream(adaptor,"rule repetition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // Express.g:544:3: ( expression ( COLON repetition )? -> ^( ELEMENT expression ( repetition )? ) )
            // Express.g:544:6: expression ( COLON repetition )?
            {
            pushFollow(FOLLOW_expression_in_element2844);
            expression151=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression151.getTree());
            // Express.g:544:18: ( COLON repetition )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==COLON) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // Express.g:544:21: COLON repetition
                    {
                    COLON152=(Token)match(input,COLON,FOLLOW_COLON_in_element2850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON152);

                    pushFollow(FOLLOW_repetition_in_element2853);
                    repetition153=repetition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_repetition.add(repetition153.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, repetition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 545:3: -> ^( ELEMENT expression ( repetition )? )
            {
                // Express.g:545:6: ^( ELEMENT expression ( repetition )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ELEMENT, "ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // Express.g:545:27: ( repetition )?
                if ( stream_repetition.hasNext() ) {
                    adaptor.addChild(root_1, stream_repetition.nextTree());

                }
                stream_repetition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element"

    public static class entity_head_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entity_head"
    // Express.g:548:1: entity_head : 'entity' id= entity_id ({...}? => 'abstract' )? ( subsuper )? ( SEMI )? -> ^( ENTITY_HEAD $id ( 'abstract' )? ( subsuper )? ) ;
    public final entity_head_return entity_head() throws RecognitionException {
        entity_head_return retval = new entity_head_return();
        retval.start = input.LT(1);
        int entity_head_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal154=null;
        Token string_literal155=null;
        Token SEMI157=null;
        entity_id_return id = null;

        subsuper_return subsuper156 = null;


        CommonTree string_literal154_tree=null;
        CommonTree string_literal155_tree=null;
        CommonTree SEMI157_tree=null;
        RewriteRuleTokenStream stream_311=new RewriteRuleTokenStream(adaptor,"token 311");
        RewriteRuleTokenStream stream_312=new RewriteRuleTokenStream(adaptor,"token 312");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_entity_id=new RewriteRuleSubtreeStream(adaptor,"rule entity_id");
        RewriteRuleSubtreeStream stream_subsuper=new RewriteRuleSubtreeStream(adaptor,"rule subsuper");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // Express.g:549:3: ( 'entity' id= entity_id ({...}? => 'abstract' )? ( subsuper )? ( SEMI )? -> ^( ENTITY_HEAD $id ( 'abstract' )? ( subsuper )? ) )
            // Express.g:549:6: 'entity' id= entity_id ({...}? => 'abstract' )? ( subsuper )? ( SEMI )?
            {
            string_literal154=(Token)match(input,311,FOLLOW_311_in_entity_head2884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_311.add(string_literal154);

            pushFollow(FOLLOW_entity_id_in_entity_head2888);
            id=entity_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entity_id.add(id.getTree());
            if ( state.backtracking==0 ) {
               newEntityScope(id.eid); 
            }
            // Express.g:549:56: ({...}? => 'abstract' )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==312) ) {
                int LA35_1 = input.LA(2);

                if ( ((synpred73_Express()&&(!input.LT(2).getText().equals("supertype")))) ) {
                    alt35=1;
                }
            }
            switch (alt35) {
                case 1 :
                    // Express.g:549:57: {...}? => 'abstract'
                    {
                    if ( !((!input.LT(2).getText().equals("supertype"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_head", "!input.LT(2).getText().equals(\"supertype\")");
                    }
                    string_literal155=(Token)match(input,312,FOLLOW_312_in_entity_head2896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_312.add(string_literal155);


                    }
                    break;

            }

            // Express.g:549:119: ( subsuper )?
            int alt36=2;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // Express.g:0:0: subsuper
                    {
                    pushFollow(FOLLOW_subsuper_in_entity_head2901);
                    subsuper156=subsuper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subsuper.add(subsuper156.getTree());

                    }
                    break;

            }

            // Express.g:549:129: ( SEMI )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==SEMI) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // Express.g:0:0: SEMI
                    {
                    SEMI157=(Token)match(input,SEMI,FOLLOW_SEMI_in_entity_head2904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI157);


                    }
                    break;

            }



            // AST REWRITE
            // elements: 312, id, subsuper
            // token labels: 
            // rule labels: id, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 550:3: -> ^( ENTITY_HEAD $id ( 'abstract' )? ( subsuper )? )
            {
                // Express.g:550:6: ^( ENTITY_HEAD $id ( 'abstract' )? ( subsuper )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_HEAD, "ENTITY_HEAD"), root_1);

                adaptor.addChild(root_1, stream_id.nextTree());
                // Express.g:550:24: ( 'abstract' )?
                if ( stream_312.hasNext() ) {
                    adaptor.addChild(root_1, stream_312.nextNode());

                }
                stream_312.reset();
                // Express.g:550:36: ( subsuper )?
                if ( stream_subsuper.hasNext() ) {
                    adaptor.addChild(root_1, stream_subsuper.nextTree());

                }
                stream_subsuper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, entity_head_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entity_head"

    public static class entity_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entity_decl"
    // Express.g:553:1: entity_decl : entity_head entity_body 'end_entity' SEMI -> ^( ENTITY_DECL entity_head entity_body ) ;
    public final entity_decl_return entity_decl() throws RecognitionException {
        entity_decl_return retval = new entity_decl_return();
        retval.start = input.LT(1);
        int entity_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal160=null;
        Token SEMI161=null;
        entity_head_return entity_head158 = null;

        entity_body_return entity_body159 = null;


        CommonTree string_literal160_tree=null;
        CommonTree SEMI161_tree=null;
        RewriteRuleTokenStream stream_313=new RewriteRuleTokenStream(adaptor,"token 313");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_entity_head=new RewriteRuleSubtreeStream(adaptor,"rule entity_head");
        RewriteRuleSubtreeStream stream_entity_body=new RewriteRuleSubtreeStream(adaptor,"rule entity_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // Express.g:554:3: ( entity_head entity_body 'end_entity' SEMI -> ^( ENTITY_DECL entity_head entity_body ) )
            // Express.g:554:6: entity_head entity_body 'end_entity' SEMI
            {
            pushFollow(FOLLOW_entity_head_in_entity_decl2938);
            entity_head158=entity_head();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entity_head.add(entity_head158.getTree());
            pushFollow(FOLLOW_entity_body_in_entity_decl2940);
            entity_body159=entity_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entity_body.add(entity_body159.getTree());
            string_literal160=(Token)match(input,313,FOLLOW_313_in_entity_decl2942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_313.add(string_literal160);

            if ( state.backtracking==0 ) {
               upScope(); 
            }
            SEMI161=(Token)match(input,SEMI,FOLLOW_SEMI_in_entity_decl2946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI161);



            // AST REWRITE
            // elements: entity_head, entity_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 555:3: -> ^( ENTITY_DECL entity_head entity_body )
            {
                // Express.g:555:6: ^( ENTITY_DECL entity_head entity_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_DECL, "ENTITY_DECL"), root_1);

                adaptor.addChild(root_1, stream_entity_head.nextTree());
                adaptor.addChild(root_1, stream_entity_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, entity_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entity_decl"

    public static class entity_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entity_body"
    // Express.g:558:1: entity_body : ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )? -> ^( ENTITY_BODY ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )? ) ;
    public final entity_body_return entity_body() throws RecognitionException {
        entity_body_return retval = new entity_body_return();
        retval.start = input.LT(1);
        int entity_body_StartIndex = input.index();
        CommonTree root_0 = null;

        explicit_attr_return explicit_attr162 = null;

        derive_clause_return derive_clause163 = null;

        inverse_clause_return inverse_clause164 = null;

        unique_clause_return unique_clause165 = null;

        where_clause_return where_clause166 = null;


        RewriteRuleSubtreeStream stream_unique_clause=new RewriteRuleSubtreeStream(adaptor,"rule unique_clause");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_explicit_attr=new RewriteRuleSubtreeStream(adaptor,"rule explicit_attr");
        RewriteRuleSubtreeStream stream_inverse_clause=new RewriteRuleSubtreeStream(adaptor,"rule inverse_clause");
        RewriteRuleSubtreeStream stream_derive_clause=new RewriteRuleSubtreeStream(adaptor,"rule derive_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // Express.g:559:3: ( ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )? -> ^( ENTITY_BODY ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )? ) )
            // Express.g:559:6: ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )?
            {
            // Express.g:559:6: ( explicit_attr )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==CONST_SELF||LA38_0==IDENT) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // Express.g:0:0: explicit_attr
            	    {
            	    pushFollow(FOLLOW_explicit_attr_in_entity_body2972);
            	    explicit_attr162=explicit_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_explicit_attr.add(explicit_attr162.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

            // Express.g:559:21: ( derive_clause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==320) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // Express.g:0:0: derive_clause
                    {
                    pushFollow(FOLLOW_derive_clause_in_entity_body2975);
                    derive_clause163=derive_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_derive_clause.add(derive_clause163.getTree());

                    }
                    break;

            }

            // Express.g:559:36: ( inverse_clause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==321) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // Express.g:0:0: inverse_clause
                    {
                    pushFollow(FOLLOW_inverse_clause_in_entity_body2978);
                    inverse_clause164=inverse_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inverse_clause.add(inverse_clause164.getTree());

                    }
                    break;

            }

            // Express.g:559:52: ( unique_clause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==300) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // Express.g:0:0: unique_clause
                    {
                    pushFollow(FOLLOW_unique_clause_in_entity_body2981);
                    unique_clause165=unique_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unique_clause.add(unique_clause165.getTree());

                    }
                    break;

            }

            // Express.g:559:67: ( where_clause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==372) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // Express.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_entity_body2984);
                    where_clause166=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause166.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: derive_clause, where_clause, explicit_attr, inverse_clause, unique_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 560:3: -> ^( ENTITY_BODY ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )? )
            {
                // Express.g:560:6: ^( ENTITY_BODY ( explicit_attr )* ( derive_clause )? ( inverse_clause )? ( unique_clause )? ( where_clause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_BODY, "ENTITY_BODY"), root_1);

                // Express.g:560:20: ( explicit_attr )*
                while ( stream_explicit_attr.hasNext() ) {
                    adaptor.addChild(root_1, stream_explicit_attr.nextTree());

                }
                stream_explicit_attr.reset();
                // Express.g:560:35: ( derive_clause )?
                if ( stream_derive_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_derive_clause.nextTree());

                }
                stream_derive_clause.reset();
                // Express.g:560:50: ( inverse_clause )?
                if ( stream_inverse_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_inverse_clause.nextTree());

                }
                stream_inverse_clause.reset();
                // Express.g:560:66: ( unique_clause )?
                if ( stream_unique_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_unique_clause.nextTree());

                }
                stream_unique_clause.reset();
                // Express.g:560:81: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, entity_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entity_body"

    public static class subsuper_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subsuper"
    // Express.g:563:1: subsuper : ( supertype_constraint )? ( subtype_declaration )? -> ^( SUBSUPER ( supertype_constraint )? ( subtype_declaration )? ) ;
    public final subsuper_return subsuper() throws RecognitionException {
        subsuper_return retval = new subsuper_return();
        retval.start = input.LT(1);
        int subsuper_StartIndex = input.index();
        CommonTree root_0 = null;

        supertype_constraint_return supertype_constraint167 = null;

        subtype_declaration_return subtype_declaration168 = null;


        RewriteRuleSubtreeStream stream_supertype_constraint=new RewriteRuleSubtreeStream(adaptor,"rule supertype_constraint");
        RewriteRuleSubtreeStream stream_subtype_declaration=new RewriteRuleSubtreeStream(adaptor,"rule subtype_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // Express.g:564:3: ( ( supertype_constraint )? ( subtype_declaration )? -> ^( SUBSUPER ( supertype_constraint )? ( subtype_declaration )? ) )
            // Express.g:564:5: ( supertype_constraint )? ( subtype_declaration )?
            {
            // Express.g:564:5: ( supertype_constraint )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==312||LA43_0==314) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Express.g:0:0: supertype_constraint
                    {
                    pushFollow(FOLLOW_supertype_constraint_in_subsuper3021);
                    supertype_constraint167=supertype_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_supertype_constraint.add(supertype_constraint167.getTree());

                    }
                    break;

            }

            // Express.g:564:27: ( subtype_declaration )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==315) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // Express.g:0:0: subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_subsuper3024);
                    subtype_declaration168=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subtype_declaration.add(subtype_declaration168.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: subtype_declaration, supertype_constraint
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 565:3: -> ^( SUBSUPER ( supertype_constraint )? ( subtype_declaration )? )
            {
                // Express.g:565:6: ^( SUBSUPER ( supertype_constraint )? ( subtype_declaration )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSUPER, "SUBSUPER"), root_1);

                // Express.g:565:17: ( supertype_constraint )?
                if ( stream_supertype_constraint.hasNext() ) {
                    adaptor.addChild(root_1, stream_supertype_constraint.nextTree());

                }
                stream_supertype_constraint.reset();
                // Express.g:565:39: ( subtype_declaration )?
                if ( stream_subtype_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_subtype_declaration.nextTree());

                }
                stream_subtype_declaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, subsuper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subsuper"

    public static class supertype_constraint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supertype_constraint"
    // Express.g:568:1: supertype_constraint : ( abstract_supertype_declaration -> ^( SUPERTYPE_CONSTRAINT abstract_supertype_declaration ) | supertype_rule -> ^( SUPERTYPE_CONSTRAINT supertype_rule ) );
    public final supertype_constraint_return supertype_constraint() throws RecognitionException {
        supertype_constraint_return retval = new supertype_constraint_return();
        retval.start = input.LT(1);
        int supertype_constraint_StartIndex = input.index();
        CommonTree root_0 = null;

        abstract_supertype_declaration_return abstract_supertype_declaration169 = null;

        supertype_rule_return supertype_rule170 = null;


        RewriteRuleSubtreeStream stream_abstract_supertype_declaration=new RewriteRuleSubtreeStream(adaptor,"rule abstract_supertype_declaration");
        RewriteRuleSubtreeStream stream_supertype_rule=new RewriteRuleSubtreeStream(adaptor,"rule supertype_rule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // Express.g:569:3: ( abstract_supertype_declaration -> ^( SUPERTYPE_CONSTRAINT abstract_supertype_declaration ) | supertype_rule -> ^( SUPERTYPE_CONSTRAINT supertype_rule ) )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==312) ) {
                int LA45_1 = input.LA(2);

                if ( (LA45_1==314) ) {
                    int LA45_3 = input.LA(3);

                    if ( (synpred83_Express()) ) {
                        alt45=1;
                    }
                    else if ( (true) ) {
                        alt45=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 45, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==314) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // Express.g:569:6: abstract_supertype_declaration
                    {
                    pushFollow(FOLLOW_abstract_supertype_declaration_in_supertype_constraint3053);
                    abstract_supertype_declaration169=abstract_supertype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_abstract_supertype_declaration.add(abstract_supertype_declaration169.getTree());


                    // AST REWRITE
                    // elements: abstract_supertype_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 570:3: -> ^( SUPERTYPE_CONSTRAINT abstract_supertype_declaration )
                    {
                        // Express.g:570:6: ^( SUPERTYPE_CONSTRAINT abstract_supertype_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_CONSTRAINT, "SUPERTYPE_CONSTRAINT"), root_1);

                        adaptor.addChild(root_1, stream_abstract_supertype_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:571:6: supertype_rule
                    {
                    pushFollow(FOLLOW_supertype_rule_in_supertype_constraint3071);
                    supertype_rule170=supertype_rule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_supertype_rule.add(supertype_rule170.getTree());


                    // AST REWRITE
                    // elements: supertype_rule
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 572:3: -> ^( SUPERTYPE_CONSTRAINT supertype_rule )
                    {
                        // Express.g:572:6: ^( SUPERTYPE_CONSTRAINT supertype_rule )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_CONSTRAINT, "SUPERTYPE_CONSTRAINT"), root_1);

                        adaptor.addChild(root_1, stream_supertype_rule.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, supertype_constraint_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "supertype_constraint"

    public static class abstract_supertype_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_supertype_declaration"
    // Express.g:575:1: abstract_supertype_declaration : 'abstract' 'supertype' ( subtype_constraint )? -> ^( ABSTRACT_SUPERTYPE_DECLARATION ( subtype_constraint )? ) ;
    public final abstract_supertype_declaration_return abstract_supertype_declaration() throws RecognitionException {
        abstract_supertype_declaration_return retval = new abstract_supertype_declaration_return();
        retval.start = input.LT(1);
        int abstract_supertype_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal171=null;
        Token string_literal172=null;
        subtype_constraint_return subtype_constraint173 = null;


        CommonTree string_literal171_tree=null;
        CommonTree string_literal172_tree=null;
        RewriteRuleTokenStream stream_312=new RewriteRuleTokenStream(adaptor,"token 312");
        RewriteRuleTokenStream stream_314=new RewriteRuleTokenStream(adaptor,"token 314");
        RewriteRuleSubtreeStream stream_subtype_constraint=new RewriteRuleSubtreeStream(adaptor,"rule subtype_constraint");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // Express.g:576:3: ( 'abstract' 'supertype' ( subtype_constraint )? -> ^( ABSTRACT_SUPERTYPE_DECLARATION ( subtype_constraint )? ) )
            // Express.g:576:6: 'abstract' 'supertype' ( subtype_constraint )?
            {
            string_literal171=(Token)match(input,312,FOLLOW_312_in_abstract_supertype_declaration3096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_312.add(string_literal171);

            string_literal172=(Token)match(input,314,FOLLOW_314_in_abstract_supertype_declaration3098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_314.add(string_literal172);

            // Express.g:576:29: ( subtype_constraint )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==294) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // Express.g:576:31: subtype_constraint
                    {
                    pushFollow(FOLLOW_subtype_constraint_in_abstract_supertype_declaration3102);
                    subtype_constraint173=subtype_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subtype_constraint.add(subtype_constraint173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: subtype_constraint
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 577:3: -> ^( ABSTRACT_SUPERTYPE_DECLARATION ( subtype_constraint )? )
            {
                // Express.g:577:6: ^( ABSTRACT_SUPERTYPE_DECLARATION ( subtype_constraint )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ABSTRACT_SUPERTYPE_DECLARATION, "ABSTRACT_SUPERTYPE_DECLARATION"), root_1);

                // Express.g:577:39: ( subtype_constraint )?
                if ( stream_subtype_constraint.hasNext() ) {
                    adaptor.addChild(root_1, stream_subtype_constraint.nextTree());

                }
                stream_subtype_constraint.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, abstract_supertype_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abstract_supertype_declaration"

    public static class subtype_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_declaration"
    // Express.g:580:1: subtype_declaration : ({...}? => 'subtype' 'of' LPAREN id= IDENT ( COMMA id2= IDENT )* RPAREN ( SEMI )? | 'subtype' 'of' LPAREN entity_ref ( COMMA entity_ref )* RPAREN ( SEMI )? -> ^( SUBTYPE_DECLARATION ( entity_ref )+ ) );
    public final subtype_declaration_return subtype_declaration() throws RecognitionException {
        subtype_declaration_return retval = new subtype_declaration_return();
        retval.start = input.LT(1);
        int subtype_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token id2=null;
        Token string_literal174=null;
        Token string_literal175=null;
        Token LPAREN176=null;
        Token COMMA177=null;
        Token RPAREN178=null;
        Token SEMI179=null;
        Token string_literal180=null;
        Token string_literal181=null;
        Token LPAREN182=null;
        Token COMMA184=null;
        Token RPAREN186=null;
        Token SEMI187=null;
        entity_ref_return entity_ref183 = null;

        entity_ref_return entity_ref185 = null;


        CommonTree id_tree=null;
        CommonTree id2_tree=null;
        CommonTree string_literal174_tree=null;
        CommonTree string_literal175_tree=null;
        CommonTree LPAREN176_tree=null;
        CommonTree COMMA177_tree=null;
        CommonTree RPAREN178_tree=null;
        CommonTree SEMI179_tree=null;
        CommonTree string_literal180_tree=null;
        CommonTree string_literal181_tree=null;
        CommonTree LPAREN182_tree=null;
        CommonTree COMMA184_tree=null;
        CommonTree RPAREN186_tree=null;
        CommonTree SEMI187_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_315=new RewriteRuleTokenStream(adaptor,"token 315");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // Express.g:581:3: ({...}? => 'subtype' 'of' LPAREN id= IDENT ( COMMA id2= IDENT )* RPAREN ( SEMI )? | 'subtype' 'of' LPAREN entity_ref ( COMMA entity_ref )* RPAREN ( SEMI )? -> ^( SUBTYPE_DECLARATION ( entity_ref )+ ) )
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // Express.g:581:6: {...}? => 'subtype' 'of' LPAREN id= IDENT ( COMMA id2= IDENT )* RPAREN ( SEMI )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "subtype_declaration", " isFirst ");
                    }
                    string_literal174=(Token)match(input,315,FOLLOW_315_in_subtype_declaration3133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal174_tree = (CommonTree)adaptor.create(string_literal174);
                    adaptor.addChild(root_0, string_literal174_tree);
                    }
                    string_literal175=(Token)match(input,294,FOLLOW_294_in_subtype_declaration3135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal175_tree = (CommonTree)adaptor.create(string_literal175);
                    adaptor.addChild(root_0, string_literal175_tree);
                    }
                    LPAREN176=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subtype_declaration3137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN176_tree = (CommonTree)adaptor.create(LPAREN176);
                    adaptor.addChild(root_0, LPAREN176_tree);
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_subtype_declaration3141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addSuper((id!=null?id.getText():null)); 
                    }
                    // Express.g:581:76: ( COMMA id2= IDENT )*
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==COMMA) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // Express.g:581:78: COMMA id2= IDENT
                    	    {
                    	    COMMA177=(Token)match(input,COMMA,FOLLOW_COMMA_in_subtype_declaration3147); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA177_tree = (CommonTree)adaptor.create(COMMA177);
                    	    adaptor.addChild(root_0, COMMA177_tree);
                    	    }
                    	    id2=(Token)match(input,IDENT,FOLLOW_IDENT_in_subtype_declaration3151); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    id2_tree = (CommonTree)adaptor.create(id2);
                    	    adaptor.addChild(root_0, id2_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	       addSuper((id2!=null?id2.getText():null)); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);

                    RPAREN178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subtype_declaration3158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN178_tree = (CommonTree)adaptor.create(RPAREN178);
                    adaptor.addChild(root_0, RPAREN178_tree);
                    }
                    // Express.g:581:129: ( SEMI )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==SEMI) ) {
                        int LA48_1 = input.LA(2);

                        if ( (synpred86_Express()) ) {
                            alt48=1;
                        }
                    }
                    switch (alt48) {
                        case 1 :
                            // Express.g:0:0: SEMI
                            {
                            SEMI179=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_declaration3160); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMI179_tree = (CommonTree)adaptor.create(SEMI179);
                            adaptor.addChild(root_0, SEMI179_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Express.g:582:6: 'subtype' 'of' LPAREN entity_ref ( COMMA entity_ref )* RPAREN ( SEMI )?
                    {
                    string_literal180=(Token)match(input,315,FOLLOW_315_in_subtype_declaration3168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_315.add(string_literal180);

                    string_literal181=(Token)match(input,294,FOLLOW_294_in_subtype_declaration3170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_294.add(string_literal181);

                    LPAREN182=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subtype_declaration3172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN182);

                    pushFollow(FOLLOW_entity_ref_in_subtype_declaration3174);
                    entity_ref183=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref183.getTree());
                    // Express.g:582:39: ( COMMA entity_ref )*
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==COMMA) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // Express.g:582:41: COMMA entity_ref
                    	    {
                    	    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_subtype_declaration3178); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA184);

                    	    pushFollow(FOLLOW_entity_ref_in_subtype_declaration3180);
                    	    entity_ref185=entity_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref185.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subtype_declaration3185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);

                    // Express.g:582:68: ( SEMI )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==SEMI) ) {
                        int LA50_1 = input.LA(2);

                        if ( (synpred89_Express()) ) {
                            alt50=1;
                        }
                    }
                    switch (alt50) {
                        case 1 :
                            // Express.g:0:0: SEMI
                            {
                            SEMI187=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_declaration3187); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI187);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 583:3: -> ^( SUBTYPE_DECLARATION ( entity_ref )+ )
                    {
                        // Express.g:583:6: ^( SUBTYPE_DECLARATION ( entity_ref )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBTYPE_DECLARATION, "SUBTYPE_DECLARATION"), root_1);

                        if ( !(stream_entity_ref.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_entity_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        }
                        stream_entity_ref.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, subtype_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"

    public static class subtype_constraint_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_constraint_decl"
    // Express.g:587:1: subtype_constraint_decl : subtype_constraint_head subtype_constraint_body 'end_subtype_constraint' SEMI -> ^( SUBTYPE_CONSTRAINT_DECL subtype_constraint_head subtype_constraint_body ) ;
    public final subtype_constraint_decl_return subtype_constraint_decl() throws RecognitionException {
        subtype_constraint_decl_return retval = new subtype_constraint_decl_return();
        retval.start = input.LT(1);
        int subtype_constraint_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal190=null;
        Token SEMI191=null;
        subtype_constraint_head_return subtype_constraint_head188 = null;

        subtype_constraint_body_return subtype_constraint_body189 = null;


        CommonTree string_literal190_tree=null;
        CommonTree SEMI191_tree=null;
        RewriteRuleTokenStream stream_316=new RewriteRuleTokenStream(adaptor,"token 316");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_subtype_constraint_head=new RewriteRuleSubtreeStream(adaptor,"rule subtype_constraint_head");
        RewriteRuleSubtreeStream stream_subtype_constraint_body=new RewriteRuleSubtreeStream(adaptor,"rule subtype_constraint_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // Express.g:588:3: ( subtype_constraint_head subtype_constraint_body 'end_subtype_constraint' SEMI -> ^( SUBTYPE_CONSTRAINT_DECL subtype_constraint_head subtype_constraint_body ) )
            // Express.g:588:5: subtype_constraint_head subtype_constraint_body 'end_subtype_constraint' SEMI
            {
            pushFollow(FOLLOW_subtype_constraint_head_in_subtype_constraint_decl3214);
            subtype_constraint_head188=subtype_constraint_head();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subtype_constraint_head.add(subtype_constraint_head188.getTree());
            pushFollow(FOLLOW_subtype_constraint_body_in_subtype_constraint_decl3216);
            subtype_constraint_body189=subtype_constraint_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subtype_constraint_body.add(subtype_constraint_body189.getTree());
            string_literal190=(Token)match(input,316,FOLLOW_316_in_subtype_constraint_decl3218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_316.add(string_literal190);

            SEMI191=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_constraint_decl3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI191);



            // AST REWRITE
            // elements: subtype_constraint_head, subtype_constraint_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 589:3: -> ^( SUBTYPE_CONSTRAINT_DECL subtype_constraint_head subtype_constraint_body )
            {
                // Express.g:589:6: ^( SUBTYPE_CONSTRAINT_DECL subtype_constraint_head subtype_constraint_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBTYPE_CONSTRAINT_DECL, "SUBTYPE_CONSTRAINT_DECL"), root_1);

                adaptor.addChild(root_1, stream_subtype_constraint_head.nextTree());
                adaptor.addChild(root_1, stream_subtype_constraint_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, subtype_constraint_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_constraint_decl"

    public static class subtype_constraint_head_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_constraint_head"
    // Express.g:592:1: subtype_constraint_head : ({...}? => 'subtype_constraint' subtype_constraint_id 'for' IDENT SEMI | 'subtype_constraint' subtype_constraint_id 'for' entity_ref SEMI -> ^( SUBTYPE_CONSTRAINT_HEAD subtype_constraint_id entity_ref ) );
    public final subtype_constraint_head_return subtype_constraint_head() throws RecognitionException {
        subtype_constraint_head_return retval = new subtype_constraint_head_return();
        retval.start = input.LT(1);
        int subtype_constraint_head_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal192=null;
        Token string_literal194=null;
        Token IDENT195=null;
        Token SEMI196=null;
        Token string_literal197=null;
        Token string_literal199=null;
        Token SEMI201=null;
        subtype_constraint_id_return subtype_constraint_id193 = null;

        subtype_constraint_id_return subtype_constraint_id198 = null;

        entity_ref_return entity_ref200 = null;


        CommonTree string_literal192_tree=null;
        CommonTree string_literal194_tree=null;
        CommonTree IDENT195_tree=null;
        CommonTree SEMI196_tree=null;
        CommonTree string_literal197_tree=null;
        CommonTree string_literal199_tree=null;
        CommonTree SEMI201_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_317=new RewriteRuleTokenStream(adaptor,"token 317");
        RewriteRuleTokenStream stream_296=new RewriteRuleTokenStream(adaptor,"token 296");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        RewriteRuleSubtreeStream stream_subtype_constraint_id=new RewriteRuleSubtreeStream(adaptor,"rule subtype_constraint_id");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // Express.g:593:3: ({...}? => 'subtype_constraint' subtype_constraint_id 'for' IDENT SEMI | 'subtype_constraint' subtype_constraint_id 'for' entity_ref SEMI -> ^( SUBTYPE_CONSTRAINT_HEAD subtype_constraint_id entity_ref ) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==317) ) {
                int LA52_1 = input.LA(2);

                if ( (LA52_1==IDENT) ) {
                    int LA52_2 = input.LA(3);

                    if ( (LA52_2==296) ) {
                        int LA52_3 = input.LA(4);

                        if ( (LA52_3==IDENT) ) {
                            int LA52_4 = input.LA(5);

                            if ( (LA52_4==SEMI) ) {
                                int LA52_5 = input.LA(6);

                                if ( ((synpred90_Express()&&( isFirst ))) ) {
                                    alt52=1;
                                }
                                else if ( (true) ) {
                                    alt52=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 52, 5, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 52, 4, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 52, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 52, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // Express.g:593:5: {...}? => 'subtype_constraint' subtype_constraint_id 'for' IDENT SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "subtype_constraint_head", " isFirst ");
                    }
                    string_literal192=(Token)match(input,317,FOLLOW_317_in_subtype_constraint_head3248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal192_tree = (CommonTree)adaptor.create(string_literal192);
                    adaptor.addChild(root_0, string_literal192_tree);
                    }
                    pushFollow(FOLLOW_subtype_constraint_id_in_subtype_constraint_head3250);
                    subtype_constraint_id193=subtype_constraint_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_constraint_id193.getTree());
                    string_literal194=(Token)match(input,296,FOLLOW_296_in_subtype_constraint_head3252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal194_tree = (CommonTree)adaptor.create(string_literal194);
                    adaptor.addChild(root_0, string_literal194_tree);
                    }
                    IDENT195=(Token)match(input,IDENT,FOLLOW_IDENT_in_subtype_constraint_head3254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT195_tree = (CommonTree)adaptor.create(IDENT195);
                    adaptor.addChild(root_0, IDENT195_tree);
                    }
                    SEMI196=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_constraint_head3256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI196_tree = (CommonTree)adaptor.create(SEMI196);
                    adaptor.addChild(root_0, SEMI196_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:594:5: 'subtype_constraint' subtype_constraint_id 'for' entity_ref SEMI
                    {
                    string_literal197=(Token)match(input,317,FOLLOW_317_in_subtype_constraint_head3262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_317.add(string_literal197);

                    pushFollow(FOLLOW_subtype_constraint_id_in_subtype_constraint_head3264);
                    subtype_constraint_id198=subtype_constraint_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subtype_constraint_id.add(subtype_constraint_id198.getTree());
                    string_literal199=(Token)match(input,296,FOLLOW_296_in_subtype_constraint_head3266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_296.add(string_literal199);

                    pushFollow(FOLLOW_entity_ref_in_subtype_constraint_head3268);
                    entity_ref200=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref200.getTree());
                    SEMI201=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_constraint_head3270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI201);



                    // AST REWRITE
                    // elements: entity_ref, subtype_constraint_id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 595:3: -> ^( SUBTYPE_CONSTRAINT_HEAD subtype_constraint_id entity_ref )
                    {
                        // Express.g:595:6: ^( SUBTYPE_CONSTRAINT_HEAD subtype_constraint_id entity_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBTYPE_CONSTRAINT_HEAD, "SUBTYPE_CONSTRAINT_HEAD"), root_1);

                        adaptor.addChild(root_1, stream_subtype_constraint_id.nextTree());
                        adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, subtype_constraint_head_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_constraint_head"

    public static class subtype_constraint_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_constraint_body"
    // Express.g:598:1: subtype_constraint_body : ( abstract_supertype )? ( total_over )? ( supertype_expression SEMI )? -> ^( SUBTYPE_CONSTRAINT_BODY ( abstract_supertype )? ( total_over )? ( supertype_expression )? ) ;
    public final subtype_constraint_body_return subtype_constraint_body() throws RecognitionException {
        subtype_constraint_body_return retval = new subtype_constraint_body_return();
        retval.start = input.LT(1);
        int subtype_constraint_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI205=null;
        abstract_supertype_return abstract_supertype202 = null;

        total_over_return total_over203 = null;

        supertype_expression_return supertype_expression204 = null;


        CommonTree SEMI205_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_supertype_expression=new RewriteRuleSubtreeStream(adaptor,"rule supertype_expression");
        RewriteRuleSubtreeStream stream_total_over=new RewriteRuleSubtreeStream(adaptor,"rule total_over");
        RewriteRuleSubtreeStream stream_abstract_supertype=new RewriteRuleSubtreeStream(adaptor,"rule abstract_supertype");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // Express.g:599:3: ( ( abstract_supertype )? ( total_over )? ( supertype_expression SEMI )? -> ^( SUBTYPE_CONSTRAINT_BODY ( abstract_supertype )? ( total_over )? ( supertype_expression )? ) )
            // Express.g:599:5: ( abstract_supertype )? ( total_over )? ( supertype_expression SEMI )?
            {
            // Express.g:599:5: ( abstract_supertype )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==312) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // Express.g:0:0: abstract_supertype
                    {
                    pushFollow(FOLLOW_abstract_supertype_in_subtype_constraint_body3296);
                    abstract_supertype202=abstract_supertype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_abstract_supertype.add(abstract_supertype202.getTree());

                    }
                    break;

            }

            // Express.g:599:25: ( total_over )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==318) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Express.g:0:0: total_over
                    {
                    pushFollow(FOLLOW_total_over_in_subtype_constraint_body3299);
                    total_over203=total_over();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_total_over.add(total_over203.getTree());

                    }
                    break;

            }

            // Express.g:599:37: ( supertype_expression SEMI )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==LPAREN||LA55_0==IDENT||LA55_0==343) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // Express.g:599:39: supertype_expression SEMI
                    {
                    pushFollow(FOLLOW_supertype_expression_in_subtype_constraint_body3304);
                    supertype_expression204=supertype_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_supertype_expression.add(supertype_expression204.getTree());
                    SEMI205=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_constraint_body3306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI205);


                    }
                    break;

            }



            // AST REWRITE
            // elements: total_over, abstract_supertype, supertype_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 600:3: -> ^( SUBTYPE_CONSTRAINT_BODY ( abstract_supertype )? ( total_over )? ( supertype_expression )? )
            {
                // Express.g:600:6: ^( SUBTYPE_CONSTRAINT_BODY ( abstract_supertype )? ( total_over )? ( supertype_expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBTYPE_CONSTRAINT_BODY, "SUBTYPE_CONSTRAINT_BODY"), root_1);

                // Express.g:600:32: ( abstract_supertype )?
                if ( stream_abstract_supertype.hasNext() ) {
                    adaptor.addChild(root_1, stream_abstract_supertype.nextTree());

                }
                stream_abstract_supertype.reset();
                // Express.g:600:52: ( total_over )?
                if ( stream_total_over.hasNext() ) {
                    adaptor.addChild(root_1, stream_total_over.nextTree());

                }
                stream_total_over.reset();
                // Express.g:600:64: ( supertype_expression )?
                if ( stream_supertype_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_supertype_expression.nextTree());

                }
                stream_supertype_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, subtype_constraint_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_constraint_body"

    public static class subtype_constraint_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_constraint_id"
    // Express.g:603:1: subtype_constraint_id : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( SUBTYPE_CONSTRAINT_ID IDENT[$id] ) );
    public final subtype_constraint_id_return subtype_constraint_id() throws RecognitionException {
        subtype_constraint_id_return retval = new subtype_constraint_id_return();
        retval.start = input.LT(1);
        int subtype_constraint_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // Express.g:604:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( SUBTYPE_CONSTRAINT_ID IDENT[$id] ) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==IDENT) ) {
                int LA56_1 = input.LA(2);

                if ( ((synpred94_Express()&&( isFirst ))) ) {
                    alt56=1;
                }
                else if ( ((nextIs(SUBTYPE_CONSTRAINT_ID))) ) {
                    alt56=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // Express.g:604:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "subtype_constraint_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_subtype_constraint_id3344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addId((id!=null?id.getText():null),SUBTYPE_CONSTRAINT_ID); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:605:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(SUBTYPE_CONSTRAINT_ID))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "subtype_constraint_id", "nextIs(SUBTYPE_CONSTRAINT_ID)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_subtype_constraint_id3356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 606:3: -> ^( SUBTYPE_CONSTRAINT_ID IDENT[$id] )
                    {
                        // Express.g:606:6: ^( SUBTYPE_CONSTRAINT_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBTYPE_CONSTRAINT_ID, "SUBTYPE_CONSTRAINT_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, subtype_constraint_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_constraint_id"

    public static class abstract_supertype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_supertype"
    // Express.g:609:1: abstract_supertype : 'abstract' 'supertype' SEMI -> ^( ABSTRACT_SUPERTYPE ) ;
    public final abstract_supertype_return abstract_supertype() throws RecognitionException {
        abstract_supertype_return retval = new abstract_supertype_return();
        retval.start = input.LT(1);
        int abstract_supertype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal206=null;
        Token string_literal207=null;
        Token SEMI208=null;

        CommonTree string_literal206_tree=null;
        CommonTree string_literal207_tree=null;
        CommonTree SEMI208_tree=null;
        RewriteRuleTokenStream stream_312=new RewriteRuleTokenStream(adaptor,"token 312");
        RewriteRuleTokenStream stream_314=new RewriteRuleTokenStream(adaptor,"token 314");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // Express.g:610:3: ( 'abstract' 'supertype' SEMI -> ^( ABSTRACT_SUPERTYPE ) )
            // Express.g:610:5: 'abstract' 'supertype' SEMI
            {
            string_literal206=(Token)match(input,312,FOLLOW_312_in_abstract_supertype3382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_312.add(string_literal206);

            string_literal207=(Token)match(input,314,FOLLOW_314_in_abstract_supertype3384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_314.add(string_literal207);

            SEMI208=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstract_supertype3386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI208);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 611:3: -> ^( ABSTRACT_SUPERTYPE )
            {
                // Express.g:611:6: ^( ABSTRACT_SUPERTYPE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ABSTRACT_SUPERTYPE, "ABSTRACT_SUPERTYPE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, abstract_supertype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abstract_supertype"

    public static class total_over_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "total_over"
    // Express.g:614:1: total_over : ({...}? => 'total_over' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI | 'total_over' RPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI -> ^( TOTAL_OVER ( entity_ref )+ ) );
    public final total_over_return total_over() throws RecognitionException {
        total_over_return retval = new total_over_return();
        retval.start = input.LT(1);
        int total_over_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal209=null;
        Token LPAREN210=null;
        Token IDENT211=null;
        Token COMMA212=null;
        Token IDENT213=null;
        Token RPAREN214=null;
        Token SEMI215=null;
        Token string_literal216=null;
        Token RPAREN217=null;
        Token COMMA219=null;
        Token RPAREN221=null;
        Token SEMI222=null;
        entity_ref_return entity_ref218 = null;

        entity_ref_return entity_ref220 = null;


        CommonTree string_literal209_tree=null;
        CommonTree LPAREN210_tree=null;
        CommonTree IDENT211_tree=null;
        CommonTree COMMA212_tree=null;
        CommonTree IDENT213_tree=null;
        CommonTree RPAREN214_tree=null;
        CommonTree SEMI215_tree=null;
        CommonTree string_literal216_tree=null;
        CommonTree RPAREN217_tree=null;
        CommonTree COMMA219_tree=null;
        CommonTree RPAREN221_tree=null;
        CommonTree SEMI222_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_318=new RewriteRuleTokenStream(adaptor,"token 318");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // Express.g:615:3: ({...}? => 'total_over' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI | 'total_over' RPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI -> ^( TOTAL_OVER ( entity_ref )+ ) )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==318) ) {
                int LA59_1 = input.LA(2);

                if ( (LA59_1==LPAREN) && (( isFirst ))) {
                    alt59=1;
                }
                else if ( (LA59_1==RPAREN) ) {
                    alt59=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // Express.g:615:5: {...}? => 'total_over' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "total_over", " isFirst ");
                    }
                    string_literal209=(Token)match(input,318,FOLLOW_318_in_total_over3410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal209_tree = (CommonTree)adaptor.create(string_literal209);
                    adaptor.addChild(root_0, string_literal209_tree);
                    }
                    LPAREN210=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_total_over3412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN210_tree = (CommonTree)adaptor.create(LPAREN210);
                    adaptor.addChild(root_0, LPAREN210_tree);
                    }
                    IDENT211=(Token)match(input,IDENT,FOLLOW_IDENT_in_total_over3414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT211_tree = (CommonTree)adaptor.create(IDENT211);
                    adaptor.addChild(root_0, IDENT211_tree);
                    }
                    // Express.g:615:46: ( COMMA IDENT )*
                    loop57:
                    do {
                        int alt57=2;
                        int LA57_0 = input.LA(1);

                        if ( (LA57_0==COMMA) ) {
                            alt57=1;
                        }


                        switch (alt57) {
                    	case 1 :
                    	    // Express.g:615:48: COMMA IDENT
                    	    {
                    	    COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_total_over3418); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA212_tree = (CommonTree)adaptor.create(COMMA212);
                    	    adaptor.addChild(root_0, COMMA212_tree);
                    	    }
                    	    IDENT213=(Token)match(input,IDENT,FOLLOW_IDENT_in_total_over3420); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    IDENT213_tree = (CommonTree)adaptor.create(IDENT213);
                    	    adaptor.addChild(root_0, IDENT213_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);

                    RPAREN214=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_total_over3425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN214_tree = (CommonTree)adaptor.create(RPAREN214);
                    adaptor.addChild(root_0, RPAREN214_tree);
                    }
                    SEMI215=(Token)match(input,SEMI,FOLLOW_SEMI_in_total_over3427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI215_tree = (CommonTree)adaptor.create(SEMI215);
                    adaptor.addChild(root_0, SEMI215_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:616:5: 'total_over' RPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI
                    {
                    string_literal216=(Token)match(input,318,FOLLOW_318_in_total_over3433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_318.add(string_literal216);

                    RPAREN217=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_total_over3435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN217);

                    pushFollow(FOLLOW_entity_ref_in_total_over3437);
                    entity_ref218=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref218.getTree());
                    // Express.g:616:36: ( COMMA entity_ref )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==COMMA) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // Express.g:616:38: COMMA entity_ref
                    	    {
                    	    COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_total_over3441); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA219);

                    	    pushFollow(FOLLOW_entity_ref_in_total_over3443);
                    	    entity_ref220=entity_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref220.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_total_over3448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);

                    SEMI222=(Token)match(input,SEMI,FOLLOW_SEMI_in_total_over3450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI222);



                    // AST REWRITE
                    // elements: entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 617:3: -> ^( TOTAL_OVER ( entity_ref )+ )
                    {
                        // Express.g:617:6: ^( TOTAL_OVER ( entity_ref )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOTAL_OVER, "TOTAL_OVER"), root_1);

                        if ( !(stream_entity_ref.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_entity_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        }
                        stream_entity_ref.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, total_over_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "total_over"

    public static class explicit_attr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_attr"
    // Express.g:627:1: explicit_attr : attribute_decl ( COMMA attribute_decl )* COLON ( 'optional' )? base_type SEMI -> ^( EXPLICIT_ATTR ( attribute_decl )+ ( 'optional' )? base_type ) ;
    public final explicit_attr_return explicit_attr() throws RecognitionException {
        explicit_attr_return retval = new explicit_attr_return();
        retval.start = input.LT(1);
        int explicit_attr_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA224=null;
        Token COLON226=null;
        Token string_literal227=null;
        Token SEMI229=null;
        attribute_decl_return attribute_decl223 = null;

        attribute_decl_return attribute_decl225 = null;

        base_type_return base_type228 = null;


        CommonTree COMMA224_tree=null;
        CommonTree COLON226_tree=null;
        CommonTree string_literal227_tree=null;
        CommonTree SEMI229_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_299=new RewriteRuleTokenStream(adaptor,"token 299");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_attribute_decl=new RewriteRuleSubtreeStream(adaptor,"rule attribute_decl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // Express.g:628:3: ( attribute_decl ( COMMA attribute_decl )* COLON ( 'optional' )? base_type SEMI -> ^( EXPLICIT_ATTR ( attribute_decl )+ ( 'optional' )? base_type ) )
            // Express.g:628:6: attribute_decl ( COMMA attribute_decl )* COLON ( 'optional' )? base_type SEMI
            {
            pushFollow(FOLLOW_attribute_decl_in_explicit_attr3479);
            attribute_decl223=attribute_decl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_decl.add(attribute_decl223.getTree());
            // Express.g:628:21: ( COMMA attribute_decl )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // Express.g:628:22: COMMA attribute_decl
            	    {
            	    COMMA224=(Token)match(input,COMMA,FOLLOW_COMMA_in_explicit_attr3482); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA224);

            	    pushFollow(FOLLOW_attribute_decl_in_explicit_attr3484);
            	    attribute_decl225=attribute_decl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_attribute_decl.add(attribute_decl225.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            COLON226=(Token)match(input,COLON,FOLLOW_COLON_in_explicit_attr3488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON226);

            // Express.g:628:51: ( 'optional' )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==299) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Express.g:0:0: 'optional'
                    {
                    string_literal227=(Token)match(input,299,FOLLOW_299_in_explicit_attr3490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_299.add(string_literal227);


                    }
                    break;

            }

            pushFollow(FOLLOW_base_type_in_explicit_attr3493);
            base_type228=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type228.getTree());
            SEMI229=(Token)match(input,SEMI,FOLLOW_SEMI_in_explicit_attr3495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI229);



            // AST REWRITE
            // elements: base_type, attribute_decl, 299
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 629:3: -> ^( EXPLICIT_ATTR ( attribute_decl )+ ( 'optional' )? base_type )
            {
                // Express.g:629:6: ^( EXPLICIT_ATTR ( attribute_decl )+ ( 'optional' )? base_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPLICIT_ATTR, "EXPLICIT_ATTR"), root_1);

                if ( !(stream_attribute_decl.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_attribute_decl.hasNext() ) {
                    adaptor.addChild(root_1, stream_attribute_decl.nextTree());

                }
                stream_attribute_decl.reset();
                // Express.g:629:38: ( 'optional' )?
                if ( stream_299.hasNext() ) {
                    adaptor.addChild(root_1, stream_299.nextNode());

                }
                stream_299.reset();
                adaptor.addChild(root_1, stream_base_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, explicit_attr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicit_attr"

    public static class attribute_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_decl"
    // Express.g:633:1: attribute_decl : ( attribute_id -> ^( ATTRIBUTE_DECL attribute_id ) | redeclared_attribute -> ^( ATTRIBUTE_DECL redeclared_attribute ) );
    public final attribute_decl_return attribute_decl() throws RecognitionException {
        attribute_decl_return retval = new attribute_decl_return();
        retval.start = input.LT(1);
        int attribute_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        attribute_id_return attribute_id230 = null;

        redeclared_attribute_return redeclared_attribute231 = null;


        RewriteRuleSubtreeStream stream_redeclared_attribute=new RewriteRuleSubtreeStream(adaptor,"rule redeclared_attribute");
        RewriteRuleSubtreeStream stream_attribute_id=new RewriteRuleSubtreeStream(adaptor,"rule attribute_id");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // Express.g:634:3: ( attribute_id -> ^( ATTRIBUTE_DECL attribute_id ) | redeclared_attribute -> ^( ATTRIBUTE_DECL redeclared_attribute ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==IDENT) ) {
                alt62=1;
            }
            else if ( (LA62_0==CONST_SELF) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // Express.g:634:5: attribute_id
                    {
                    pushFollow(FOLLOW_attribute_id_in_attribute_decl3525);
                    attribute_id230=attribute_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_id.add(attribute_id230.getTree());


                    // AST REWRITE
                    // elements: attribute_id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 634:18: -> ^( ATTRIBUTE_DECL attribute_id )
                    {
                        // Express.g:634:21: ^( ATTRIBUTE_DECL attribute_id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_DECL, "ATTRIBUTE_DECL"), root_1);

                        adaptor.addChild(root_1, stream_attribute_id.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:635:5: redeclared_attribute
                    {
                    pushFollow(FOLLOW_redeclared_attribute_in_attribute_decl3539);
                    redeclared_attribute231=redeclared_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_redeclared_attribute.add(redeclared_attribute231.getTree());


                    // AST REWRITE
                    // elements: redeclared_attribute
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 635:26: -> ^( ATTRIBUTE_DECL redeclared_attribute )
                    {
                        // Express.g:635:29: ^( ATTRIBUTE_DECL redeclared_attribute )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_DECL, "ATTRIBUTE_DECL"), root_1);

                        adaptor.addChild(root_1, stream_redeclared_attribute.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, attribute_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_decl"

    public static class redeclared_attribute_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "redeclared_attribute"
    // Express.g:638:1: redeclared_attribute : qualified_attribute ( 'renamed' attribute_id )? -> ^( REDECLARED_ATTRIBUTE qualified_attribute ( attribute_id )? ) ;
    public final redeclared_attribute_return redeclared_attribute() throws RecognitionException {
        redeclared_attribute_return retval = new redeclared_attribute_return();
        retval.start = input.LT(1);
        int redeclared_attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal233=null;
        qualified_attribute_return qualified_attribute232 = null;

        attribute_id_return attribute_id234 = null;


        CommonTree string_literal233_tree=null;
        RewriteRuleTokenStream stream_319=new RewriteRuleTokenStream(adaptor,"token 319");
        RewriteRuleSubtreeStream stream_attribute_id=new RewriteRuleSubtreeStream(adaptor,"rule attribute_id");
        RewriteRuleSubtreeStream stream_qualified_attribute=new RewriteRuleSubtreeStream(adaptor,"rule qualified_attribute");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // Express.g:639:3: ( qualified_attribute ( 'renamed' attribute_id )? -> ^( REDECLARED_ATTRIBUTE qualified_attribute ( attribute_id )? ) )
            // Express.g:639:6: qualified_attribute ( 'renamed' attribute_id )?
            {
            pushFollow(FOLLOW_qualified_attribute_in_redeclared_attribute3562);
            qualified_attribute232=qualified_attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualified_attribute.add(qualified_attribute232.getTree());
            // Express.g:639:26: ( 'renamed' attribute_id )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==319) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // Express.g:639:28: 'renamed' attribute_id
                    {
                    string_literal233=(Token)match(input,319,FOLLOW_319_in_redeclared_attribute3566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_319.add(string_literal233);

                    pushFollow(FOLLOW_attribute_id_in_redeclared_attribute3568);
                    attribute_id234=attribute_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_id.add(attribute_id234.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualified_attribute, attribute_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:3: -> ^( REDECLARED_ATTRIBUTE qualified_attribute ( attribute_id )? )
            {
                // Express.g:640:6: ^( REDECLARED_ATTRIBUTE qualified_attribute ( attribute_id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REDECLARED_ATTRIBUTE, "REDECLARED_ATTRIBUTE"), root_1);

                adaptor.addChild(root_1, stream_qualified_attribute.nextTree());
                // Express.g:640:49: ( attribute_id )?
                if ( stream_attribute_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_attribute_id.nextTree());

                }
                stream_attribute_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, redeclared_attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "redeclared_attribute"

    public static class attribute_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_id"
    // Express.g:643:1: attribute_id : ({...}? =>id= IDENT | {...}? IDENT -> ^( ATTRIBUTE_ID IDENT ) | {...}? IDENT -> ^( ATTRIBUTE_ID IDENT ) | {...}? IDENT -> ^( ATTRIBUTE_ID IDENT ) );
    public final attribute_id_return attribute_id() throws RecognitionException {
        attribute_id_return retval = new attribute_id_return();
        retval.start = input.LT(1);
        int attribute_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token IDENT235=null;
        Token IDENT236=null;
        Token IDENT237=null;

        CommonTree id_tree=null;
        CommonTree IDENT235_tree=null;
        CommonTree IDENT236_tree=null;
        CommonTree IDENT237_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // Express.g:644:3: ({...}? =>id= IDENT | {...}? IDENT -> ^( ATTRIBUTE_ID IDENT ) | {...}? IDENT -> ^( ATTRIBUTE_ID IDENT ) | {...}? IDENT -> ^( ATTRIBUTE_ID IDENT ) )
            int alt64=4;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==IDENT) ) {
                int LA64_1 = input.LA(2);

                if ( ((synpred102_Express()&&( isFirst ))) ) {
                    alt64=1;
                }
                else if ( ((synpred103_Express()&&(nextIs(ATTRIBUTE_IDENT)))) ) {
                    alt64=2;
                }
                else if ( ((synpred104_Express()&&(nextIs(ENTITY_ATTR_IDENT)))) ) {
                    alt64=3;
                }
                else if ( ((nextIs(TYPE_ATTR_IDENT))) ) {
                    alt64=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // Express.g:644:6: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_id3603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addId((id!=null?id.getText():null),ATTRIBUTE_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:645:6: {...}? IDENT
                    {
                    if ( !((nextIs(ATTRIBUTE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_id", "nextIs(ATTRIBUTE_IDENT)");
                    }
                    IDENT235=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_id3614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT235);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 646:4: -> ^( ATTRIBUTE_ID IDENT )
                    {
                        // Express.g:646:7: ^( ATTRIBUTE_ID IDENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_ID, "ATTRIBUTE_ID"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:647:6: {...}? IDENT
                    {
                    if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_id", "nextIs(ENTITY_ATTR_IDENT)");
                    }
                    IDENT236=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_id3635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT236);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 648:4: -> ^( ATTRIBUTE_ID IDENT )
                    {
                        // Express.g:648:7: ^( ATTRIBUTE_ID IDENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_ID, "ATTRIBUTE_ID"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:649:6: {...}? IDENT
                    {
                    if ( !((nextIs(TYPE_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_id", "nextIs(TYPE_ATTR_IDENT)");
                    }
                    IDENT237=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_id3656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT237);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 650:4: -> ^( ATTRIBUTE_ID IDENT )
                    {
                        // Express.g:650:7: ^( ATTRIBUTE_ID IDENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_ID, "ATTRIBUTE_ID"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, attribute_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_id"

    public static class qualified_attribute_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_attribute"
    // Express.g:653:1: qualified_attribute : 'self' group_qualifier attribute_qualifier -> ^( QUALIFIED_ATTRIBUTE group_qualifier attribute_qualifier ) ;
    public final qualified_attribute_return qualified_attribute() throws RecognitionException {
        qualified_attribute_return retval = new qualified_attribute_return();
        retval.start = input.LT(1);
        int qualified_attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal238=null;
        group_qualifier_return group_qualifier239 = null;

        attribute_qualifier_return attribute_qualifier240 = null;


        CommonTree string_literal238_tree=null;
        RewriteRuleTokenStream stream_CONST_SELF=new RewriteRuleTokenStream(adaptor,"token CONST_SELF");
        RewriteRuleSubtreeStream stream_attribute_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule attribute_qualifier");
        RewriteRuleSubtreeStream stream_group_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule group_qualifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // Express.g:654:3: ( 'self' group_qualifier attribute_qualifier -> ^( QUALIFIED_ATTRIBUTE group_qualifier attribute_qualifier ) )
            // Express.g:654:6: 'self' group_qualifier attribute_qualifier
            {
            string_literal238=(Token)match(input,CONST_SELF,FOLLOW_CONST_SELF_in_qualified_attribute3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONST_SELF.add(string_literal238);

            pushFollow(FOLLOW_group_qualifier_in_qualified_attribute3684);
            group_qualifier239=group_qualifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_qualifier.add(group_qualifier239.getTree());
            pushFollow(FOLLOW_attribute_qualifier_in_qualified_attribute3686);
            attribute_qualifier240=attribute_qualifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_qualifier.add(attribute_qualifier240.getTree());


            // AST REWRITE
            // elements: group_qualifier, attribute_qualifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 655:3: -> ^( QUALIFIED_ATTRIBUTE group_qualifier attribute_qualifier )
            {
                // Express.g:655:6: ^( QUALIFIED_ATTRIBUTE group_qualifier attribute_qualifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_ATTRIBUTE, "QUALIFIED_ATTRIBUTE"), root_1);

                adaptor.addChild(root_1, stream_group_qualifier.nextTree());
                adaptor.addChild(root_1, stream_attribute_qualifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, qualified_attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualified_attribute"

    public static class derive_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "derive_clause"
    // Express.g:658:1: derive_clause : 'derive' ( derived_attr )+ -> ^( DERIVE_CLAUSE ( derived_attr )+ ) ;
    public final derive_clause_return derive_clause() throws RecognitionException {
        derive_clause_return retval = new derive_clause_return();
        retval.start = input.LT(1);
        int derive_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal241=null;
        derived_attr_return derived_attr242 = null;


        CommonTree string_literal241_tree=null;
        RewriteRuleTokenStream stream_320=new RewriteRuleTokenStream(adaptor,"token 320");
        RewriteRuleSubtreeStream stream_derived_attr=new RewriteRuleSubtreeStream(adaptor,"rule derived_attr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // Express.g:659:3: ( 'derive' ( derived_attr )+ -> ^( DERIVE_CLAUSE ( derived_attr )+ ) )
            // Express.g:659:6: 'derive' ( derived_attr )+
            {
            string_literal241=(Token)match(input,320,FOLLOW_320_in_derive_clause3712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_320.add(string_literal241);

            // Express.g:659:15: ( derived_attr )+
            int cnt65=0;
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==CONST_SELF||LA65_0==IDENT) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // Express.g:0:0: derived_attr
            	    {
            	    pushFollow(FOLLOW_derived_attr_in_derive_clause3714);
            	    derived_attr242=derived_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_derived_attr.add(derived_attr242.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        throw eee;
                }
                cnt65++;
            } while (true);



            // AST REWRITE
            // elements: derived_attr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 660:3: -> ^( DERIVE_CLAUSE ( derived_attr )+ )
            {
                // Express.g:660:6: ^( DERIVE_CLAUSE ( derived_attr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DERIVE_CLAUSE, "DERIVE_CLAUSE"), root_1);

                if ( !(stream_derived_attr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_derived_attr.hasNext() ) {
                    adaptor.addChild(root_1, stream_derived_attr.nextTree());

                }
                stream_derived_attr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, derive_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "derive_clause"

    public static class derived_attr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "derived_attr"
    // Express.g:663:1: derived_attr : attribute_decl COLON base_type COLEQ expression SEMI -> ^( DERIVED_ATTR attribute_decl base_type expression ) ;
    public final derived_attr_return derived_attr() throws RecognitionException {
        derived_attr_return retval = new derived_attr_return();
        retval.start = input.LT(1);
        int derived_attr_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLON244=null;
        Token COLEQ246=null;
        Token SEMI248=null;
        attribute_decl_return attribute_decl243 = null;

        base_type_return base_type245 = null;

        expression_return expression247 = null;


        CommonTree COLON244_tree=null;
        CommonTree COLEQ246_tree=null;
        CommonTree SEMI248_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLEQ=new RewriteRuleTokenStream(adaptor,"token COLEQ");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_attribute_decl=new RewriteRuleSubtreeStream(adaptor,"rule attribute_decl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // Express.g:664:3: ( attribute_decl COLON base_type COLEQ expression SEMI -> ^( DERIVED_ATTR attribute_decl base_type expression ) )
            // Express.g:664:6: attribute_decl COLON base_type COLEQ expression SEMI
            {
            pushFollow(FOLLOW_attribute_decl_in_derived_attr3740);
            attribute_decl243=attribute_decl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_decl.add(attribute_decl243.getTree());
            COLON244=(Token)match(input,COLON,FOLLOW_COLON_in_derived_attr3742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON244);

            pushFollow(FOLLOW_base_type_in_derived_attr3744);
            base_type245=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type245.getTree());
            COLEQ246=(Token)match(input,COLEQ,FOLLOW_COLEQ_in_derived_attr3746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLEQ.add(COLEQ246);

            pushFollow(FOLLOW_expression_in_derived_attr3748);
            expression247=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression247.getTree());
            SEMI248=(Token)match(input,SEMI,FOLLOW_SEMI_in_derived_attr3750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI248);



            // AST REWRITE
            // elements: attribute_decl, base_type, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 665:3: -> ^( DERIVED_ATTR attribute_decl base_type expression )
            {
                // Express.g:665:6: ^( DERIVED_ATTR attribute_decl base_type expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DERIVED_ATTR, "DERIVED_ATTR"), root_1);

                adaptor.addChild(root_1, stream_attribute_decl.nextTree());
                adaptor.addChild(root_1, stream_base_type.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, derived_attr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "derived_attr"

    public static class inverse_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inverse_clause"
    // Express.g:668:1: inverse_clause : 'inverse' ( inverse_attr )+ -> ^( INVERSE_CLAUSE ( inverse_attr )+ ) ;
    public final inverse_clause_return inverse_clause() throws RecognitionException {
        inverse_clause_return retval = new inverse_clause_return();
        retval.start = input.LT(1);
        int inverse_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal249=null;
        inverse_attr_return inverse_attr250 = null;


        CommonTree string_literal249_tree=null;
        RewriteRuleTokenStream stream_321=new RewriteRuleTokenStream(adaptor,"token 321");
        RewriteRuleSubtreeStream stream_inverse_attr=new RewriteRuleSubtreeStream(adaptor,"rule inverse_attr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // Express.g:669:3: ( 'inverse' ( inverse_attr )+ -> ^( INVERSE_CLAUSE ( inverse_attr )+ ) )
            // Express.g:669:6: 'inverse' ( inverse_attr )+
            {
            string_literal249=(Token)match(input,321,FOLLOW_321_in_inverse_clause3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_321.add(string_literal249);

            // Express.g:669:16: ( inverse_attr )+
            int cnt66=0;
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==CONST_SELF||LA66_0==IDENT) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // Express.g:0:0: inverse_attr
            	    {
            	    pushFollow(FOLLOW_inverse_attr_in_inverse_clause3780);
            	    inverse_attr250=inverse_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inverse_attr.add(inverse_attr250.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt66 >= 1 ) break loop66;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(66, input);
                        throw eee;
                }
                cnt66++;
            } while (true);



            // AST REWRITE
            // elements: inverse_attr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 670:3: -> ^( INVERSE_CLAUSE ( inverse_attr )+ )
            {
                // Express.g:670:6: ^( INVERSE_CLAUSE ( inverse_attr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INVERSE_CLAUSE, "INVERSE_CLAUSE"), root_1);

                if ( !(stream_inverse_attr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inverse_attr.hasNext() ) {
                    adaptor.addChild(root_1, stream_inverse_attr.nextTree());

                }
                stream_inverse_attr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, inverse_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inverse_clause"

    public static class inverse_attr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inverse_attr"
    // Express.g:673:1: inverse_attr : ({...}? => attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? IDENT 'for' IDENT SEMI | attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? entity_ref 'for' global_ident SEMI -> ^( INVERSE_ATTR attribute_decl ( 'set' )? ( 'bag' )? ( bound_spec )? entity_ref global_ident ) );
    public final inverse_attr_return inverse_attr() throws RecognitionException {
        inverse_attr_return retval = new inverse_attr_return();
        retval.start = input.LT(1);
        int inverse_attr_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLON252=null;
        Token set253=null;
        Token string_literal255=null;
        Token IDENT256=null;
        Token string_literal257=null;
        Token IDENT258=null;
        Token SEMI259=null;
        Token COLON261=null;
        Token string_literal262=null;
        Token string_literal263=null;
        Token string_literal265=null;
        Token string_literal267=null;
        Token SEMI269=null;
        attribute_decl_return attribute_decl251 = null;

        bound_spec_return bound_spec254 = null;

        attribute_decl_return attribute_decl260 = null;

        bound_spec_return bound_spec264 = null;

        entity_ref_return entity_ref266 = null;

        global_ident_return global_ident268 = null;


        CommonTree COLON252_tree=null;
        CommonTree set253_tree=null;
        CommonTree string_literal255_tree=null;
        CommonTree IDENT256_tree=null;
        CommonTree string_literal257_tree=null;
        CommonTree IDENT258_tree=null;
        CommonTree SEMI259_tree=null;
        CommonTree COLON261_tree=null;
        CommonTree string_literal262_tree=null;
        CommonTree string_literal263_tree=null;
        CommonTree string_literal265_tree=null;
        CommonTree string_literal267_tree=null;
        CommonTree SEMI269_tree=null;
        RewriteRuleTokenStream stream_322=new RewriteRuleTokenStream(adaptor,"token 322");
        RewriteRuleTokenStream stream_301=new RewriteRuleTokenStream(adaptor,"token 301");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleTokenStream stream_296=new RewriteRuleTokenStream(adaptor,"token 296");
        RewriteRuleSubtreeStream stream_global_ident=new RewriteRuleSubtreeStream(adaptor,"rule global_ident");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        RewriteRuleSubtreeStream stream_attribute_decl=new RewriteRuleSubtreeStream(adaptor,"rule attribute_decl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // Express.g:674:3: ({...}? => attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? IDENT 'for' IDENT SEMI | attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? entity_ref 'for' global_ident SEMI -> ^( INVERSE_ATTR attribute_decl ( 'set' )? ( 'bag' )? ( bound_spec )? entity_ref global_ident ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==IDENT) ) {
                int LA72_1 = input.LA(2);

                if ( ((((synpred110_Express()&&( isFirst ))&&( isFirst ))||((synpred110_Express()&&( isFirst ))&&(nextIs(ATTRIBUTE_IDENT)))||((synpred110_Express()&&( isFirst ))&&(nextIs(ENTITY_ATTR_IDENT)))||((synpred110_Express()&&( isFirst ))&&(nextIs(TYPE_ATTR_IDENT))))) ) {
                    alt72=1;
                }
                else if ( (((nextIs(ATTRIBUTE_IDENT))||(nextIs(TYPE_ATTR_IDENT))||( isFirst )||(nextIs(ENTITY_ATTR_IDENT)))) ) {
                    alt72=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA72_0==CONST_SELF) ) {
                int LA72_2 = input.LA(2);

                if ( ((synpred110_Express()&&( isFirst ))) ) {
                    alt72=1;
                }
                else if ( (true) ) {
                    alt72=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // Express.g:674:6: {...}? => attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? IDENT 'for' IDENT SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "inverse_attr", " isFirst ");
                    }
                    pushFollow(FOLLOW_attribute_decl_in_inverse_attr3809);
                    attribute_decl251=attribute_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_decl251.getTree());
                    COLON252=(Token)match(input,COLON,FOLLOW_COLON_in_inverse_attr3811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON252_tree = (CommonTree)adaptor.create(COLON252);
                    adaptor.addChild(root_0, COLON252_tree);
                    }
                    // Express.g:674:42: ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==301||LA68_0==322) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // Express.g:674:44: ( 'set' | 'bag' ) ( bound_spec )? 'of'
                            {
                            set253=(Token)input.LT(1);
                            if ( input.LA(1)==301||input.LA(1)==322 ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set253));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }

                            // Express.g:674:62: ( bound_spec )?
                            int alt67=2;
                            int LA67_0 = input.LA(1);

                            if ( (LA67_0==LBRACK) ) {
                                alt67=1;
                            }
                            switch (alt67) {
                                case 1 :
                                    // Express.g:0:0: bound_spec
                                    {
                                    pushFollow(FOLLOW_bound_spec_in_inverse_attr3825);
                                    bound_spec254=bound_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bound_spec254.getTree());

                                    }
                                    break;

                            }

                            string_literal255=(Token)match(input,294,FOLLOW_294_in_inverse_attr3828); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal255_tree = (CommonTree)adaptor.create(string_literal255);
                            adaptor.addChild(root_0, string_literal255_tree);
                            }

                            }
                            break;

                    }

                    IDENT256=(Token)match(input,IDENT,FOLLOW_IDENT_in_inverse_attr3833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT256_tree = (CommonTree)adaptor.create(IDENT256);
                    adaptor.addChild(root_0, IDENT256_tree);
                    }
                    string_literal257=(Token)match(input,296,FOLLOW_296_in_inverse_attr3835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal257_tree = (CommonTree)adaptor.create(string_literal257);
                    adaptor.addChild(root_0, string_literal257_tree);
                    }
                    IDENT258=(Token)match(input,IDENT,FOLLOW_IDENT_in_inverse_attr3837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT258_tree = (CommonTree)adaptor.create(IDENT258);
                    adaptor.addChild(root_0, IDENT258_tree);
                    }
                    SEMI259=(Token)match(input,SEMI,FOLLOW_SEMI_in_inverse_attr3839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI259_tree = (CommonTree)adaptor.create(SEMI259);
                    adaptor.addChild(root_0, SEMI259_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:675:6: attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? entity_ref 'for' global_ident SEMI
                    {
                    pushFollow(FOLLOW_attribute_decl_in_inverse_attr3846);
                    attribute_decl260=attribute_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_decl.add(attribute_decl260.getTree());
                    COLON261=(Token)match(input,COLON,FOLLOW_COLON_in_inverse_attr3848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON261);

                    // Express.g:675:27: ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==301||LA71_0==322) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // Express.g:675:29: ( 'set' | 'bag' ) ( bound_spec )? 'of'
                            {
                            // Express.g:675:29: ( 'set' | 'bag' )
                            int alt69=2;
                            int LA69_0 = input.LA(1);

                            if ( (LA69_0==322) ) {
                                alt69=1;
                            }
                            else if ( (LA69_0==301) ) {
                                alt69=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 69, 0, input);

                                throw nvae;
                            }
                            switch (alt69) {
                                case 1 :
                                    // Express.g:675:31: 'set'
                                    {
                                    string_literal262=(Token)match(input,322,FOLLOW_322_in_inverse_attr3854); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_322.add(string_literal262);


                                    }
                                    break;
                                case 2 :
                                    // Express.g:675:39: 'bag'
                                    {
                                    string_literal263=(Token)match(input,301,FOLLOW_301_in_inverse_attr3858); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_301.add(string_literal263);


                                    }
                                    break;

                            }

                            // Express.g:675:47: ( bound_spec )?
                            int alt70=2;
                            int LA70_0 = input.LA(1);

                            if ( (LA70_0==LBRACK) ) {
                                alt70=1;
                            }
                            switch (alt70) {
                                case 1 :
                                    // Express.g:0:0: bound_spec
                                    {
                                    pushFollow(FOLLOW_bound_spec_in_inverse_attr3862);
                                    bound_spec264=bound_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec264.getTree());

                                    }
                                    break;

                            }

                            string_literal265=(Token)match(input,294,FOLLOW_294_in_inverse_attr3865); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_294.add(string_literal265);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_entity_ref_in_inverse_attr3870);
                    entity_ref266=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref266.getTree());
                    string_literal267=(Token)match(input,296,FOLLOW_296_in_inverse_attr3872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_296.add(string_literal267);

                    pushFollow(FOLLOW_global_ident_in_inverse_attr3874);
                    global_ident268=global_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_global_ident.add(global_ident268.getTree());
                    SEMI269=(Token)match(input,SEMI,FOLLOW_SEMI_in_inverse_attr3878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI269);



                    // AST REWRITE
                    // elements: 301, 322, bound_spec, attribute_decl, global_ident, entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 676:3: -> ^( INVERSE_ATTR attribute_decl ( 'set' )? ( 'bag' )? ( bound_spec )? entity_ref global_ident )
                    {
                        // Express.g:676:6: ^( INVERSE_ATTR attribute_decl ( 'set' )? ( 'bag' )? ( bound_spec )? entity_ref global_ident )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INVERSE_ATTR, "INVERSE_ATTR"), root_1);

                        adaptor.addChild(root_1, stream_attribute_decl.nextTree());
                        // Express.g:676:36: ( 'set' )?
                        if ( stream_322.hasNext() ) {
                            adaptor.addChild(root_1, stream_322.nextNode());

                        }
                        stream_322.reset();
                        // Express.g:676:43: ( 'bag' )?
                        if ( stream_301.hasNext() ) {
                            adaptor.addChild(root_1, stream_301.nextNode());

                        }
                        stream_301.reset();
                        // Express.g:676:50: ( bound_spec )?
                        if ( stream_bound_spec.hasNext() ) {
                            adaptor.addChild(root_1, stream_bound_spec.nextTree());

                        }
                        stream_bound_spec.reset();
                        adaptor.addChild(root_1, stream_entity_ref.nextTree());
                        adaptor.addChild(root_1, stream_global_ident.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, inverse_attr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inverse_attr"

    public static class unique_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unique_clause"
    // Express.g:679:1: unique_clause : 'unique' ( unique_rule SEMI )+ -> ^( UNIQUE_CLAUSE ( unique_rule )+ ) ;
    public final unique_clause_return unique_clause() throws RecognitionException {
        unique_clause_return retval = new unique_clause_return();
        retval.start = input.LT(1);
        int unique_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal270=null;
        Token SEMI272=null;
        unique_rule_return unique_rule271 = null;


        CommonTree string_literal270_tree=null;
        CommonTree SEMI272_tree=null;
        RewriteRuleTokenStream stream_300=new RewriteRuleTokenStream(adaptor,"token 300");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_unique_rule=new RewriteRuleSubtreeStream(adaptor,"rule unique_rule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // Express.g:680:3: ( 'unique' ( unique_rule SEMI )+ -> ^( UNIQUE_CLAUSE ( unique_rule )+ ) )
            // Express.g:680:6: 'unique' ( unique_rule SEMI )+
            {
            string_literal270=(Token)match(input,300,FOLLOW_300_in_unique_clause3915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_300.add(string_literal270);

            // Express.g:680:15: ( unique_rule SEMI )+
            int cnt73=0;
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==CONST_SELF||LA73_0==IDENT) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Express.g:680:17: unique_rule SEMI
            	    {
            	    pushFollow(FOLLOW_unique_rule_in_unique_clause3919);
            	    unique_rule271=unique_rule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unique_rule.add(unique_rule271.getTree());
            	    SEMI272=(Token)match(input,SEMI,FOLLOW_SEMI_in_unique_clause3921); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMI.add(SEMI272);


            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);



            // AST REWRITE
            // elements: unique_rule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 681:3: -> ^( UNIQUE_CLAUSE ( unique_rule )+ )
            {
                // Express.g:681:6: ^( UNIQUE_CLAUSE ( unique_rule )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNIQUE_CLAUSE, "UNIQUE_CLAUSE"), root_1);

                if ( !(stream_unique_rule.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unique_rule.hasNext() ) {
                    adaptor.addChild(root_1, stream_unique_rule.nextTree());

                }
                stream_unique_rule.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unique_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unique_clause"

    public static class unique_rule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unique_rule"
    // Express.g:684:1: unique_rule : ({...}? => ( IDENT ( COLON referenced_attribute )? | qualified_attribute ) ( COMMA referenced_attribute )* | ( label COLON )? referenced_attribute ( COMMA referenced_attribute )* -> ^( UNIQUE_RULE ( label )? ( referenced_attribute )+ ) );
    public final unique_rule_return unique_rule() throws RecognitionException {
        unique_rule_return retval = new unique_rule_return();
        retval.start = input.LT(1);
        int unique_rule_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT273=null;
        Token COLON274=null;
        Token COMMA277=null;
        Token COLON280=null;
        Token COMMA282=null;
        referenced_attribute_return referenced_attribute275 = null;

        qualified_attribute_return qualified_attribute276 = null;

        referenced_attribute_return referenced_attribute278 = null;

        label_return label279 = null;

        referenced_attribute_return referenced_attribute281 = null;

        referenced_attribute_return referenced_attribute283 = null;


        CommonTree IDENT273_tree=null;
        CommonTree COLON274_tree=null;
        CommonTree COMMA277_tree=null;
        CommonTree COLON280_tree=null;
        CommonTree COMMA282_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_referenced_attribute=new RewriteRuleSubtreeStream(adaptor,"rule referenced_attribute");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // Express.g:685:3: ({...}? => ( IDENT ( COLON referenced_attribute )? | qualified_attribute ) ( COMMA referenced_attribute )* | ( label COLON )? referenced_attribute ( COMMA referenced_attribute )* -> ^( UNIQUE_RULE ( label )? ( referenced_attribute )+ ) )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==IDENT) ) {
                int LA79_1 = input.LA(2);

                if ( ((synpred118_Express()&&( isFirst ))) ) {
                    alt79=1;
                }
                else if ( (true) ) {
                    alt79=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA79_0==CONST_SELF) ) {
                int LA79_2 = input.LA(2);

                if ( (LA79_2==BACKSLASH) ) {
                    int LA79_5 = input.LA(3);

                    if ( (LA79_5==IDENT) ) {
                        int LA79_6 = input.LA(4);

                        if ( (LA79_6==DOT) ) {
                            int LA79_7 = input.LA(5);

                            if ( (LA79_7==IDENT) ) {
                                int LA79_8 = input.LA(6);

                                if ( ((synpred118_Express()&&( isFirst ))) ) {
                                    alt79=1;
                                }
                                else if ( (true) ) {
                                    alt79=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 79, 8, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 7, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 79, 6, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 5, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // Express.g:685:5: {...}? => ( IDENT ( COLON referenced_attribute )? | qualified_attribute ) ( COMMA referenced_attribute )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "unique_rule", " isFirst ");
                    }
                    // Express.g:685:20: ( IDENT ( COLON referenced_attribute )? | qualified_attribute )
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==IDENT) ) {
                        alt75=1;
                    }
                    else if ( (LA75_0==CONST_SELF) ) {
                        alt75=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 0, input);

                        throw nvae;
                    }
                    switch (alt75) {
                        case 1 :
                            // Express.g:685:22: IDENT ( COLON referenced_attribute )?
                            {
                            IDENT273=(Token)match(input,IDENT,FOLLOW_IDENT_in_unique_rule3953); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IDENT273_tree = (CommonTree)adaptor.create(IDENT273);
                            adaptor.addChild(root_0, IDENT273_tree);
                            }
                            // Express.g:685:28: ( COLON referenced_attribute )?
                            int alt74=2;
                            int LA74_0 = input.LA(1);

                            if ( (LA74_0==COLON) ) {
                                alt74=1;
                            }
                            switch (alt74) {
                                case 1 :
                                    // Express.g:685:30: COLON referenced_attribute
                                    {
                                    COLON274=(Token)match(input,COLON,FOLLOW_COLON_in_unique_rule3957); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COLON274_tree = (CommonTree)adaptor.create(COLON274);
                                    adaptor.addChild(root_0, COLON274_tree);
                                    }
                                    pushFollow(FOLLOW_referenced_attribute_in_unique_rule3959);
                                    referenced_attribute275=referenced_attribute();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenced_attribute275.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // Express.g:685:62: qualified_attribute
                            {
                            pushFollow(FOLLOW_qualified_attribute_in_unique_rule3966);
                            qualified_attribute276=qualified_attribute();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_attribute276.getTree());

                            }
                            break;

                    }

                    // Express.g:685:84: ( COMMA referenced_attribute )*
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( (LA76_0==COMMA) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // Express.g:685:86: COMMA referenced_attribute
                    	    {
                    	    COMMA277=(Token)match(input,COMMA,FOLLOW_COMMA_in_unique_rule3972); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA277_tree = (CommonTree)adaptor.create(COMMA277);
                    	    adaptor.addChild(root_0, COMMA277_tree);
                    	    }
                    	    pushFollow(FOLLOW_referenced_attribute_in_unique_rule3974);
                    	    referenced_attribute278=referenced_attribute();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenced_attribute278.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop76;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // Express.g:686:6: ( label COLON )? referenced_attribute ( COMMA referenced_attribute )*
                    {
                    // Express.g:686:6: ( label COLON )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==IDENT) ) {
                        int LA77_1 = input.LA(2);

                        if ( (LA77_1==COLON) ) {
                            alt77=1;
                        }
                    }
                    switch (alt77) {
                        case 1 :
                            // Express.g:686:8: label COLON
                            {
                            pushFollow(FOLLOW_label_in_unique_rule3986);
                            label279=label();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_label.add(label279.getTree());
                            COLON280=(Token)match(input,COLON,FOLLOW_COLON_in_unique_rule3988); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON280);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_referenced_attribute_in_unique_rule3993);
                    referenced_attribute281=referenced_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_referenced_attribute.add(referenced_attribute281.getTree());
                    // Express.g:686:44: ( COMMA referenced_attribute )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==COMMA) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                    	case 1 :
                    	    // Express.g:686:46: COMMA referenced_attribute
                    	    {
                    	    COMMA282=(Token)match(input,COMMA,FOLLOW_COMMA_in_unique_rule3997); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA282);

                    	    pushFollow(FOLLOW_referenced_attribute_in_unique_rule3999);
                    	    referenced_attribute283=referenced_attribute();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_referenced_attribute.add(referenced_attribute283.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: referenced_attribute, label
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 687:3: -> ^( UNIQUE_RULE ( label )? ( referenced_attribute )+ )
                    {
                        // Express.g:687:6: ^( UNIQUE_RULE ( label )? ( referenced_attribute )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNIQUE_RULE, "UNIQUE_RULE"), root_1);

                        // Express.g:687:20: ( label )?
                        if ( stream_label.hasNext() ) {
                            adaptor.addChild(root_1, stream_label.nextTree());

                        }
                        stream_label.reset();
                        if ( !(stream_referenced_attribute.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_referenced_attribute.hasNext() ) {
                            adaptor.addChild(root_1, stream_referenced_attribute.nextTree());

                        }
                        stream_referenced_attribute.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, unique_rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unique_rule"

    public static class referenced_attribute_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenced_attribute"
    // Express.g:690:1: referenced_attribute : ({...}? => IDENT | attribute_ref -> ^( REFERENCED_ATTRIBUTE attribute_ref ) | qualified_attribute -> ^( REFERENCED_ATTRIBUTE qualified_attribute ) );
    public final referenced_attribute_return referenced_attribute() throws RecognitionException {
        referenced_attribute_return retval = new referenced_attribute_return();
        retval.start = input.LT(1);
        int referenced_attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT284=null;
        attribute_ref_return attribute_ref285 = null;

        qualified_attribute_return qualified_attribute286 = null;


        CommonTree IDENT284_tree=null;
        RewriteRuleSubtreeStream stream_attribute_ref=new RewriteRuleSubtreeStream(adaptor,"rule attribute_ref");
        RewriteRuleSubtreeStream stream_qualified_attribute=new RewriteRuleSubtreeStream(adaptor,"rule qualified_attribute");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // Express.g:691:3: ({...}? => IDENT | attribute_ref -> ^( REFERENCED_ATTRIBUTE attribute_ref ) | qualified_attribute -> ^( REFERENCED_ATTRIBUTE qualified_attribute ) )
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==IDENT) ) {
                int LA80_1 = input.LA(2);

                if ( ((synpred121_Express()&&( isFirst ))) ) {
                    alt80=1;
                }
                else if ( (((synpred122_Express()&&(nextIs(ATTRIBUTE_IDENT)))||(synpred122_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred122_Express()&&(nextIs(TYPE_ATTR_IDENT))))) ) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA80_0==CONST_SELF) ) {
                alt80=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // Express.g:691:6: {...}? => IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "referenced_attribute", " isFirst ");
                    }
                    IDENT284=(Token)match(input,IDENT,FOLLOW_IDENT_in_referenced_attribute4034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT284_tree = (CommonTree)adaptor.create(IDENT284);
                    adaptor.addChild(root_0, IDENT284_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:692:6: attribute_ref
                    {
                    pushFollow(FOLLOW_attribute_ref_in_referenced_attribute4041);
                    attribute_ref285=attribute_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_ref.add(attribute_ref285.getTree());


                    // AST REWRITE
                    // elements: attribute_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 692:20: -> ^( REFERENCED_ATTRIBUTE attribute_ref )
                    {
                        // Express.g:692:23: ^( REFERENCED_ATTRIBUTE attribute_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REFERENCED_ATTRIBUTE, "REFERENCED_ATTRIBUTE"), root_1);

                        adaptor.addChild(root_1, stream_attribute_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:693:6: qualified_attribute
                    {
                    pushFollow(FOLLOW_qualified_attribute_in_referenced_attribute4056);
                    qualified_attribute286=qualified_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualified_attribute.add(qualified_attribute286.getTree());


                    // AST REWRITE
                    // elements: qualified_attribute
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 693:26: -> ^( REFERENCED_ATTRIBUTE qualified_attribute )
                    {
                        // Express.g:693:29: ^( REFERENCED_ATTRIBUTE qualified_attribute )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REFERENCED_ATTRIBUTE, "REFERENCED_ATTRIBUTE"), root_1);

                        adaptor.addChild(root_1, stream_qualified_attribute.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, referenced_attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenced_attribute"

    public static class entity_constructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entity_constructor"
    // Express.g:696:1: entity_constructor : entity_ref LPAREN ( expression ( COMMA expression )* )? RPAREN -> ^( ENTITY_CONSTRUCTOR entity_ref ( expression )* ) ;
    public final entity_constructor_return entity_constructor() throws RecognitionException {
        entity_constructor_return retval = new entity_constructor_return();
        retval.start = input.LT(1);
        int entity_constructor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN288=null;
        Token COMMA290=null;
        Token RPAREN292=null;
        entity_ref_return entity_ref287 = null;

        expression_return expression289 = null;

        expression_return expression291 = null;


        CommonTree LPAREN288_tree=null;
        CommonTree COMMA290_tree=null;
        CommonTree RPAREN292_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // Express.g:697:3: ( entity_ref LPAREN ( expression ( COMMA expression )* )? RPAREN -> ^( ENTITY_CONSTRUCTOR entity_ref ( expression )* ) )
            // Express.g:697:6: entity_ref LPAREN ( expression ( COMMA expression )* )? RPAREN
            {
            pushFollow(FOLLOW_entity_ref_in_entity_constructor4078);
            entity_ref287=entity_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref287.getTree());
            LPAREN288=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_entity_constructor4080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN288);

            // Express.g:697:25: ( expression ( COMMA expression )* )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( ((LA82_0>=CONST_E && LA82_0<=FUNCTION_SIZEOF)||LA82_0==NOT||LA82_0==LPAREN||(LA82_0>=PLUS && LA82_0<=LBRACK)||LA82_0==IDENT||(LA82_0>=QUESTION && LA82_0<=STAR)||LA82_0==LCURLY||(LA82_0>=FLOAT && LA82_0<=STRING)||LA82_0==QUERY||(LA82_0>=338 && LA82_0<=340)) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Express.g:697:28: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_entity_constructor4086);
                    expression289=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression289.getTree());
                    // Express.g:697:40: ( COMMA expression )*
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==COMMA) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // Express.g:697:43: COMMA expression
                    	    {
                    	    COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_entity_constructor4092); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA290);

                    	    pushFollow(FOLLOW_expression_in_entity_constructor4095);
                    	    expression291=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression291.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop81;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN292=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_entity_constructor4106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN292);



            // AST REWRITE
            // elements: entity_ref, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 698:3: -> ^( ENTITY_CONSTRUCTOR entity_ref ( expression )* )
            {
                // Express.g:698:6: ^( ENTITY_CONSTRUCTOR entity_ref ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_CONSTRUCTOR, "ENTITY_CONSTRUCTOR"), root_1);

                adaptor.addChild(root_1, stream_entity_ref.nextTree());
                // Express.g:698:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, entity_constructor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entity_constructor"

    public static class entity_id_return extends ParserRuleReturnScope {
        public String eid;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entity_id"
    // Express.g:701:1: entity_id returns [String eid] : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( ENTITY_ID IDENT[$id] ) );
    public final entity_id_return entity_id() throws RecognitionException {
        entity_id_return retval = new entity_id_return();
        retval.start = input.LT(1);
        int entity_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // Express.g:702:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( ENTITY_ID IDENT[$id] ) )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==IDENT) ) {
                int LA83_1 = input.LA(2);

                if ( ((synpred125_Express()&&( isFirst ))) ) {
                    alt83=1;
                }
                else if ( ((nextIs(ENTITY_IDENT))) ) {
                    alt83=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // Express.g:702:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_entity_id4141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.eid =(id!=null?id.getText():null); addId(retval.eid, ENTITY_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:703:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_id", "nextIs(ENTITY_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_entity_id4153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);

                    if ( state.backtracking==0 ) {
                       retval.eid =(id!=null?id.getText():null);
                    }


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 704:3: -> ^( ENTITY_ID IDENT[$id] )
                    {
                        // Express.g:704:6: ^( ENTITY_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_ID, "ENTITY_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, entity_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entity_id"

    public static class enumeration_reference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumeration_reference"
    // Express.g:707:1: enumeration_reference : ({...}? => IDENT ( DOT IDENT )? | ( type_ref DOT )? enumeration_ref -> ^( ENUMERATION_REFERENCE ( type_ref )? enumeration_ref ) );
    public final enumeration_reference_return enumeration_reference() throws RecognitionException {
        enumeration_reference_return retval = new enumeration_reference_return();
        retval.start = input.LT(1);
        int enumeration_reference_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT293=null;
        Token DOT294=null;
        Token IDENT295=null;
        Token DOT297=null;
        type_ref_return type_ref296 = null;

        enumeration_ref_return enumeration_ref298 = null;


        CommonTree IDENT293_tree=null;
        CommonTree DOT294_tree=null;
        CommonTree IDENT295_tree=null;
        CommonTree DOT297_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_enumeration_ref=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_ref");
        RewriteRuleSubtreeStream stream_type_ref=new RewriteRuleSubtreeStream(adaptor,"rule type_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // Express.g:708:3: ({...}? => IDENT ( DOT IDENT )? | ( type_ref DOT )? enumeration_ref -> ^( ENUMERATION_REFERENCE ( type_ref )? enumeration_ref ) )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==IDENT) ) {
                int LA86_1 = input.LA(2);

                if ( ((synpred127_Express()&&( isFirst ))) ) {
                    alt86=1;
                }
                else if ( (((nextIs(TYPE_IDENT))||(nextIs(TYPE_VAR_IDENT))||(nextIs(ENUMERATION_IDENT))||(nextIs(TYPE_ATTR_IDENT))||(nextIs(TYPE_PARAM_IDENT)))) ) {
                    alt86=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // Express.g:708:5: {...}? => IDENT ( DOT IDENT )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "enumeration_reference", " isFirst ");
                    }
                    IDENT293=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumeration_reference4182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT293_tree = (CommonTree)adaptor.create(IDENT293);
                    adaptor.addChild(root_0, IDENT293_tree);
                    }
                    // Express.g:708:26: ( DOT IDENT )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==DOT) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // Express.g:708:28: DOT IDENT
                            {
                            DOT294=(Token)match(input,DOT,FOLLOW_DOT_in_enumeration_reference4186); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT294_tree = (CommonTree)adaptor.create(DOT294);
                            adaptor.addChild(root_0, DOT294_tree);
                            }
                            IDENT295=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumeration_reference4188); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IDENT295_tree = (CommonTree)adaptor.create(IDENT295);
                            adaptor.addChild(root_0, IDENT295_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Express.g:709:5: ( type_ref DOT )? enumeration_ref
                    {
                    // Express.g:709:5: ( type_ref DOT )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==IDENT) ) {
                        int LA85_1 = input.LA(2);

                        if ( (LA85_1==DOT) ) {
                            alt85=1;
                        }
                    }
                    switch (alt85) {
                        case 1 :
                            // Express.g:709:8: type_ref DOT
                            {
                            pushFollow(FOLLOW_type_ref_in_enumeration_reference4199);
                            type_ref296=type_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_ref.add(type_ref296.getTree());
                            DOT297=(Token)match(input,DOT,FOLLOW_DOT_in_enumeration_reference4202); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT297);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_enumeration_ref_in_enumeration_reference4208);
                    enumeration_ref298=enumeration_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumeration_ref.add(enumeration_ref298.getTree());


                    // AST REWRITE
                    // elements: type_ref, enumeration_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 710:3: -> ^( ENUMERATION_REFERENCE ( type_ref )? enumeration_ref )
                    {
                        // Express.g:710:6: ^( ENUMERATION_REFERENCE ( type_ref )? enumeration_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUMERATION_REFERENCE, "ENUMERATION_REFERENCE"), root_1);

                        // Express.g:710:30: ( type_ref )?
                        if ( stream_type_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_type_ref.nextTree());

                        }
                        stream_type_ref.reset();
                        adaptor.addChild(root_1, stream_enumeration_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, enumeration_reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeration_reference"

    public static class escape_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escape_stmt"
    // Express.g:713:1: escape_stmt : 'escape' SEMI -> ^( ESCAPE_STMT ) ;
    public final escape_stmt_return escape_stmt() throws RecognitionException {
        escape_stmt_return retval = new escape_stmt_return();
        retval.start = input.LT(1);
        int escape_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal299=null;
        Token SEMI300=null;

        CommonTree string_literal299_tree=null;
        CommonTree SEMI300_tree=null;
        RewriteRuleTokenStream stream_323=new RewriteRuleTokenStream(adaptor,"token 323");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // Express.g:714:3: ( 'escape' SEMI -> ^( ESCAPE_STMT ) )
            // Express.g:714:6: 'escape' SEMI
            {
            string_literal299=(Token)match(input,323,FOLLOW_323_in_escape_stmt4235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_323.add(string_literal299);

            SEMI300=(Token)match(input,SEMI,FOLLOW_SEMI_in_escape_stmt4238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI300);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 715:3: -> ^( ESCAPE_STMT )
            {
                // Express.g:715:6: ^( ESCAPE_STMT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ESCAPE_STMT, "ESCAPE_STMT"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, escape_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "escape_stmt"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // Express.g:718:1: expression : simple_expression ( rel_op_extended simple_expression )? -> ^( EXPRESSION simple_expression ( rel_op_extended )? ( simple_expression )? ) ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        simple_expression_return simple_expression301 = null;

        rel_op_extended_return rel_op_extended302 = null;

        simple_expression_return simple_expression303 = null;


        RewriteRuleSubtreeStream stream_rel_op_extended=new RewriteRuleSubtreeStream(adaptor,"rule rel_op_extended");
        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // Express.g:719:3: ( simple_expression ( rel_op_extended simple_expression )? -> ^( EXPRESSION simple_expression ( rel_op_extended )? ( simple_expression )? ) )
            // Express.g:719:6: simple_expression ( rel_op_extended simple_expression )?
            {
            pushFollow(FOLLOW_simple_expression_in_expression4260);
            simple_expression301=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression301.getTree());
            // Express.g:719:25: ( rel_op_extended simple_expression )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=LT && LA87_0<=LE)||(LA87_0>=GT && LA87_0<=COLEQCOL)||(LA87_0>=350 && LA87_0<=351)) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // Express.g:719:28: rel_op_extended simple_expression
                    {
                    pushFollow(FOLLOW_rel_op_extended_in_expression4266);
                    rel_op_extended302=rel_op_extended();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel_op_extended.add(rel_op_extended302.getTree());
                    pushFollow(FOLLOW_simple_expression_in_expression4269);
                    simple_expression303=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression303.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: simple_expression, rel_op_extended, simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 720:3: -> ^( EXPRESSION simple_expression ( rel_op_extended )? ( simple_expression )? )
            {
                // Express.g:720:6: ^( EXPRESSION simple_expression ( rel_op_extended )? ( simple_expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSION, "EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());
                // Express.g:720:37: ( rel_op_extended )?
                if ( stream_rel_op_extended.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op_extended.nextTree());

                }
                stream_rel_op_extended.reset();
                // Express.g:720:54: ( simple_expression )?
                if ( stream_simple_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_simple_expression.nextTree());

                }
                stream_simple_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "factor"
    // Express.g:723:1: factor : simple_factor ( DOUBLESTAR simple_factor )? -> ^( FACTOR simple_factor ( simple_factor )? ) ;
    public final factor_return factor() throws RecognitionException {
        factor_return retval = new factor_return();
        retval.start = input.LT(1);
        int factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOUBLESTAR305=null;
        simple_factor_return simple_factor304 = null;

        simple_factor_return simple_factor306 = null;


        CommonTree DOUBLESTAR305_tree=null;
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleSubtreeStream stream_simple_factor=new RewriteRuleSubtreeStream(adaptor,"rule simple_factor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // Express.g:724:3: ( simple_factor ( DOUBLESTAR simple_factor )? -> ^( FACTOR simple_factor ( simple_factor )? ) )
            // Express.g:724:6: simple_factor ( DOUBLESTAR simple_factor )?
            {
            pushFollow(FOLLOW_simple_factor_in_factor4303);
            simple_factor304=simple_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_factor.add(simple_factor304.getTree());
            // Express.g:724:21: ( DOUBLESTAR simple_factor )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==DOUBLESTAR) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // Express.g:724:24: DOUBLESTAR simple_factor
                    {
                    DOUBLESTAR305=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_factor4309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR305);

                    pushFollow(FOLLOW_simple_factor_in_factor4312);
                    simple_factor306=simple_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_factor.add(simple_factor306.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: simple_factor, simple_factor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 725:3: -> ^( FACTOR simple_factor ( simple_factor )? )
            {
                // Express.g:725:6: ^( FACTOR simple_factor ( simple_factor )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FACTOR, "FACTOR"), root_1);

                adaptor.addChild(root_1, stream_simple_factor.nextTree());
                // Express.g:725:29: ( simple_factor )?
                if ( stream_simple_factor.hasNext() ) {
                    adaptor.addChild(root_1, stream_simple_factor.nextTree());

                }
                stream_simple_factor.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "factor"

    public static class formal_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_parameter"
    // Express.g:728:1: formal_parameter : parameter_id ( COMMA parameter_id )* COLON parameter_type -> ^( FORMAL_PARAMETER ( parameter_id )+ parameter_type ) ;
    public final formal_parameter_return formal_parameter() throws RecognitionException {
        formal_parameter_return retval = new formal_parameter_return();
        retval.start = input.LT(1);
        int formal_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA308=null;
        Token COLON310=null;
        parameter_id_return parameter_id307 = null;

        parameter_id_return parameter_id309 = null;

        parameter_type_return parameter_type311 = null;


        CommonTree COMMA308_tree=null;
        CommonTree COLON310_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        RewriteRuleSubtreeStream stream_parameter_id=new RewriteRuleSubtreeStream(adaptor,"rule parameter_id");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // Express.g:729:3: ( parameter_id ( COMMA parameter_id )* COLON parameter_type -> ^( FORMAL_PARAMETER ( parameter_id )+ parameter_type ) )
            // Express.g:729:6: parameter_id ( COMMA parameter_id )* COLON parameter_type
            {
            pushFollow(FOLLOW_parameter_id_in_formal_parameter4343);
            parameter_id307=parameter_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_id.add(parameter_id307.getTree());
            // Express.g:729:20: ( COMMA parameter_id )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Express.g:729:23: COMMA parameter_id
            	    {
            	    COMMA308=(Token)match(input,COMMA,FOLLOW_COMMA_in_formal_parameter4349); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA308);

            	    pushFollow(FOLLOW_parameter_id_in_formal_parameter4352);
            	    parameter_id309=parameter_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_parameter_id.add(parameter_id309.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);

            COLON310=(Token)match(input,COLON,FOLLOW_COLON_in_formal_parameter4359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON310);

            pushFollow(FOLLOW_parameter_type_in_formal_parameter4362);
            parameter_type311=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type311.getTree());


            // AST REWRITE
            // elements: parameter_id, parameter_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 730:3: -> ^( FORMAL_PARAMETER ( parameter_id )+ parameter_type )
            {
                // Express.g:730:6: ^( FORMAL_PARAMETER ( parameter_id )+ parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAMETER, "FORMAL_PARAMETER"), root_1);

                if ( !(stream_parameter_id.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_parameter_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter_id.nextTree());

                }
                stream_parameter_id.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, formal_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter"

    public static class attribute_qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_qualifier"
    // Express.g:733:1: attribute_qualifier : DOT global_ident -> ^( ATTRIBUTE_QUALIFIER global_ident ) ;
    public final attribute_qualifier_return attribute_qualifier() throws RecognitionException {
        attribute_qualifier_return retval = new attribute_qualifier_return();
        retval.start = input.LT(1);
        int attribute_qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT312=null;
        global_ident_return global_ident313 = null;


        CommonTree DOT312_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_global_ident=new RewriteRuleSubtreeStream(adaptor,"rule global_ident");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // Express.g:734:3: ( DOT global_ident -> ^( ATTRIBUTE_QUALIFIER global_ident ) )
            // Express.g:734:5: DOT global_ident
            {
            DOT312=(Token)match(input,DOT,FOLLOW_DOT_in_attribute_qualifier4389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT312);

            pushFollow(FOLLOW_global_ident_in_attribute_qualifier4391);
            global_ident313=global_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_ident.add(global_ident313.getTree());


            // AST REWRITE
            // elements: global_ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:3: -> ^( ATTRIBUTE_QUALIFIER global_ident )
            {
                // Express.g:735:6: ^( ATTRIBUTE_QUALIFIER global_ident )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_QUALIFIER, "ATTRIBUTE_QUALIFIER"), root_1);

                adaptor.addChild(root_1, stream_global_ident.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, attribute_qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_qualifier"

    public static class function_call_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_call"
    // Express.g:739:1: function_call : ( built_in_function | function_ref ) ( actual_parameter_list )? -> ^( FUNCTION_CALL ( built_in_function )? ( function_ref )? ( actual_parameter_list )? ) ;
    public final function_call_return function_call() throws RecognitionException {
        function_call_return retval = new function_call_return();
        retval.start = input.LT(1);
        int function_call_StartIndex = input.index();
        CommonTree root_0 = null;

        built_in_function_return built_in_function314 = null;

        function_ref_return function_ref315 = null;

        actual_parameter_list_return actual_parameter_list316 = null;


        RewriteRuleSubtreeStream stream_function_ref=new RewriteRuleSubtreeStream(adaptor,"rule function_ref");
        RewriteRuleSubtreeStream stream_built_in_function=new RewriteRuleSubtreeStream(adaptor,"rule built_in_function");
        RewriteRuleSubtreeStream stream_actual_parameter_list=new RewriteRuleSubtreeStream(adaptor,"rule actual_parameter_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // Express.g:740:3: ( ( built_in_function | function_ref ) ( actual_parameter_list )? -> ^( FUNCTION_CALL ( built_in_function )? ( function_ref )? ( actual_parameter_list )? ) )
            // Express.g:740:6: ( built_in_function | function_ref ) ( actual_parameter_list )?
            {
            // Express.g:740:6: ( built_in_function | function_ref )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( ((LA90_0>=FUNCTION_ABS && LA90_0<=FUNCTION_SIZEOF)) ) {
                alt90=1;
            }
            else if ( (LA90_0==IDENT) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // Express.g:740:8: built_in_function
                    {
                    pushFollow(FOLLOW_built_in_function_in_function_call4419);
                    built_in_function314=built_in_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_built_in_function.add(built_in_function314.getTree());

                    }
                    break;
                case 2 :
                    // Express.g:740:28: function_ref
                    {
                    pushFollow(FOLLOW_function_ref_in_function_call4423);
                    function_ref315=function_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_ref.add(function_ref315.getTree());

                    }
                    break;

            }

            // Express.g:740:43: ( actual_parameter_list )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==LPAREN) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // Express.g:0:0: actual_parameter_list
                    {
                    pushFollow(FOLLOW_actual_parameter_list_in_function_call4427);
                    actual_parameter_list316=actual_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_actual_parameter_list.add(actual_parameter_list316.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: function_ref, actual_parameter_list, built_in_function
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 741:3: -> ^( FUNCTION_CALL ( built_in_function )? ( function_ref )? ( actual_parameter_list )? )
            {
                // Express.g:741:6: ^( FUNCTION_CALL ( built_in_function )? ( function_ref )? ( actual_parameter_list )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

                // Express.g:741:22: ( built_in_function )?
                if ( stream_built_in_function.hasNext() ) {
                    adaptor.addChild(root_1, stream_built_in_function.nextTree());

                }
                stream_built_in_function.reset();
                // Express.g:741:41: ( function_ref )?
                if ( stream_function_ref.hasNext() ) {
                    adaptor.addChild(root_1, stream_function_ref.nextTree());

                }
                stream_function_ref.reset();
                // Express.g:741:55: ( actual_parameter_list )?
                if ( stream_actual_parameter_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_actual_parameter_list.nextTree());

                }
                stream_actual_parameter_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, function_call_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_call"

    public static class function_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_decl"
    // Express.g:745:1: function_decl : function_head ( algorithm_head )? ( stmt )+ 'end_function' SEMI -> ^( FUNCTION_DECL function_head ( algorithm_head )? ( stmt )+ ) ;
    public final function_decl_return function_decl() throws RecognitionException {
        function_decl_return retval = new function_decl_return();
        retval.start = input.LT(1);
        int function_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal320=null;
        Token SEMI321=null;
        function_head_return function_head317 = null;

        algorithm_head_return algorithm_head318 = null;

        stmt_return stmt319 = null;


        CommonTree string_literal320_tree=null;
        CommonTree SEMI321_tree=null;
        RewriteRuleTokenStream stream_324=new RewriteRuleTokenStream(adaptor,"token 324");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_function_head=new RewriteRuleSubtreeStream(adaptor,"rule function_head");
        RewriteRuleSubtreeStream stream_algorithm_head=new RewriteRuleSubtreeStream(adaptor,"rule algorithm_head");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // Express.g:746:3: ( function_head ( algorithm_head )? ( stmt )+ 'end_function' SEMI -> ^( FUNCTION_DECL function_head ( algorithm_head )? ( stmt )+ ) )
            // Express.g:746:6: function_head ( algorithm_head )? ( stmt )+ 'end_function' SEMI
            {
            pushFollow(FOLLOW_function_head_in_function_decl4460);
            function_head317=function_head();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_head.add(function_head317.getTree());
            // Express.g:746:20: ( algorithm_head )?
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // Express.g:0:0: algorithm_head
                    {
                    pushFollow(FOLLOW_algorithm_head_in_function_decl4462);
                    algorithm_head318=algorithm_head();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_algorithm_head.add(algorithm_head318.getTree());

                    }
                    break;

            }

            // Express.g:746:37: ( stmt )+
            int cnt93=0;
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( ((LA93_0>=PROCEDURE_INSERT && LA93_0<=PROCEDURE_REMOVE)||(LA93_0>=IDENT && LA93_0<=SEMI)||LA93_0==295||LA93_0==304||LA93_0==307||LA93_0==323||LA93_0==329||LA93_0==352||LA93_0==355||LA93_0==361) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_function_decl4466);
            	    stmt319=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt319.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);

            string_literal320=(Token)match(input,324,FOLLOW_324_in_function_decl4470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_324.add(string_literal320);

            SEMI321=(Token)match(input,SEMI,FOLLOW_SEMI_in_function_decl4472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI321);

            if ( state.backtracking==0 ) {
               upScope(); 
            }


            // AST REWRITE
            // elements: function_head, algorithm_head, stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 747:3: -> ^( FUNCTION_DECL function_head ( algorithm_head )? ( stmt )+ )
            {
                // Express.g:747:6: ^( FUNCTION_DECL function_head ( algorithm_head )? ( stmt )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_DECL, "FUNCTION_DECL"), root_1);

                adaptor.addChild(root_1, stream_function_head.nextTree());
                // Express.g:747:36: ( algorithm_head )?
                if ( stream_algorithm_head.hasNext() ) {
                    adaptor.addChild(root_1, stream_algorithm_head.nextTree());

                }
                stream_algorithm_head.reset();
                if ( !(stream_stmt.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, function_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_decl"

    public static class function_head_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_head"
    // Express.g:750:1: function_head : 'function' function_id ( LPAREN formal_parameter ( SEMI formal_parameter )* RPAREN )? COLON parameter_type SEMI -> ^( FUNCTION_HEAD function_id ( formal_parameter )* parameter_type ) ;
    public final function_head_return function_head() throws RecognitionException {
        function_head_return retval = new function_head_return();
        retval.start = input.LT(1);
        int function_head_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal322=null;
        Token LPAREN324=null;
        Token SEMI326=null;
        Token RPAREN328=null;
        Token COLON329=null;
        Token SEMI331=null;
        function_id_return function_id323 = null;

        formal_parameter_return formal_parameter325 = null;

        formal_parameter_return formal_parameter327 = null;

        parameter_type_return parameter_type330 = null;


        CommonTree string_literal322_tree=null;
        CommonTree LPAREN324_tree=null;
        CommonTree SEMI326_tree=null;
        CommonTree RPAREN328_tree=null;
        CommonTree COLON329_tree=null;
        CommonTree SEMI331_tree=null;
        RewriteRuleTokenStream stream_325=new RewriteRuleTokenStream(adaptor,"token 325");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_formal_parameter=new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter");
        RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // Express.g:751:3: ( 'function' function_id ( LPAREN formal_parameter ( SEMI formal_parameter )* RPAREN )? COLON parameter_type SEMI -> ^( FUNCTION_HEAD function_id ( formal_parameter )* parameter_type ) )
            // Express.g:751:6: 'function' function_id ( LPAREN formal_parameter ( SEMI formal_parameter )* RPAREN )? COLON parameter_type SEMI
            {
            string_literal322=(Token)match(input,325,FOLLOW_325_in_function_head4505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_325.add(string_literal322);

            pushFollow(FOLLOW_function_id_in_function_head4508);
            function_id323=function_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_id.add(function_id323.getTree());
            if ( state.backtracking==0 ) {
               newScope("function"); 
            }
            // Express.g:751:56: ( LPAREN formal_parameter ( SEMI formal_parameter )* RPAREN )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==LPAREN) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // Express.g:751:59: LPAREN formal_parameter ( SEMI formal_parameter )* RPAREN
                    {
                    LPAREN324=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_head4515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN324);

                    pushFollow(FOLLOW_formal_parameter_in_function_head4518);
                    formal_parameter325=formal_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formal_parameter.add(formal_parameter325.getTree());
                    // Express.g:751:85: ( SEMI formal_parameter )*
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==SEMI) ) {
                            alt94=1;
                        }


                        switch (alt94) {
                    	case 1 :
                    	    // Express.g:751:88: SEMI formal_parameter
                    	    {
                    	    SEMI326=(Token)match(input,SEMI,FOLLOW_SEMI_in_function_head4524); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_SEMI.add(SEMI326);

                    	    pushFollow(FOLLOW_formal_parameter_in_function_head4527);
                    	    formal_parameter327=formal_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formal_parameter.add(formal_parameter327.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop94;
                        }
                    } while (true);

                    RPAREN328=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_head4534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN328);


                    }
                    break;

            }

            COLON329=(Token)match(input,COLON,FOLLOW_COLON_in_function_head4541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON329);

            pushFollow(FOLLOW_parameter_type_in_function_head4544);
            parameter_type330=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type330.getTree());
            SEMI331=(Token)match(input,SEMI,FOLLOW_SEMI_in_function_head4547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI331);



            // AST REWRITE
            // elements: function_id, formal_parameter, parameter_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 752:3: -> ^( FUNCTION_HEAD function_id ( formal_parameter )* parameter_type )
            {
                // Express.g:752:6: ^( FUNCTION_HEAD function_id ( formal_parameter )* parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_HEAD, "FUNCTION_HEAD"), root_1);

                adaptor.addChild(root_1, stream_function_id.nextTree());
                // Express.g:752:34: ( formal_parameter )*
                while ( stream_formal_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_formal_parameter.nextTree());

                }
                stream_formal_parameter.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, function_head_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_head"

    public static class function_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_id"
    // Express.g:755:1: function_id : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( FUNCTION_ID IDENT[$id] ) );
    public final function_id_return function_id() throws RecognitionException {
        function_id_return retval = new function_id_return();
        retval.start = input.LT(1);
        int function_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // Express.g:756:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( FUNCTION_ID IDENT[$id] ) )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==IDENT) ) {
                int LA96_1 = input.LA(2);

                if ( ((synpred138_Express()&&( isFirst ))) ) {
                    alt96=1;
                }
                else if ( ((nextIs(FUNCTION_IDENT))) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // Express.g:756:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_function_id4580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addId((id!=null?id.getText():null),FUNCTION_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:757:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(FUNCTION_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_id", "nextIs(FUNCTION_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_function_id4592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 758:3: -> ^( FUNCTION_ID IDENT[$id] )
                    {
                        // Express.g:758:6: ^( FUNCTION_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_ID, "FUNCTION_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, function_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_id"

    public static class generalized_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "generalized_types"
    // Express.g:761:1: generalized_types : ( aggregate_type -> ^( GENERALIZED_TYPES aggregate_type ) | general_aggregation_types -> ^( GENERALIZED_TYPES general_aggregation_types ) | generic_type -> ^( GENERALIZED_TYPES generic_type ) | generic_entity_type -> ^( GENERALIZED_TYPES generic_entity_type ) );
    public final generalized_types_return generalized_types() throws RecognitionException {
        generalized_types_return retval = new generalized_types_return();
        retval.start = input.LT(1);
        int generalized_types_StartIndex = input.index();
        CommonTree root_0 = null;

        aggregate_type_return aggregate_type332 = null;

        general_aggregation_types_return general_aggregation_types333 = null;

        generic_type_return generic_type334 = null;

        generic_entity_type_return generic_entity_type335 = null;


        RewriteRuleSubtreeStream stream_generic_entity_type=new RewriteRuleSubtreeStream(adaptor,"rule generic_entity_type");
        RewriteRuleSubtreeStream stream_generic_type=new RewriteRuleSubtreeStream(adaptor,"rule generic_type");
        RewriteRuleSubtreeStream stream_general_aggregation_types=new RewriteRuleSubtreeStream(adaptor,"rule general_aggregation_types");
        RewriteRuleSubtreeStream stream_aggregate_type=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // Express.g:762:3: ( aggregate_type -> ^( GENERALIZED_TYPES aggregate_type ) | general_aggregation_types -> ^( GENERALIZED_TYPES general_aggregation_types ) | generic_type -> ^( GENERALIZED_TYPES generic_type ) | generic_entity_type -> ^( GENERALIZED_TYPES generic_entity_type ) )
            int alt97=4;
            switch ( input.LA(1) ) {
            case 293:
                {
                alt97=1;
                }
                break;
            case 298:
            case 301:
            case 322:
            case 326:
                {
                alt97=2;
                }
                break;
            case 327:
                {
                alt97=3;
                }
                break;
            case 328:
                {
                alt97=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // Express.g:762:6: aggregate_type
                    {
                    pushFollow(FOLLOW_aggregate_type_in_generalized_types4629);
                    aggregate_type332=aggregate_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregate_type.add(aggregate_type332.getTree());


                    // AST REWRITE
                    // elements: aggregate_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 762:21: -> ^( GENERALIZED_TYPES aggregate_type )
                    {
                        // Express.g:762:24: ^( GENERALIZED_TYPES aggregate_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERALIZED_TYPES, "GENERALIZED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_aggregate_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:763:6: general_aggregation_types
                    {
                    pushFollow(FOLLOW_general_aggregation_types_in_generalized_types4645);
                    general_aggregation_types333=general_aggregation_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_aggregation_types.add(general_aggregation_types333.getTree());


                    // AST REWRITE
                    // elements: general_aggregation_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 763:32: -> ^( GENERALIZED_TYPES general_aggregation_types )
                    {
                        // Express.g:763:35: ^( GENERALIZED_TYPES general_aggregation_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERALIZED_TYPES, "GENERALIZED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_general_aggregation_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:764:6: generic_type
                    {
                    pushFollow(FOLLOW_generic_type_in_generalized_types4660);
                    generic_type334=generic_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_generic_type.add(generic_type334.getTree());


                    // AST REWRITE
                    // elements: generic_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 764:19: -> ^( GENERALIZED_TYPES generic_type )
                    {
                        // Express.g:764:22: ^( GENERALIZED_TYPES generic_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERALIZED_TYPES, "GENERALIZED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_generic_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:765:6: generic_entity_type
                    {
                    pushFollow(FOLLOW_generic_entity_type_in_generalized_types4675);
                    generic_entity_type335=generic_entity_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_generic_entity_type.add(generic_entity_type335.getTree());


                    // AST REWRITE
                    // elements: generic_entity_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 765:26: -> ^( GENERALIZED_TYPES generic_entity_type )
                    {
                        // Express.g:765:29: ^( GENERALIZED_TYPES generic_entity_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERALIZED_TYPES, "GENERALIZED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_generic_entity_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, generalized_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "generalized_types"

    public static class general_aggregation_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_aggregation_types"
    // Express.g:768:1: general_aggregation_types : ( general_array_type -> ^( GENERAL_AGGREGATION_TYPES general_array_type ) | general_bag_type -> ^( GENERAL_AGGREGATION_TYPES general_bag_type ) | general_list_type -> ^( GENERAL_AGGREGATION_TYPES general_list_type ) | general_set_type -> ^( GENERAL_AGGREGATION_TYPES general_set_type ) );
    public final general_aggregation_types_return general_aggregation_types() throws RecognitionException {
        general_aggregation_types_return retval = new general_aggregation_types_return();
        retval.start = input.LT(1);
        int general_aggregation_types_StartIndex = input.index();
        CommonTree root_0 = null;

        general_array_type_return general_array_type336 = null;

        general_bag_type_return general_bag_type337 = null;

        general_list_type_return general_list_type338 = null;

        general_set_type_return general_set_type339 = null;


        RewriteRuleSubtreeStream stream_general_list_type=new RewriteRuleSubtreeStream(adaptor,"rule general_list_type");
        RewriteRuleSubtreeStream stream_general_set_type=new RewriteRuleSubtreeStream(adaptor,"rule general_set_type");
        RewriteRuleSubtreeStream stream_general_array_type=new RewriteRuleSubtreeStream(adaptor,"rule general_array_type");
        RewriteRuleSubtreeStream stream_general_bag_type=new RewriteRuleSubtreeStream(adaptor,"rule general_bag_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // Express.g:769:3: ( general_array_type -> ^( GENERAL_AGGREGATION_TYPES general_array_type ) | general_bag_type -> ^( GENERAL_AGGREGATION_TYPES general_bag_type ) | general_list_type -> ^( GENERAL_AGGREGATION_TYPES general_list_type ) | general_set_type -> ^( GENERAL_AGGREGATION_TYPES general_set_type ) )
            int alt98=4;
            switch ( input.LA(1) ) {
            case 298:
                {
                alt98=1;
                }
                break;
            case 301:
                {
                alt98=2;
                }
                break;
            case 326:
                {
                alt98=3;
                }
                break;
            case 322:
                {
                alt98=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // Express.g:769:6: general_array_type
                    {
                    pushFollow(FOLLOW_general_array_type_in_general_aggregation_types4697);
                    general_array_type336=general_array_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_array_type.add(general_array_type336.getTree());


                    // AST REWRITE
                    // elements: general_array_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 769:25: -> ^( GENERAL_AGGREGATION_TYPES general_array_type )
                    {
                        // Express.g:769:28: ^( GENERAL_AGGREGATION_TYPES general_array_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_AGGREGATION_TYPES, "GENERAL_AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_general_array_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:770:6: general_bag_type
                    {
                    pushFollow(FOLLOW_general_bag_type_in_general_aggregation_types4712);
                    general_bag_type337=general_bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_bag_type.add(general_bag_type337.getTree());


                    // AST REWRITE
                    // elements: general_bag_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 770:23: -> ^( GENERAL_AGGREGATION_TYPES general_bag_type )
                    {
                        // Express.g:770:26: ^( GENERAL_AGGREGATION_TYPES general_bag_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_AGGREGATION_TYPES, "GENERAL_AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_general_bag_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:771:6: general_list_type
                    {
                    pushFollow(FOLLOW_general_list_type_in_general_aggregation_types4727);
                    general_list_type338=general_list_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_list_type.add(general_list_type338.getTree());


                    // AST REWRITE
                    // elements: general_list_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 771:24: -> ^( GENERAL_AGGREGATION_TYPES general_list_type )
                    {
                        // Express.g:771:27: ^( GENERAL_AGGREGATION_TYPES general_list_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_AGGREGATION_TYPES, "GENERAL_AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_general_list_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:772:6: general_set_type
                    {
                    pushFollow(FOLLOW_general_set_type_in_general_aggregation_types4742);
                    general_set_type339=general_set_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_set_type.add(general_set_type339.getTree());


                    // AST REWRITE
                    // elements: general_set_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 772:23: -> ^( GENERAL_AGGREGATION_TYPES general_set_type )
                    {
                        // Express.g:772:26: ^( GENERAL_AGGREGATION_TYPES general_set_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_AGGREGATION_TYPES, "GENERAL_AGGREGATION_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_general_set_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, general_aggregation_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_aggregation_types"

    public static class general_array_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_array_type"
    // Express.g:775:1: general_array_type : 'array' ( bound_spec )? 'of' ( 'optional' )? ( 'unique' )? parameter_type -> ^( GENERAL_ARRAY_TYPE ( bound_spec )? ( 'optional' )? ( 'unique' )? parameter_type ) ;
    public final general_array_type_return general_array_type() throws RecognitionException {
        general_array_type_return retval = new general_array_type_return();
        retval.start = input.LT(1);
        int general_array_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal340=null;
        Token string_literal342=null;
        Token string_literal343=null;
        Token string_literal344=null;
        bound_spec_return bound_spec341 = null;

        parameter_type_return parameter_type345 = null;


        CommonTree string_literal340_tree=null;
        CommonTree string_literal342_tree=null;
        CommonTree string_literal343_tree=null;
        CommonTree string_literal344_tree=null;
        RewriteRuleTokenStream stream_298=new RewriteRuleTokenStream(adaptor,"token 298");
        RewriteRuleTokenStream stream_299=new RewriteRuleTokenStream(adaptor,"token 299");
        RewriteRuleTokenStream stream_300=new RewriteRuleTokenStream(adaptor,"token 300");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // Express.g:776:3: ( 'array' ( bound_spec )? 'of' ( 'optional' )? ( 'unique' )? parameter_type -> ^( GENERAL_ARRAY_TYPE ( bound_spec )? ( 'optional' )? ( 'unique' )? parameter_type ) )
            // Express.g:776:6: 'array' ( bound_spec )? 'of' ( 'optional' )? ( 'unique' )? parameter_type
            {
            string_literal340=(Token)match(input,298,FOLLOW_298_in_general_array_type4764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_298.add(string_literal340);

            // Express.g:776:14: ( bound_spec )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==LBRACK) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_general_array_type4766);
                    bound_spec341=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec341.getTree());

                    }
                    break;

            }

            string_literal342=(Token)match(input,294,FOLLOW_294_in_general_array_type4770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal342);

            // Express.g:776:32: ( 'optional' )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==299) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Express.g:0:0: 'optional'
                    {
                    string_literal343=(Token)match(input,299,FOLLOW_299_in_general_array_type4772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_299.add(string_literal343);


                    }
                    break;

            }

            // Express.g:776:44: ( 'unique' )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==300) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Express.g:0:0: 'unique'
                    {
                    string_literal344=(Token)match(input,300,FOLLOW_300_in_general_array_type4775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_300.add(string_literal344);


                    }
                    break;

            }

            pushFollow(FOLLOW_parameter_type_in_general_array_type4779);
            parameter_type345=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type345.getTree());


            // AST REWRITE
            // elements: parameter_type, bound_spec, 300, 299
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 777:3: -> ^( GENERAL_ARRAY_TYPE ( bound_spec )? ( 'optional' )? ( 'unique' )? parameter_type )
            {
                // Express.g:777:6: ^( GENERAL_ARRAY_TYPE ( bound_spec )? ( 'optional' )? ( 'unique' )? parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_ARRAY_TYPE, "GENERAL_ARRAY_TYPE"), root_1);

                // Express.g:777:27: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                // Express.g:777:39: ( 'optional' )?
                if ( stream_299.hasNext() ) {
                    adaptor.addChild(root_1, stream_299.nextNode());

                }
                stream_299.reset();
                // Express.g:777:51: ( 'unique' )?
                if ( stream_300.hasNext() ) {
                    adaptor.addChild(root_1, stream_300.nextNode());

                }
                stream_300.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, general_array_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_array_type"

    public static class general_bag_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_bag_type"
    // Express.g:780:1: general_bag_type : 'bag' ( bound_spec )? 'of' parameter_type -> ^( GENERAL_BAG_TYPE ( bound_spec )? parameter_type ) ;
    public final general_bag_type_return general_bag_type() throws RecognitionException {
        general_bag_type_return retval = new general_bag_type_return();
        retval.start = input.LT(1);
        int general_bag_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal346=null;
        Token string_literal348=null;
        bound_spec_return bound_spec347 = null;

        parameter_type_return parameter_type349 = null;


        CommonTree string_literal346_tree=null;
        CommonTree string_literal348_tree=null;
        RewriteRuleTokenStream stream_301=new RewriteRuleTokenStream(adaptor,"token 301");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // Express.g:781:3: ( 'bag' ( bound_spec )? 'of' parameter_type -> ^( GENERAL_BAG_TYPE ( bound_spec )? parameter_type ) )
            // Express.g:781:6: 'bag' ( bound_spec )? 'of' parameter_type
            {
            string_literal346=(Token)match(input,301,FOLLOW_301_in_general_bag_type4813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_301.add(string_literal346);

            // Express.g:781:13: ( bound_spec )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==LBRACK) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_general_bag_type4816);
                    bound_spec347=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec347.getTree());

                    }
                    break;

            }

            string_literal348=(Token)match(input,294,FOLLOW_294_in_general_bag_type4820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal348);

            pushFollow(FOLLOW_parameter_type_in_general_bag_type4823);
            parameter_type349=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type349.getTree());


            // AST REWRITE
            // elements: parameter_type, bound_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 782:3: -> ^( GENERAL_BAG_TYPE ( bound_spec )? parameter_type )
            {
                // Express.g:782:6: ^( GENERAL_BAG_TYPE ( bound_spec )? parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_BAG_TYPE, "GENERAL_BAG_TYPE"), root_1);

                // Express.g:782:25: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, general_bag_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_bag_type"

    public static class general_list_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_list_type"
    // Express.g:785:1: general_list_type : 'list' ( bound_spec )? 'of' ( 'unique' )? parameter_type -> ^( GENERAL_LIST_TYPE ( bound_spec )? ( 'unique' )? parameter_type ) ;
    public final general_list_type_return general_list_type() throws RecognitionException {
        general_list_type_return retval = new general_list_type_return();
        retval.start = input.LT(1);
        int general_list_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal350=null;
        Token string_literal352=null;
        Token string_literal353=null;
        bound_spec_return bound_spec351 = null;

        parameter_type_return parameter_type354 = null;


        CommonTree string_literal350_tree=null;
        CommonTree string_literal352_tree=null;
        CommonTree string_literal353_tree=null;
        RewriteRuleTokenStream stream_300=new RewriteRuleTokenStream(adaptor,"token 300");
        RewriteRuleTokenStream stream_326=new RewriteRuleTokenStream(adaptor,"token 326");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // Express.g:786:3: ( 'list' ( bound_spec )? 'of' ( 'unique' )? parameter_type -> ^( GENERAL_LIST_TYPE ( bound_spec )? ( 'unique' )? parameter_type ) )
            // Express.g:786:6: 'list' ( bound_spec )? 'of' ( 'unique' )? parameter_type
            {
            string_literal350=(Token)match(input,326,FOLLOW_326_in_general_list_type4851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_326.add(string_literal350);

            // Express.g:786:14: ( bound_spec )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==LBRACK) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_general_list_type4854);
                    bound_spec351=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec351.getTree());

                    }
                    break;

            }

            string_literal352=(Token)match(input,294,FOLLOW_294_in_general_list_type4858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal352);

            // Express.g:786:33: ( 'unique' )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==300) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // Express.g:0:0: 'unique'
                    {
                    string_literal353=(Token)match(input,300,FOLLOW_300_in_general_list_type4861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_300.add(string_literal353);


                    }
                    break;

            }

            pushFollow(FOLLOW_parameter_type_in_general_list_type4865);
            parameter_type354=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type354.getTree());


            // AST REWRITE
            // elements: parameter_type, bound_spec, 300
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 787:3: -> ^( GENERAL_LIST_TYPE ( bound_spec )? ( 'unique' )? parameter_type )
            {
                // Express.g:787:6: ^( GENERAL_LIST_TYPE ( bound_spec )? ( 'unique' )? parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_LIST_TYPE, "GENERAL_LIST_TYPE"), root_1);

                // Express.g:787:26: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                // Express.g:787:38: ( 'unique' )?
                if ( stream_300.hasNext() ) {
                    adaptor.addChild(root_1, stream_300.nextNode());

                }
                stream_300.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, general_list_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_list_type"

    public static class general_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_ref"
    // Express.g:790:1: general_ref : ( parameter_ref -> ^( GENERAL_REF parameter_ref ) | variable_ref -> ^( GENERAL_REF variable_ref ) );
    public final general_ref_return general_ref() throws RecognitionException {
        general_ref_return retval = new general_ref_return();
        retval.start = input.LT(1);
        int general_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        parameter_ref_return parameter_ref355 = null;

        variable_ref_return variable_ref356 = null;


        RewriteRuleSubtreeStream stream_parameter_ref=new RewriteRuleSubtreeStream(adaptor,"rule parameter_ref");
        RewriteRuleSubtreeStream stream_variable_ref=new RewriteRuleSubtreeStream(adaptor,"rule variable_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // Express.g:791:3: ( parameter_ref -> ^( GENERAL_REF parameter_ref ) | variable_ref -> ^( GENERAL_REF variable_ref ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==IDENT) ) {
                int LA105_1 = input.LA(2);

                if ( (((synpred151_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred151_Express()&&(nextIs(PARAMETER_IDENT)))||(synpred151_Express()&&(nextIs(TYPE_PARAM_IDENT))))) ) {
                    alt105=1;
                }
                else if ( (true) ) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // Express.g:791:6: parameter_ref
                    {
                    pushFollow(FOLLOW_parameter_ref_in_general_ref4896);
                    parameter_ref355=parameter_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter_ref.add(parameter_ref355.getTree());


                    // AST REWRITE
                    // elements: parameter_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 791:20: -> ^( GENERAL_REF parameter_ref )
                    {
                        // Express.g:791:23: ^( GENERAL_REF parameter_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_REF, "GENERAL_REF"), root_1);

                        adaptor.addChild(root_1, stream_parameter_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:792:6: variable_ref
                    {
                    pushFollow(FOLLOW_variable_ref_in_general_ref4911);
                    variable_ref356=variable_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_ref.add(variable_ref356.getTree());


                    // AST REWRITE
                    // elements: variable_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 792:19: -> ^( GENERAL_REF variable_ref )
                    {
                        // Express.g:792:22: ^( GENERAL_REF variable_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_REF, "GENERAL_REF"), root_1);

                        adaptor.addChild(root_1, stream_variable_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, general_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_ref"

    public static class general_set_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_set_type"
    // Express.g:795:1: general_set_type : 'set' ( bound_spec )? 'of' parameter_type -> ^( GENERAL_SET_TYPE ( bound_spec )? parameter_type ) ;
    public final general_set_type_return general_set_type() throws RecognitionException {
        general_set_type_return retval = new general_set_type_return();
        retval.start = input.LT(1);
        int general_set_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal357=null;
        Token string_literal359=null;
        bound_spec_return bound_spec358 = null;

        parameter_type_return parameter_type360 = null;


        CommonTree string_literal357_tree=null;
        CommonTree string_literal359_tree=null;
        RewriteRuleTokenStream stream_322=new RewriteRuleTokenStream(adaptor,"token 322");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // Express.g:796:3: ( 'set' ( bound_spec )? 'of' parameter_type -> ^( GENERAL_SET_TYPE ( bound_spec )? parameter_type ) )
            // Express.g:796:6: 'set' ( bound_spec )? 'of' parameter_type
            {
            string_literal357=(Token)match(input,322,FOLLOW_322_in_general_set_type4933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_322.add(string_literal357);

            // Express.g:796:13: ( bound_spec )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==LBRACK) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_general_set_type4936);
                    bound_spec358=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec358.getTree());

                    }
                    break;

            }

            string_literal359=(Token)match(input,294,FOLLOW_294_in_general_set_type4940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal359);

            pushFollow(FOLLOW_parameter_type_in_general_set_type4943);
            parameter_type360=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type360.getTree());


            // AST REWRITE
            // elements: bound_spec, parameter_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 797:3: -> ^( GENERAL_SET_TYPE ( bound_spec )? parameter_type )
            {
                // Express.g:797:6: ^( GENERAL_SET_TYPE ( bound_spec )? parameter_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERAL_SET_TYPE, "GENERAL_SET_TYPE"), root_1);

                // Express.g:797:26: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, general_set_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_set_type"

    public static class generic_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "generic_type"
    // Express.g:800:1: generic_type : 'generic' ( COLON type_label )? -> ^( GENERIC_TYPE ( type_label )? ) ;
    public final generic_type_return generic_type() throws RecognitionException {
        generic_type_return retval = new generic_type_return();
        retval.start = input.LT(1);
        int generic_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal361=null;
        Token COLON362=null;
        type_label_return type_label363 = null;


        CommonTree string_literal361_tree=null;
        CommonTree COLON362_tree=null;
        RewriteRuleTokenStream stream_327=new RewriteRuleTokenStream(adaptor,"token 327");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_type_label=new RewriteRuleSubtreeStream(adaptor,"rule type_label");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // Express.g:801:3: ( 'generic' ( COLON type_label )? -> ^( GENERIC_TYPE ( type_label )? ) )
            // Express.g:801:6: 'generic' ( COLON type_label )?
            {
            string_literal361=(Token)match(input,327,FOLLOW_327_in_generic_type4972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_327.add(string_literal361);

            // Express.g:801:17: ( COLON type_label )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==COLON) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // Express.g:801:20: COLON type_label
                    {
                    COLON362=(Token)match(input,COLON,FOLLOW_COLON_in_generic_type4978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON362);

                    pushFollow(FOLLOW_type_label_in_generic_type4981);
                    type_label363=type_label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_label.add(type_label363.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: type_label
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 802:3: -> ^( GENERIC_TYPE ( type_label )? )
            {
                // Express.g:802:6: ^( GENERIC_TYPE ( type_label )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE, "GENERIC_TYPE"), root_1);

                // Express.g:802:21: ( type_label )?
                if ( stream_type_label.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_label.nextTree());

                }
                stream_type_label.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, generic_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "generic_type"

    public static class generic_entity_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "generic_entity_type"
    // Express.g:805:1: generic_entity_type : 'generic_entity' -> ^( GENERIC_ENTITY_TYPE ) ;
    public final generic_entity_type_return generic_entity_type() throws RecognitionException {
        generic_entity_type_return retval = new generic_entity_type_return();
        retval.start = input.LT(1);
        int generic_entity_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal364=null;

        CommonTree string_literal364_tree=null;
        RewriteRuleTokenStream stream_328=new RewriteRuleTokenStream(adaptor,"token 328");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // Express.g:806:3: ( 'generic_entity' -> ^( GENERIC_ENTITY_TYPE ) )
            // Express.g:806:5: 'generic_entity'
            {
            string_literal364=(Token)match(input,328,FOLLOW_328_in_generic_entity_type5009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_328.add(string_literal364);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 807:3: -> ^( GENERIC_ENTITY_TYPE )
            {
                // Express.g:807:6: ^( GENERIC_ENTITY_TYPE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_ENTITY_TYPE, "GENERIC_ENTITY_TYPE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, generic_entity_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "generic_entity_type"

    public static class group_qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_qualifier"
    // Express.g:810:1: group_qualifier : ({...}? => BACKSLASH IDENT | BACKSLASH entity_ref -> ^( GROUP_QUALIFIER entity_ref ) );
    public final group_qualifier_return group_qualifier() throws RecognitionException {
        group_qualifier_return retval = new group_qualifier_return();
        retval.start = input.LT(1);
        int group_qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BACKSLASH365=null;
        Token IDENT366=null;
        Token BACKSLASH367=null;
        entity_ref_return entity_ref368 = null;


        CommonTree BACKSLASH365_tree=null;
        CommonTree IDENT366_tree=null;
        CommonTree BACKSLASH367_tree=null;
        RewriteRuleTokenStream stream_BACKSLASH=new RewriteRuleTokenStream(adaptor,"token BACKSLASH");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // Express.g:811:3: ({...}? => BACKSLASH IDENT | BACKSLASH entity_ref -> ^( GROUP_QUALIFIER entity_ref ) )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==BACKSLASH) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==IDENT) ) {
                    int LA108_2 = input.LA(3);

                    if ( ((synpred154_Express()&&( isFirst ))) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // Express.g:811:6: {...}? => BACKSLASH IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "group_qualifier", " isFirst ");
                    }
                    BACKSLASH365=(Token)match(input,BACKSLASH,FOLLOW_BACKSLASH_in_group_qualifier5034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BACKSLASH365_tree = (CommonTree)adaptor.create(BACKSLASH365);
                    adaptor.addChild(root_0, BACKSLASH365_tree);
                    }
                    IDENT366=(Token)match(input,IDENT,FOLLOW_IDENT_in_group_qualifier5036); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT366_tree = (CommonTree)adaptor.create(IDENT366);
                    adaptor.addChild(root_0, IDENT366_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:812:6: BACKSLASH entity_ref
                    {
                    BACKSLASH367=(Token)match(input,BACKSLASH,FOLLOW_BACKSLASH_in_group_qualifier5043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BACKSLASH.add(BACKSLASH367);

                    pushFollow(FOLLOW_entity_ref_in_group_qualifier5046);
                    entity_ref368=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref368.getTree());


                    // AST REWRITE
                    // elements: entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 813:3: -> ^( GROUP_QUALIFIER entity_ref )
                    {
                        // Express.g:813:6: ^( GROUP_QUALIFIER entity_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_QUALIFIER, "GROUP_QUALIFIER"), root_1);

                        adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, group_qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_qualifier"

    public static class if_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_stmt"
    // Express.g:816:1: if_stmt : 'if' logical_expression 'then' ( stmt )+ ( else_clause )? 'end_if' SEMI -> ^( IF_STMT logical_expression ( stmt )+ ( else_clause )? ) ;
    public final if_stmt_return if_stmt() throws RecognitionException {
        if_stmt_return retval = new if_stmt_return();
        retval.start = input.LT(1);
        int if_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal369=null;
        Token string_literal371=null;
        Token string_literal374=null;
        Token SEMI375=null;
        logical_expression_return logical_expression370 = null;

        stmt_return stmt372 = null;

        else_clause_return else_clause373 = null;


        CommonTree string_literal369_tree=null;
        CommonTree string_literal371_tree=null;
        CommonTree string_literal374_tree=null;
        CommonTree SEMI375_tree=null;
        RewriteRuleTokenStream stream_330=new RewriteRuleTokenStream(adaptor,"token 330");
        RewriteRuleTokenStream stream_331=new RewriteRuleTokenStream(adaptor,"token 331");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_329=new RewriteRuleTokenStream(adaptor,"token 329");
        RewriteRuleSubtreeStream stream_logical_expression=new RewriteRuleSubtreeStream(adaptor,"rule logical_expression");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        RewriteRuleSubtreeStream stream_else_clause=new RewriteRuleSubtreeStream(adaptor,"rule else_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // Express.g:817:3: ( 'if' logical_expression 'then' ( stmt )+ ( else_clause )? 'end_if' SEMI -> ^( IF_STMT logical_expression ( stmt )+ ( else_clause )? ) )
            // Express.g:817:6: 'if' logical_expression 'then' ( stmt )+ ( else_clause )? 'end_if' SEMI
            {
            string_literal369=(Token)match(input,329,FOLLOW_329_in_if_stmt5070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_329.add(string_literal369);

            pushFollow(FOLLOW_logical_expression_in_if_stmt5072);
            logical_expression370=logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_logical_expression.add(logical_expression370.getTree());
            string_literal371=(Token)match(input,330,FOLLOW_330_in_if_stmt5075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_330.add(string_literal371);

            // Express.g:817:38: ( stmt )+
            int cnt109=0;
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( ((LA109_0>=PROCEDURE_INSERT && LA109_0<=PROCEDURE_REMOVE)||(LA109_0>=IDENT && LA109_0<=SEMI)||LA109_0==295||LA109_0==304||LA109_0==307||LA109_0==323||LA109_0==329||LA109_0==352||LA109_0==355||LA109_0==361) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_if_stmt5077);
            	    stmt372=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt372.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt109 >= 1 ) break loop109;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(109, input);
                        throw eee;
                }
                cnt109++;
            } while (true);

            // Express.g:817:45: ( else_clause )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==332) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // Express.g:0:0: else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_if_stmt5081);
                    else_clause373=else_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_else_clause.add(else_clause373.getTree());

                    }
                    break;

            }

            string_literal374=(Token)match(input,331,FOLLOW_331_in_if_stmt5085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_331.add(string_literal374);

            SEMI375=(Token)match(input,SEMI,FOLLOW_SEMI_in_if_stmt5088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI375);



            // AST REWRITE
            // elements: stmt, logical_expression, else_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 818:3: -> ^( IF_STMT logical_expression ( stmt )+ ( else_clause )? )
            {
                // Express.g:818:6: ^( IF_STMT logical_expression ( stmt )+ ( else_clause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_STMT, "IF_STMT"), root_1);

                adaptor.addChild(root_1, stream_logical_expression.nextTree());
                if ( !(stream_stmt.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();
                // Express.g:818:41: ( else_clause )?
                if ( stream_else_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_else_clause.nextTree());

                }
                stream_else_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, if_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_stmt"

    public static class else_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_clause"
    // Express.g:822:1: else_clause : 'else' ( stmt )+ -> ^( ELSE_CLAUSE ( stmt )+ ) ;
    public final else_clause_return else_clause() throws RecognitionException {
        else_clause_return retval = new else_clause_return();
        retval.start = input.LT(1);
        int else_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal376=null;
        stmt_return stmt377 = null;


        CommonTree string_literal376_tree=null;
        RewriteRuleTokenStream stream_332=new RewriteRuleTokenStream(adaptor,"token 332");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // Express.g:823:3: ( 'else' ( stmt )+ -> ^( ELSE_CLAUSE ( stmt )+ ) )
            // Express.g:823:6: 'else' ( stmt )+
            {
            string_literal376=(Token)match(input,332,FOLLOW_332_in_else_clause5120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_332.add(string_literal376);

            // Express.g:823:13: ( stmt )+
            int cnt111=0;
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( ((LA111_0>=PROCEDURE_INSERT && LA111_0<=PROCEDURE_REMOVE)||(LA111_0>=IDENT && LA111_0<=SEMI)||LA111_0==295||LA111_0==304||LA111_0==307||LA111_0==323||LA111_0==329||LA111_0==352||LA111_0==355||LA111_0==361) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_else_clause5122);
            	    stmt377=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt377.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);



            // AST REWRITE
            // elements: stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 824:3: -> ^( ELSE_CLAUSE ( stmt )+ )
            {
                // Express.g:824:6: ^( ELSE_CLAUSE ( stmt )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ELSE_CLAUSE, "ELSE_CLAUSE"), root_1);

                if ( !(stream_stmt.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, else_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_clause"

    public static class increment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "increment"
    // Express.g:827:1: increment : numeric_expression -> ^( INCREMENT numeric_expression ) ;
    public final increment_return increment() throws RecognitionException {
        increment_return retval = new increment_return();
        retval.start = input.LT(1);
        int increment_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression378 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // Express.g:828:3: ( numeric_expression -> ^( INCREMENT numeric_expression ) )
            // Express.g:828:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_increment5148);
            numeric_expression378=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression378.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 829:3: -> ^( INCREMENT numeric_expression )
            {
                // Express.g:829:6: ^( INCREMENT numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INCREMENT, "INCREMENT"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, increment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "increment"

    public static class increment_control_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "increment_control"
    // Express.g:832:1: increment_control : variable_id COLEQ bound_1 'to' bound_2 ( 'by' increment )? -> ^( INCREMENT_CONTROL variable_id bound_1 bound_2 ( increment )? ) ;
    public final increment_control_return increment_control() throws RecognitionException {
        increment_control_return retval = new increment_control_return();
        retval.start = input.LT(1);
        int increment_control_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COLEQ380=null;
        Token string_literal382=null;
        Token string_literal384=null;
        variable_id_return variable_id379 = null;

        bound_1_return bound_1381 = null;

        bound_2_return bound_2383 = null;

        increment_return increment385 = null;


        CommonTree COLEQ380_tree=null;
        CommonTree string_literal382_tree=null;
        CommonTree string_literal384_tree=null;
        RewriteRuleTokenStream stream_333=new RewriteRuleTokenStream(adaptor,"token 333");
        RewriteRuleTokenStream stream_334=new RewriteRuleTokenStream(adaptor,"token 334");
        RewriteRuleTokenStream stream_COLEQ=new RewriteRuleTokenStream(adaptor,"token COLEQ");
        RewriteRuleSubtreeStream stream_bound_1=new RewriteRuleSubtreeStream(adaptor,"rule bound_1");
        RewriteRuleSubtreeStream stream_bound_2=new RewriteRuleSubtreeStream(adaptor,"rule bound_2");
        RewriteRuleSubtreeStream stream_variable_id=new RewriteRuleSubtreeStream(adaptor,"rule variable_id");
        RewriteRuleSubtreeStream stream_increment=new RewriteRuleSubtreeStream(adaptor,"rule increment");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // Express.g:833:3: ( variable_id COLEQ bound_1 'to' bound_2 ( 'by' increment )? -> ^( INCREMENT_CONTROL variable_id bound_1 bound_2 ( increment )? ) )
            // Express.g:833:6: variable_id COLEQ bound_1 'to' bound_2 ( 'by' increment )?
            {
            pushFollow(FOLLOW_variable_id_in_increment_control5173);
            variable_id379=variable_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_id.add(variable_id379.getTree());
            COLEQ380=(Token)match(input,COLEQ,FOLLOW_COLEQ_in_increment_control5176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLEQ.add(COLEQ380);

            pushFollow(FOLLOW_bound_1_in_increment_control5179);
            bound_1381=bound_1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bound_1.add(bound_1381.getTree());
            string_literal382=(Token)match(input,333,FOLLOW_333_in_increment_control5182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_333.add(string_literal382);

            pushFollow(FOLLOW_bound_2_in_increment_control5185);
            bound_2383=bound_2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bound_2.add(bound_2383.getTree());
            // Express.g:833:50: ( 'by' increment )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==334) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // Express.g:833:53: 'by' increment
                    {
                    string_literal384=(Token)match(input,334,FOLLOW_334_in_increment_control5191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_334.add(string_literal384);

                    pushFollow(FOLLOW_increment_in_increment_control5194);
                    increment385=increment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_increment.add(increment385.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound_2, variable_id, bound_1, increment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 834:3: -> ^( INCREMENT_CONTROL variable_id bound_1 bound_2 ( increment )? )
            {
                // Express.g:834:6: ^( INCREMENT_CONTROL variable_id bound_1 bound_2 ( increment )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INCREMENT_CONTROL, "INCREMENT_CONTROL"), root_1);

                adaptor.addChild(root_1, stream_variable_id.nextTree());
                adaptor.addChild(root_1, stream_bound_1.nextTree());
                adaptor.addChild(root_1, stream_bound_2.nextTree());
                // Express.g:834:54: ( increment )?
                if ( stream_increment.hasNext() ) {
                    adaptor.addChild(root_1, stream_increment.nextTree());

                }
                stream_increment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, increment_control_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "increment_control"

    public static class index_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index"
    // Express.g:837:1: index : numeric_expression -> ^( INDEX numeric_expression ) ;
    public final index_return index() throws RecognitionException {
        index_return retval = new index_return();
        retval.start = input.LT(1);
        int index_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression386 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // Express.g:838:3: ( numeric_expression -> ^( INDEX numeric_expression ) )
            // Express.g:838:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_index5229);
            numeric_expression386=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression386.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 839:3: -> ^( INDEX numeric_expression )
            {
                // Express.g:839:6: ^( INDEX numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEX, "INDEX"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, index_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index"

    public static class index_1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_1"
    // Express.g:842:1: index_1 : index -> ^( INDEX_1 index ) ;
    public final index_1_return index_1() throws RecognitionException {
        index_1_return retval = new index_1_return();
        retval.start = input.LT(1);
        int index_1_StartIndex = input.index();
        CommonTree root_0 = null;

        index_return index387 = null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // Express.g:843:3: ( index -> ^( INDEX_1 index ) )
            // Express.g:843:6: index
            {
            pushFollow(FOLLOW_index_in_index_15254);
            index387=index();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_index.add(index387.getTree());


            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 844:3: -> ^( INDEX_1 index )
            {
                // Express.g:844:6: ^( INDEX_1 index )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEX_1, "INDEX_1"), root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, index_1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_1"

    public static class index_2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_2"
    // Express.g:847:1: index_2 : index -> ^( INDEX_2 index ) ;
    public final index_2_return index_2() throws RecognitionException {
        index_2_return retval = new index_2_return();
        retval.start = input.LT(1);
        int index_2_StartIndex = input.index();
        CommonTree root_0 = null;

        index_return index388 = null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // Express.g:848:3: ( index -> ^( INDEX_2 index ) )
            // Express.g:848:6: index
            {
            pushFollow(FOLLOW_index_in_index_25279);
            index388=index();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_index.add(index388.getTree());


            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 849:3: -> ^( INDEX_2 index )
            {
                // Express.g:849:6: ^( INDEX_2 index )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEX_2, "INDEX_2"), root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, index_2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_2"

    public static class index_qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_qualifier"
    // Express.g:852:1: index_qualifier : LBRACK index_1 ( COLON index_2 )? RBRACK -> ^( INDEX_QUALIFIER index_1 ( index_2 )? ) ;
    public final index_qualifier_return index_qualifier() throws RecognitionException {
        index_qualifier_return retval = new index_qualifier_return();
        retval.start = input.LT(1);
        int index_qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK389=null;
        Token COLON391=null;
        Token RBRACK393=null;
        index_1_return index_1390 = null;

        index_2_return index_2392 = null;


        CommonTree LBRACK389_tree=null;
        CommonTree COLON391_tree=null;
        CommonTree RBRACK393_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_index_1=new RewriteRuleSubtreeStream(adaptor,"rule index_1");
        RewriteRuleSubtreeStream stream_index_2=new RewriteRuleSubtreeStream(adaptor,"rule index_2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // Express.g:853:3: ( LBRACK index_1 ( COLON index_2 )? RBRACK -> ^( INDEX_QUALIFIER index_1 ( index_2 )? ) )
            // Express.g:853:6: LBRACK index_1 ( COLON index_2 )? RBRACK
            {
            LBRACK389=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_index_qualifier5304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK389);

            pushFollow(FOLLOW_index_1_in_index_qualifier5307);
            index_1390=index_1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_index_1.add(index_1390.getTree());
            // Express.g:853:23: ( COLON index_2 )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==COLON) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // Express.g:853:26: COLON index_2
                    {
                    COLON391=(Token)match(input,COLON,FOLLOW_COLON_in_index_qualifier5313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON391);

                    pushFollow(FOLLOW_index_2_in_index_qualifier5316);
                    index_2392=index_2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_index_2.add(index_2392.getTree());

                    }
                    break;

            }

            RBRACK393=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_index_qualifier5323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK393);



            // AST REWRITE
            // elements: index_2, index_1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 854:3: -> ^( INDEX_QUALIFIER index_1 ( index_2 )? )
            {
                // Express.g:854:6: ^( INDEX_QUALIFIER index_1 ( index_2 )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEX_QUALIFIER, "INDEX_QUALIFIER"), root_1);

                adaptor.addChild(root_1, stream_index_1.nextTree());
                // Express.g:854:32: ( index_2 )?
                if ( stream_index_2.hasNext() ) {
                    adaptor.addChild(root_1, stream_index_2.nextTree());

                }
                stream_index_2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, index_qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_qualifier"

    public static class integer_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer_type"
    // Express.g:857:1: integer_type : 'integer' -> ^( INTEGER_TYPE ) ;
    public final integer_type_return integer_type() throws RecognitionException {
        integer_type_return retval = new integer_type_return();
        retval.start = input.LT(1);
        int integer_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal394=null;

        CommonTree string_literal394_tree=null;
        RewriteRuleTokenStream stream_335=new RewriteRuleTokenStream(adaptor,"token 335");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // Express.g:858:3: ( 'integer' -> ^( INTEGER_TYPE ) )
            // Express.g:858:6: 'integer'
            {
            string_literal394=(Token)match(input,335,FOLLOW_335_in_integer_type5350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_335.add(string_literal394);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 859:3: -> ^( INTEGER_TYPE )
            {
                // Express.g:859:6: ^( INTEGER_TYPE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTEGER_TYPE, "INTEGER_TYPE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, integer_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integer_type"

    public static class interval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval"
    // Express.g:862:1: interval : LCURLY interval_low interval_op interval_item interval_op interval_high RCURLY -> ^( INTERVAL interval_low interval_op interval_item interval_op interval_high ) ;
    public final interval_return interval() throws RecognitionException {
        interval_return retval = new interval_return();
        retval.start = input.LT(1);
        int interval_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY395=null;
        Token RCURLY401=null;
        interval_low_return interval_low396 = null;

        interval_op_return interval_op397 = null;

        interval_item_return interval_item398 = null;

        interval_op_return interval_op399 = null;

        interval_high_return interval_high400 = null;


        CommonTree LCURLY395_tree=null;
        CommonTree RCURLY401_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interval_low=new RewriteRuleSubtreeStream(adaptor,"rule interval_low");
        RewriteRuleSubtreeStream stream_interval_item=new RewriteRuleSubtreeStream(adaptor,"rule interval_item");
        RewriteRuleSubtreeStream stream_interval_high=new RewriteRuleSubtreeStream(adaptor,"rule interval_high");
        RewriteRuleSubtreeStream stream_interval_op=new RewriteRuleSubtreeStream(adaptor,"rule interval_op");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // Express.g:863:3: ( LCURLY interval_low interval_op interval_item interval_op interval_high RCURLY -> ^( INTERVAL interval_low interval_op interval_item interval_op interval_high ) )
            // Express.g:863:6: LCURLY interval_low interval_op interval_item interval_op interval_high RCURLY
            {
            LCURLY395=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interval5372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY395);

            pushFollow(FOLLOW_interval_low_in_interval5375);
            interval_low396=interval_low();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interval_low.add(interval_low396.getTree());
            pushFollow(FOLLOW_interval_op_in_interval5378);
            interval_op397=interval_op();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interval_op.add(interval_op397.getTree());
            pushFollow(FOLLOW_interval_item_in_interval5381);
            interval_item398=interval_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interval_item.add(interval_item398.getTree());
            pushFollow(FOLLOW_interval_op_in_interval5384);
            interval_op399=interval_op();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interval_op.add(interval_op399.getTree());
            pushFollow(FOLLOW_interval_high_in_interval5387);
            interval_high400=interval_high();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interval_high.add(interval_high400.getTree());
            RCURLY401=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interval5390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY401);



            // AST REWRITE
            // elements: interval_item, interval_high, interval_low, interval_op, interval_op
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 864:3: -> ^( INTERVAL interval_low interval_op interval_item interval_op interval_high )
            {
                // Express.g:864:6: ^( INTERVAL interval_low interval_op interval_item interval_op interval_high )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_interval_low.nextTree());
                adaptor.addChild(root_1, stream_interval_op.nextTree());
                adaptor.addChild(root_1, stream_interval_item.nextTree());
                adaptor.addChild(root_1, stream_interval_op.nextTree());
                adaptor.addChild(root_1, stream_interval_high.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, interval_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval"

    public static class interval_high_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_high"
    // Express.g:867:1: interval_high : simple_expression -> ^( INTERVAL_HIGH simple_expression ) ;
    public final interval_high_return interval_high() throws RecognitionException {
        interval_high_return retval = new interval_high_return();
        retval.start = input.LT(1);
        int interval_high_StartIndex = input.index();
        CommonTree root_0 = null;

        simple_expression_return simple_expression402 = null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // Express.g:868:3: ( simple_expression -> ^( INTERVAL_HIGH simple_expression ) )
            // Express.g:868:6: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_interval_high5426);
            simple_expression402=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression402.getTree());


            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 869:3: -> ^( INTERVAL_HIGH simple_expression )
            {
                // Express.g:869:6: ^( INTERVAL_HIGH simple_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL_HIGH, "INTERVAL_HIGH"), root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, interval_high_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_high"

    public static class interval_item_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_item"
    // Express.g:872:1: interval_item : simple_expression -> ^( INTERVAL_ITEM simple_expression ) ;
    public final interval_item_return interval_item() throws RecognitionException {
        interval_item_return retval = new interval_item_return();
        retval.start = input.LT(1);
        int interval_item_StartIndex = input.index();
        CommonTree root_0 = null;

        simple_expression_return simple_expression403 = null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // Express.g:873:3: ( simple_expression -> ^( INTERVAL_ITEM simple_expression ) )
            // Express.g:873:6: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_interval_item5451);
            simple_expression403=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression403.getTree());


            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 874:3: -> ^( INTERVAL_ITEM simple_expression )
            {
                // Express.g:874:6: ^( INTERVAL_ITEM simple_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL_ITEM, "INTERVAL_ITEM"), root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, interval_item_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_item"

    public static class interval_low_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_low"
    // Express.g:877:1: interval_low : simple_expression -> ^( INTERVAL_LOW simple_expression ) ;
    public final interval_low_return interval_low() throws RecognitionException {
        interval_low_return retval = new interval_low_return();
        retval.start = input.LT(1);
        int interval_low_StartIndex = input.index();
        CommonTree root_0 = null;

        simple_expression_return simple_expression404 = null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // Express.g:878:3: ( simple_expression -> ^( INTERVAL_LOW simple_expression ) )
            // Express.g:878:6: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_interval_low5476);
            simple_expression404=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression404.getTree());


            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 879:3: -> ^( INTERVAL_LOW simple_expression )
            {
                // Express.g:879:6: ^( INTERVAL_LOW simple_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL_LOW, "INTERVAL_LOW"), root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, interval_low_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_low"

    public static class interval_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_op"
    // Express.g:882:1: interval_op : ( LT -> ^( INTERVAL_OP LT ) | LE -> ^( INTERVAL_OP LE ) );
    public final interval_op_return interval_op() throws RecognitionException {
        interval_op_return retval = new interval_op_return();
        retval.start = input.LT(1);
        int interval_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LT405=null;
        Token LE406=null;

        CommonTree LT405_tree=null;
        CommonTree LE406_tree=null;
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // Express.g:883:3: ( LT -> ^( INTERVAL_OP LT ) | LE -> ^( INTERVAL_OP LE ) )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==LT) ) {
                alt114=1;
            }
            else if ( (LA114_0==LE) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // Express.g:883:6: LT
                    {
                    LT405=(Token)match(input,LT,FOLLOW_LT_in_interval_op5501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT.add(LT405);



                    // AST REWRITE
                    // elements: LT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 883:9: -> ^( INTERVAL_OP LT )
                    {
                        // Express.g:883:12: ^( INTERVAL_OP LT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL_OP, "INTERVAL_OP"), root_1);

                        adaptor.addChild(root_1, stream_LT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:884:6: LE
                    {
                    LE406=(Token)match(input,LE,FOLLOW_LE_in_interval_op5518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LE.add(LE406);



                    // AST REWRITE
                    // elements: LE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 884:9: -> ^( INTERVAL_OP LE )
                    {
                        // Express.g:884:12: ^( INTERVAL_OP LE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL_OP, "INTERVAL_OP"), root_1);

                        adaptor.addChild(root_1, stream_LE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, interval_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_op"

    public static class label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // Express.g:887:1: label : IDENT -> ^( LABEL IDENT ) ;
    public final label_return label() throws RecognitionException {
        label_return retval = new label_return();
        retval.start = input.LT(1);
        int label_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT407=null;

        CommonTree IDENT407_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // Express.g:888:3: ( IDENT -> ^( LABEL IDENT ) )
            // Express.g:888:6: IDENT
            {
            IDENT407=(Token)match(input,IDENT,FOLLOW_IDENT_in_label5540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT407);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 889:3: -> ^( LABEL IDENT )
            {
                // Express.g:889:6: ^( LABEL IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABEL, "LABEL"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class list_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_type"
    // Express.g:892:1: list_type : 'list' ( bound_spec )? 'of' ( 'unique' )? base_type -> ^( LIST_TYPE ( bound_spec )? ( 'unique' )? base_type ) ;
    public final list_type_return list_type() throws RecognitionException {
        list_type_return retval = new list_type_return();
        retval.start = input.LT(1);
        int list_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal408=null;
        Token string_literal410=null;
        Token string_literal411=null;
        bound_spec_return bound_spec409 = null;

        base_type_return base_type412 = null;


        CommonTree string_literal408_tree=null;
        CommonTree string_literal410_tree=null;
        CommonTree string_literal411_tree=null;
        RewriteRuleTokenStream stream_300=new RewriteRuleTokenStream(adaptor,"token 300");
        RewriteRuleTokenStream stream_326=new RewriteRuleTokenStream(adaptor,"token 326");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // Express.g:893:3: ( 'list' ( bound_spec )? 'of' ( 'unique' )? base_type -> ^( LIST_TYPE ( bound_spec )? ( 'unique' )? base_type ) )
            // Express.g:893:6: 'list' ( bound_spec )? 'of' ( 'unique' )? base_type
            {
            string_literal408=(Token)match(input,326,FOLLOW_326_in_list_type5564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_326.add(string_literal408);

            // Express.g:893:14: ( bound_spec )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==LBRACK) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_list_type5567);
                    bound_spec409=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec409.getTree());

                    }
                    break;

            }

            string_literal410=(Token)match(input,294,FOLLOW_294_in_list_type5571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal410);

            // Express.g:893:33: ( 'unique' )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==300) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // Express.g:0:0: 'unique'
                    {
                    string_literal411=(Token)match(input,300,FOLLOW_300_in_list_type5574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_300.add(string_literal411);


                    }
                    break;

            }

            pushFollow(FOLLOW_base_type_in_list_type5578);
            base_type412=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type412.getTree());


            // AST REWRITE
            // elements: bound_spec, 300, base_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 894:3: -> ^( LIST_TYPE ( bound_spec )? ( 'unique' )? base_type )
            {
                // Express.g:894:6: ^( LIST_TYPE ( bound_spec )? ( 'unique' )? base_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_TYPE, "LIST_TYPE"), root_1);

                // Express.g:894:18: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                // Express.g:894:30: ( 'unique' )?
                if ( stream_300.hasNext() ) {
                    adaptor.addChild(root_1, stream_300.nextNode());

                }
                stream_300.reset();
                adaptor.addChild(root_1, stream_base_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, list_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "list_type"

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // Express.g:898:1: literal : ( FLOAT -> ^( LITERAL ^( REAL_LITERAL FLOAT ) ) | INT -> ^( LITERAL ^( INTEGER_LITERAL INT ) ) | logical_literal -> ^( LITERAL logical_literal ) | STRING -> ^( LITERAL ^( STRING_LITERAL STRING ) ) );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FLOAT413=null;
        Token INT414=null;
        Token STRING416=null;
        logical_literal_return logical_literal415 = null;


        CommonTree FLOAT413_tree=null;
        CommonTree INT414_tree=null;
        CommonTree STRING416_tree=null;
        RewriteRuleTokenStream stream_FLOAT=new RewriteRuleTokenStream(adaptor,"token FLOAT");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_INT=new RewriteRuleTokenStream(adaptor,"token INT");
        RewriteRuleSubtreeStream stream_logical_literal=new RewriteRuleSubtreeStream(adaptor,"rule logical_literal");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // Express.g:899:3: ( FLOAT -> ^( LITERAL ^( REAL_LITERAL FLOAT ) ) | INT -> ^( LITERAL ^( INTEGER_LITERAL INT ) ) | logical_literal -> ^( LITERAL logical_literal ) | STRING -> ^( LITERAL ^( STRING_LITERAL STRING ) ) )
            int alt117=4;
            switch ( input.LA(1) ) {
            case FLOAT:
                {
                alt117=1;
                }
                break;
            case INT:
                {
                alt117=2;
                }
                break;
            case 338:
            case 339:
            case 340:
                {
                alt117=3;
                }
                break;
            case STRING:
                {
                alt117=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }

            switch (alt117) {
                case 1 :
                    // Express.g:899:6: FLOAT
                    {
                    FLOAT413=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FLOAT.add(FLOAT413);



                    // AST REWRITE
                    // elements: FLOAT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 899:12: -> ^( LITERAL ^( REAL_LITERAL FLOAT ) )
                    {
                        // Express.g:899:15: ^( LITERAL ^( REAL_LITERAL FLOAT ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LITERAL, "LITERAL"), root_1);

                        // Express.g:899:25: ^( REAL_LITERAL FLOAT )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REAL_LITERAL, "REAL_LITERAL"), root_2);

                        adaptor.addChild(root_2, stream_FLOAT.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:900:6: INT
                    {
                    INT414=(Token)match(input,INT,FOLLOW_INT_in_literal5631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INT.add(INT414);



                    // AST REWRITE
                    // elements: INT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 900:10: -> ^( LITERAL ^( INTEGER_LITERAL INT ) )
                    {
                        // Express.g:900:13: ^( LITERAL ^( INTEGER_LITERAL INT ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LITERAL, "LITERAL"), root_1);

                        // Express.g:900:23: ^( INTEGER_LITERAL INT )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTEGER_LITERAL, "INTEGER_LITERAL"), root_2);

                        adaptor.addChild(root_2, stream_INT.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:901:6: logical_literal
                    {
                    pushFollow(FOLLOW_logical_literal_in_literal5650);
                    logical_literal415=logical_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logical_literal.add(logical_literal415.getTree());


                    // AST REWRITE
                    // elements: logical_literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 901:22: -> ^( LITERAL logical_literal )
                    {
                        // Express.g:901:25: ^( LITERAL logical_literal )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LITERAL, "LITERAL"), root_1);

                        adaptor.addChild(root_1, stream_logical_literal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:902:6: STRING
                    {
                    STRING416=(Token)match(input,STRING,FOLLOW_STRING_in_literal5666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(STRING416);



                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 902:13: -> ^( LITERAL ^( STRING_LITERAL STRING ) )
                    {
                        // Express.g:902:16: ^( LITERAL ^( STRING_LITERAL STRING ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LITERAL, "LITERAL"), root_1);

                        // Express.g:902:26: ^( STRING_LITERAL STRING )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_LITERAL, "STRING_LITERAL"), root_2);

                        adaptor.addChild(root_2, stream_STRING.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class local_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_decl"
    // Express.g:905:1: local_decl : 'local' ( local_variable )+ 'end_local' SEMI -> ^( LOCAL_DECL ( local_variable )+ ) ;
    public final local_decl_return local_decl() throws RecognitionException {
        local_decl_return retval = new local_decl_return();
        retval.start = input.LT(1);
        int local_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal417=null;
        Token string_literal419=null;
        Token SEMI420=null;
        local_variable_return local_variable418 = null;


        CommonTree string_literal417_tree=null;
        CommonTree string_literal419_tree=null;
        CommonTree SEMI420_tree=null;
        RewriteRuleTokenStream stream_336=new RewriteRuleTokenStream(adaptor,"token 336");
        RewriteRuleTokenStream stream_337=new RewriteRuleTokenStream(adaptor,"token 337");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_local_variable=new RewriteRuleSubtreeStream(adaptor,"rule local_variable");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // Express.g:906:3: ( 'local' ( local_variable )+ 'end_local' SEMI -> ^( LOCAL_DECL ( local_variable )+ ) )
            // Express.g:906:6: 'local' ( local_variable )+ 'end_local' SEMI
            {
            string_literal417=(Token)match(input,336,FOLLOW_336_in_local_decl5693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_336.add(string_literal417);

            // Express.g:906:15: ( local_variable )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==IDENT) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // Express.g:0:0: local_variable
            	    {
            	    pushFollow(FOLLOW_local_variable_in_local_decl5696);
            	    local_variable418=local_variable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_local_variable.add(local_variable418.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            string_literal419=(Token)match(input,337,FOLLOW_337_in_local_decl5699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_337.add(string_literal419);

            SEMI420=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_decl5702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI420);



            // AST REWRITE
            // elements: local_variable
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 907:3: -> ^( LOCAL_DECL ( local_variable )+ )
            {
                // Express.g:907:6: ^( LOCAL_DECL ( local_variable )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOCAL_DECL, "LOCAL_DECL"), root_1);

                if ( !(stream_local_variable.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_local_variable.hasNext() ) {
                    adaptor.addChild(root_1, stream_local_variable.nextTree());

                }
                stream_local_variable.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, local_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_decl"

    public static class local_variable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable"
    // Express.g:910:1: local_variable : variable_id ( COMMA variable_id )* COLON parameter_type ( COLEQ expression )? SEMI -> ^( LOCAL_VARIABLE ( variable_id )+ parameter_type ( expression )? ) ;
    public final local_variable_return local_variable() throws RecognitionException {
        local_variable_return retval = new local_variable_return();
        retval.start = input.LT(1);
        int local_variable_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA422=null;
        Token COLON424=null;
        Token COLEQ426=null;
        Token SEMI428=null;
        variable_id_return variable_id421 = null;

        variable_id_return variable_id423 = null;

        parameter_type_return parameter_type425 = null;

        expression_return expression427 = null;


        CommonTree COMMA422_tree=null;
        CommonTree COLON424_tree=null;
        CommonTree COLEQ426_tree=null;
        CommonTree SEMI428_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_COLEQ=new RewriteRuleTokenStream(adaptor,"token COLEQ");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_variable_id=new RewriteRuleSubtreeStream(adaptor,"rule variable_id");
        RewriteRuleSubtreeStream stream_parameter_type=new RewriteRuleSubtreeStream(adaptor,"rule parameter_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // Express.g:911:3: ( variable_id ( COMMA variable_id )* COLON parameter_type ( COLEQ expression )? SEMI -> ^( LOCAL_VARIABLE ( variable_id )+ parameter_type ( expression )? ) )
            // Express.g:911:6: variable_id ( COMMA variable_id )* COLON parameter_type ( COLEQ expression )? SEMI
            {
            pushFollow(FOLLOW_variable_id_in_local_variable5728);
            variable_id421=variable_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_id.add(variable_id421.getTree());
            // Express.g:911:19: ( COMMA variable_id )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // Express.g:911:22: COMMA variable_id
            	    {
            	    COMMA422=(Token)match(input,COMMA,FOLLOW_COMMA_in_local_variable5734); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA422);

            	    pushFollow(FOLLOW_variable_id_in_local_variable5737);
            	    variable_id423=variable_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variable_id.add(variable_id423.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            COLON424=(Token)match(input,COLON,FOLLOW_COLON_in_local_variable5744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON424);

            pushFollow(FOLLOW_parameter_type_in_local_variable5747);
            parameter_type425=parameter_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_type.add(parameter_type425.getTree());
            // Express.g:911:69: ( COLEQ expression )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==COLEQ) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // Express.g:911:72: COLEQ expression
                    {
                    COLEQ426=(Token)match(input,COLEQ,FOLLOW_COLEQ_in_local_variable5753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLEQ.add(COLEQ426);

                    pushFollow(FOLLOW_expression_in_local_variable5756);
                    expression427=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression427.getTree());

                    }
                    break;

            }

            SEMI428=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable5763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI428);



            // AST REWRITE
            // elements: parameter_type, variable_id, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 912:3: -> ^( LOCAL_VARIABLE ( variable_id )+ parameter_type ( expression )? )
            {
                // Express.g:912:6: ^( LOCAL_VARIABLE ( variable_id )+ parameter_type ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOCAL_VARIABLE, "LOCAL_VARIABLE"), root_1);

                if ( !(stream_variable_id.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variable_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_variable_id.nextTree());

                }
                stream_variable_id.reset();
                adaptor.addChild(root_1, stream_parameter_type.nextTree());
                // Express.g:912:51: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, local_variable_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable"

    public static class logical_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_expression"
    // Express.g:915:1: logical_expression : expression -> ^( LOGICAL_EXPRESSION expression ) ;
    public final logical_expression_return logical_expression() throws RecognitionException {
        logical_expression_return retval = new logical_expression_return();
        retval.start = input.LT(1);
        int logical_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        expression_return expression429 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // Express.g:916:3: ( expression -> ^( LOGICAL_EXPRESSION expression ) )
            // Express.g:916:6: expression
            {
            pushFollow(FOLLOW_expression_in_logical_expression5793);
            expression429=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression429.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 917:3: -> ^( LOGICAL_EXPRESSION expression )
            {
                // Express.g:917:6: ^( LOGICAL_EXPRESSION expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_EXPRESSION, "LOGICAL_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, logical_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_expression"

    public static class logical_literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_literal"
    // Express.g:920:1: logical_literal : ( 'false' -> ^( LOGICAL_LITERAL 'false' ) | 'true' -> ^( LOGICAL_LITERAL 'true' ) | 'unknown' -> ^( LOGICAL_LITERAL 'unknown' ) );
    public final logical_literal_return logical_literal() throws RecognitionException {
        logical_literal_return retval = new logical_literal_return();
        retval.start = input.LT(1);
        int logical_literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal430=null;
        Token string_literal431=null;
        Token string_literal432=null;

        CommonTree string_literal430_tree=null;
        CommonTree string_literal431_tree=null;
        CommonTree string_literal432_tree=null;
        RewriteRuleTokenStream stream_338=new RewriteRuleTokenStream(adaptor,"token 338");
        RewriteRuleTokenStream stream_339=new RewriteRuleTokenStream(adaptor,"token 339");
        RewriteRuleTokenStream stream_340=new RewriteRuleTokenStream(adaptor,"token 340");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // Express.g:921:3: ( 'false' -> ^( LOGICAL_LITERAL 'false' ) | 'true' -> ^( LOGICAL_LITERAL 'true' ) | 'unknown' -> ^( LOGICAL_LITERAL 'unknown' ) )
            int alt121=3;
            switch ( input.LA(1) ) {
            case 338:
                {
                alt121=1;
                }
                break;
            case 339:
                {
                alt121=2;
                }
                break;
            case 340:
                {
                alt121=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // Express.g:921:6: 'false'
                    {
                    string_literal430=(Token)match(input,338,FOLLOW_338_in_logical_literal5818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_338.add(string_literal430);



                    // AST REWRITE
                    // elements: 338
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 921:14: -> ^( LOGICAL_LITERAL 'false' )
                    {
                        // Express.g:921:17: ^( LOGICAL_LITERAL 'false' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_LITERAL, "LOGICAL_LITERAL"), root_1);

                        adaptor.addChild(root_1, stream_338.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:922:6: 'true'
                    {
                    string_literal431=(Token)match(input,339,FOLLOW_339_in_logical_literal5833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_339.add(string_literal431);



                    // AST REWRITE
                    // elements: 339
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 922:13: -> ^( LOGICAL_LITERAL 'true' )
                    {
                        // Express.g:922:16: ^( LOGICAL_LITERAL 'true' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_LITERAL, "LOGICAL_LITERAL"), root_1);

                        adaptor.addChild(root_1, stream_339.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:923:6: 'unknown'
                    {
                    string_literal432=(Token)match(input,340,FOLLOW_340_in_logical_literal5848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_340.add(string_literal432);



                    // AST REWRITE
                    // elements: 340
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 923:16: -> ^( LOGICAL_LITERAL 'unknown' )
                    {
                        // Express.g:923:19: ^( LOGICAL_LITERAL 'unknown' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_LITERAL, "LOGICAL_LITERAL"), root_1);

                        adaptor.addChild(root_1, stream_340.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, logical_literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_literal"

    public static class logical_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_type"
    // Express.g:926:1: logical_type : 'logical' -> ^( LOGICAL_TYPE ) ;
    public final logical_type_return logical_type() throws RecognitionException {
        logical_type_return retval = new logical_type_return();
        retval.start = input.LT(1);
        int logical_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal433=null;

        CommonTree string_literal433_tree=null;
        RewriteRuleTokenStream stream_341=new RewriteRuleTokenStream(adaptor,"token 341");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // Express.g:927:3: ( 'logical' -> ^( LOGICAL_TYPE ) )
            // Express.g:927:6: 'logical'
            {
            string_literal433=(Token)match(input,341,FOLLOW_341_in_logical_type5870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_341.add(string_literal433);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 928:3: -> ^( LOGICAL_TYPE )
            {
                // Express.g:928:6: ^( LOGICAL_TYPE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOGICAL_TYPE, "LOGICAL_TYPE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, logical_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logical_type"

    public static class multiplication_like_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplication_like_op"
    // Express.g:931:1: multiplication_like_op : ( STAR -> ^( MULTIPLICATION_LIKE_OP STAR ) | DIVSIGN -> ^( MULTIPLICATION_LIKE_OP DIVSIGN ) | DIV -> ^( MULTIPLICATION_LIKE_OP DIV ) | MOD -> ^( MULTIPLICATION_LIKE_OP MOD ) | AND -> ^( MULTIPLICATION_LIKE_OP AND ) | DOUBLEBAR -> ^( MULTIPLICATION_LIKE_OP DOUBLEBAR ) );
    public final multiplication_like_op_return multiplication_like_op() throws RecognitionException {
        multiplication_like_op_return retval = new multiplication_like_op_return();
        retval.start = input.LT(1);
        int multiplication_like_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR434=null;
        Token DIVSIGN435=null;
        Token DIV436=null;
        Token MOD437=null;
        Token AND438=null;
        Token DOUBLEBAR439=null;

        CommonTree STAR434_tree=null;
        CommonTree DIVSIGN435_tree=null;
        CommonTree DIV436_tree=null;
        CommonTree MOD437_tree=null;
        CommonTree AND438_tree=null;
        CommonTree DOUBLEBAR439_tree=null;
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleTokenStream stream_DIVSIGN=new RewriteRuleTokenStream(adaptor,"token DIVSIGN");
        RewriteRuleTokenStream stream_MOD=new RewriteRuleTokenStream(adaptor,"token MOD");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_DOUBLEBAR=new RewriteRuleTokenStream(adaptor,"token DOUBLEBAR");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // Express.g:932:3: ( STAR -> ^( MULTIPLICATION_LIKE_OP STAR ) | DIVSIGN -> ^( MULTIPLICATION_LIKE_OP DIVSIGN ) | DIV -> ^( MULTIPLICATION_LIKE_OP DIV ) | MOD -> ^( MULTIPLICATION_LIKE_OP MOD ) | AND -> ^( MULTIPLICATION_LIKE_OP AND ) | DOUBLEBAR -> ^( MULTIPLICATION_LIKE_OP DOUBLEBAR ) )
            int alt122=6;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt122=1;
                }
                break;
            case DIVSIGN:
                {
                alt122=2;
                }
                break;
            case DIV:
                {
                alt122=3;
                }
                break;
            case MOD:
                {
                alt122=4;
                }
                break;
            case AND:
                {
                alt122=5;
                }
                break;
            case DOUBLEBAR:
                {
                alt122=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // Express.g:932:6: STAR
                    {
                    STAR434=(Token)match(input,STAR,FOLLOW_STAR_in_multiplication_like_op5892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR434);



                    // AST REWRITE
                    // elements: STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 932:11: -> ^( MULTIPLICATION_LIKE_OP STAR )
                    {
                        // Express.g:932:14: ^( MULTIPLICATION_LIKE_OP STAR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MULTIPLICATION_LIKE_OP, "MULTIPLICATION_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_STAR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:933:6: DIVSIGN
                    {
                    DIVSIGN435=(Token)match(input,DIVSIGN,FOLLOW_DIVSIGN_in_multiplication_like_op5907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIVSIGN.add(DIVSIGN435);



                    // AST REWRITE
                    // elements: DIVSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 933:14: -> ^( MULTIPLICATION_LIKE_OP DIVSIGN )
                    {
                        // Express.g:933:17: ^( MULTIPLICATION_LIKE_OP DIVSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MULTIPLICATION_LIKE_OP, "MULTIPLICATION_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_DIVSIGN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:934:6: DIV
                    {
                    DIV436=(Token)match(input,DIV,FOLLOW_DIV_in_multiplication_like_op5922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIV.add(DIV436);



                    // AST REWRITE
                    // elements: DIV
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 934:10: -> ^( MULTIPLICATION_LIKE_OP DIV )
                    {
                        // Express.g:934:13: ^( MULTIPLICATION_LIKE_OP DIV )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MULTIPLICATION_LIKE_OP, "MULTIPLICATION_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_DIV.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:935:6: MOD
                    {
                    MOD437=(Token)match(input,MOD,FOLLOW_MOD_in_multiplication_like_op5937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MOD.add(MOD437);



                    // AST REWRITE
                    // elements: MOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 935:10: -> ^( MULTIPLICATION_LIKE_OP MOD )
                    {
                        // Express.g:935:13: ^( MULTIPLICATION_LIKE_OP MOD )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MULTIPLICATION_LIKE_OP, "MULTIPLICATION_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_MOD.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:936:6: AND
                    {
                    AND438=(Token)match(input,AND,FOLLOW_AND_in_multiplication_like_op5952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND.add(AND438);



                    // AST REWRITE
                    // elements: AND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 936:10: -> ^( MULTIPLICATION_LIKE_OP AND )
                    {
                        // Express.g:936:13: ^( MULTIPLICATION_LIKE_OP AND )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MULTIPLICATION_LIKE_OP, "MULTIPLICATION_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_AND.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:937:6: DOUBLEBAR
                    {
                    DOUBLEBAR439=(Token)match(input,DOUBLEBAR,FOLLOW_DOUBLEBAR_in_multiplication_like_op5967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLEBAR.add(DOUBLEBAR439);



                    // AST REWRITE
                    // elements: DOUBLEBAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:16: -> ^( MULTIPLICATION_LIKE_OP DOUBLEBAR )
                    {
                        // Express.g:937:19: ^( MULTIPLICATION_LIKE_OP DOUBLEBAR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MULTIPLICATION_LIKE_OP, "MULTIPLICATION_LIKE_OP"), root_1);

                        adaptor.addChild(root_1, stream_DOUBLEBAR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, multiplication_like_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplication_like_op"

    public static class named_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_types"
    // Express.g:940:1: named_types : ({...}? => IDENT | entity_ref -> ^( NAMED_TYPES entity_ref ) | type_ref -> ^( NAMED_TYPES type_ref ) );
    public final named_types_return named_types() throws RecognitionException {
        named_types_return retval = new named_types_return();
        retval.start = input.LT(1);
        int named_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT440=null;
        entity_ref_return entity_ref441 = null;

        type_ref_return type_ref442 = null;


        CommonTree IDENT440_tree=null;
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        RewriteRuleSubtreeStream stream_type_ref=new RewriteRuleSubtreeStream(adaptor,"rule type_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // Express.g:941:3: ({...}? => IDENT | entity_ref -> ^( NAMED_TYPES entity_ref ) | type_ref -> ^( NAMED_TYPES type_ref ) )
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==IDENT) ) {
                int LA123_1 = input.LA(2);

                if ( ((synpred176_Express()&&( isFirst ))) ) {
                    alt123=1;
                }
                else if ( (((synpred177_Express()&&(nextIs(ENTITY_IDENT)))||(synpred177_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred177_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred177_Express()&&(nextIs(ENTITY_VAR_IDENT))))) ) {
                    alt123=2;
                }
                else if ( (((nextIs(TYPE_IDENT))||(nextIs(TYPE_VAR_IDENT))||(nextIs(TYPE_ATTR_IDENT))||(nextIs(TYPE_PARAM_IDENT)))) ) {
                    alt123=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // Express.g:941:5: {...}? => IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "named_types", " isFirst ");
                    }
                    IDENT440=(Token)match(input,IDENT,FOLLOW_IDENT_in_named_types5993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT440_tree = (CommonTree)adaptor.create(IDENT440);
                    adaptor.addChild(root_0, IDENT440_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:942:6: entity_ref
                    {
                    pushFollow(FOLLOW_entity_ref_in_named_types6000);
                    entity_ref441=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref441.getTree());


                    // AST REWRITE
                    // elements: entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 942:17: -> ^( NAMED_TYPES entity_ref )
                    {
                        // Express.g:942:20: ^( NAMED_TYPES entity_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAMED_TYPES, "NAMED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:943:6: type_ref
                    {
                    pushFollow(FOLLOW_type_ref_in_named_types6015);
                    type_ref442=type_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_ref.add(type_ref442.getTree());


                    // AST REWRITE
                    // elements: type_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 943:15: -> ^( NAMED_TYPES type_ref )
                    {
                        // Express.g:943:18: ^( NAMED_TYPES type_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAMED_TYPES, "NAMED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_type_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, named_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "named_types"

    public static class null_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "null_stmt"
    // Express.g:947:1: null_stmt : SEMI -> ^( NULL_STMT ) ;
    public final null_stmt_return null_stmt() throws RecognitionException {
        null_stmt_return retval = new null_stmt_return();
        retval.start = input.LT(1);
        int null_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI443=null;

        CommonTree SEMI443_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // Express.g:948:3: ( SEMI -> ^( NULL_STMT ) )
            // Express.g:948:6: SEMI
            {
            SEMI443=(Token)match(input,SEMI,FOLLOW_SEMI_in_null_stmt6044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI443);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 948:11: -> ^( NULL_STMT )
            {
                // Express.g:948:14: ^( NULL_STMT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_STMT, "NULL_STMT"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, null_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "null_stmt"

    public static class number_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number_type"
    // Express.g:951:1: number_type : 'number' -> ^( NUMBER_TYPE ) ;
    public final number_type_return number_type() throws RecognitionException {
        number_type_return retval = new number_type_return();
        retval.start = input.LT(1);
        int number_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal444=null;

        CommonTree string_literal444_tree=null;
        RewriteRuleTokenStream stream_342=new RewriteRuleTokenStream(adaptor,"token 342");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // Express.g:952:3: ( 'number' -> ^( NUMBER_TYPE ) )
            // Express.g:952:6: 'number'
            {
            string_literal444=(Token)match(input,342,FOLLOW_342_in_number_type6064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_342.add(string_literal444);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 952:15: -> ^( NUMBER_TYPE )
            {
                // Express.g:952:18: ^( NUMBER_TYPE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBER_TYPE, "NUMBER_TYPE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, number_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "number_type"

    public static class numeric_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric_expression"
    // Express.g:955:1: numeric_expression : simple_expression -> ^( NUMERIC_EXPRESSION simple_expression ) ;
    public final numeric_expression_return numeric_expression() throws RecognitionException {
        numeric_expression_return retval = new numeric_expression_return();
        retval.start = input.LT(1);
        int numeric_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        simple_expression_return simple_expression445 = null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // Express.g:956:3: ( simple_expression -> ^( NUMERIC_EXPRESSION simple_expression ) )
            // Express.g:956:6: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_numeric_expression6084);
            simple_expression445=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression445.getTree());


            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 956:24: -> ^( NUMERIC_EXPRESSION simple_expression )
            {
                // Express.g:956:27: ^( NUMERIC_EXPRESSION simple_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_EXPRESSION, "NUMERIC_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, numeric_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric_expression"

    public static class one_of_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "one_of"
    // Express.g:959:1: one_of : 'oneof' LPAREN supertype_expression ( COMMA supertype_expression )* RPAREN -> ^( ONE_OF ( supertype_expression )+ ) ;
    public final one_of_return one_of() throws RecognitionException {
        one_of_return retval = new one_of_return();
        retval.start = input.LT(1);
        int one_of_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal446=null;
        Token LPAREN447=null;
        Token COMMA449=null;
        Token RPAREN451=null;
        supertype_expression_return supertype_expression448 = null;

        supertype_expression_return supertype_expression450 = null;


        CommonTree string_literal446_tree=null;
        CommonTree LPAREN447_tree=null;
        CommonTree COMMA449_tree=null;
        CommonTree RPAREN451_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_343=new RewriteRuleTokenStream(adaptor,"token 343");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_supertype_expression=new RewriteRuleSubtreeStream(adaptor,"rule supertype_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // Express.g:960:3: ( 'oneof' LPAREN supertype_expression ( COMMA supertype_expression )* RPAREN -> ^( ONE_OF ( supertype_expression )+ ) )
            // Express.g:960:6: 'oneof' LPAREN supertype_expression ( COMMA supertype_expression )* RPAREN
            {
            string_literal446=(Token)match(input,343,FOLLOW_343_in_one_of6106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_343.add(string_literal446);

            LPAREN447=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_one_of6109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN447);

            pushFollow(FOLLOW_supertype_expression_in_one_of6112);
            supertype_expression448=supertype_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_supertype_expression.add(supertype_expression448.getTree());
            // Express.g:960:45: ( COMMA supertype_expression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==COMMA) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // Express.g:960:48: COMMA supertype_expression
            	    {
            	    COMMA449=(Token)match(input,COMMA,FOLLOW_COMMA_in_one_of6118); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA449);

            	    pushFollow(FOLLOW_supertype_expression_in_one_of6121);
            	    supertype_expression450=supertype_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_supertype_expression.add(supertype_expression450.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            RPAREN451=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_one_of6128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN451);



            // AST REWRITE
            // elements: supertype_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 961:3: -> ^( ONE_OF ( supertype_expression )+ )
            {
                // Express.g:961:6: ^( ONE_OF ( supertype_expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ONE_OF, "ONE_OF"), root_1);

                if ( !(stream_supertype_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_supertype_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_supertype_expression.nextTree());

                }
                stream_supertype_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, one_of_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "one_of"

    public static class parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter"
    // Express.g:964:1: parameter : expression -> ^( PARAMETER expression ) ;
    public final parameter_return parameter() throws RecognitionException {
        parameter_return retval = new parameter_return();
        retval.start = input.LT(1);
        int parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        expression_return expression452 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // Express.g:965:3: ( expression -> ^( PARAMETER expression ) )
            // Express.g:965:6: expression
            {
            pushFollow(FOLLOW_expression_in_parameter6153);
            expression452=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression452.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 965:17: -> ^( PARAMETER expression )
            {
                // Express.g:965:20: ^( PARAMETER expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER, "PARAMETER"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter"

    public static class parameter_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_id"
    // Express.g:968:1: parameter_id : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( PARAMETER_ID IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_ID IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_ID IDENT[$id] ) );
    public final parameter_id_return parameter_id() throws RecognitionException {
        parameter_id_return retval = new parameter_id_return();
        retval.start = input.LT(1);
        int parameter_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // Express.g:969:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( PARAMETER_ID IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_ID IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_ID IDENT[$id] ) )
            int alt125=4;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IDENT) ) {
                int LA125_1 = input.LA(2);

                if ( ((synpred179_Express()&&( isFirst ))) ) {
                    alt125=1;
                }
                else if ( ((synpred180_Express()&&(nextIs(PARAMETER_IDENT)))) ) {
                    alt125=2;
                }
                else if ( ((synpred181_Express()&&(nextIs(ENTITY_PARAM_IDENT)))) ) {
                    alt125=3;
                }
                else if ( ((nextIs(TYPE_PARAM_IDENT))) ) {
                    alt125=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // Express.g:969:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_id6179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addId((id!=null?id.getText():null), PARAMETER_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:970:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(PARAMETER_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_id", "nextIs(PARAMETER_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_id6191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 970:41: -> ^( PARAMETER_ID IDENT[$id] )
                    {
                        // Express.g:970:44: ^( PARAMETER_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_ID, "PARAMETER_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:971:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_id", "nextIs(ENTITY_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_id6210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 971:44: -> ^( PARAMETER_ID IDENT[$id] )
                    {
                        // Express.g:971:47: ^( PARAMETER_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_ID, "PARAMETER_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:972:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_id", "nextIs(TYPE_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_id6229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 972:42: -> ^( PARAMETER_ID IDENT[$id] )
                    {
                        // Express.g:972:45: ^( PARAMETER_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_ID, "PARAMETER_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, parameter_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_id"

    public static class parameter_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type"
    // Express.g:975:1: parameter_type : ( generalized_types -> ^( PARAMETER_TYPE generalized_types ) | named_types -> ^( PARAMETER_TYPE named_types ) | simple_types -> ^( PARAMETER_TYPE simple_types ) );
    public final parameter_type_return parameter_type() throws RecognitionException {
        parameter_type_return retval = new parameter_type_return();
        retval.start = input.LT(1);
        int parameter_type_StartIndex = input.index();
        CommonTree root_0 = null;

        generalized_types_return generalized_types453 = null;

        named_types_return named_types454 = null;

        simple_types_return simple_types455 = null;


        RewriteRuleSubtreeStream stream_simple_types=new RewriteRuleSubtreeStream(adaptor,"rule simple_types");
        RewriteRuleSubtreeStream stream_generalized_types=new RewriteRuleSubtreeStream(adaptor,"rule generalized_types");
        RewriteRuleSubtreeStream stream_named_types=new RewriteRuleSubtreeStream(adaptor,"rule named_types");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // Express.g:976:3: ( generalized_types -> ^( PARAMETER_TYPE generalized_types ) | named_types -> ^( PARAMETER_TYPE named_types ) | simple_types -> ^( PARAMETER_TYPE simple_types ) )
            int alt126=3;
            switch ( input.LA(1) ) {
            case 293:
            case 298:
            case 301:
            case 322:
            case 326:
            case 327:
            case 328:
                {
                alt126=1;
                }
                break;
            case IDENT:
                {
                alt126=2;
                }
                break;
            case 302:
            case 303:
            case 335:
            case 341:
            case 342:
            case 347:
            case 362:
                {
                alt126=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // Express.g:976:6: generalized_types
                    {
                    pushFollow(FOLLOW_generalized_types_in_parameter_type6254);
                    generalized_types453=generalized_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_generalized_types.add(generalized_types453.getTree());


                    // AST REWRITE
                    // elements: generalized_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 976:24: -> ^( PARAMETER_TYPE generalized_types )
                    {
                        // Express.g:976:27: ^( PARAMETER_TYPE generalized_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_TYPE, "PARAMETER_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_generalized_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:977:6: named_types
                    {
                    pushFollow(FOLLOW_named_types_in_parameter_type6270);
                    named_types454=named_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_named_types.add(named_types454.getTree());


                    // AST REWRITE
                    // elements: named_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 977:18: -> ^( PARAMETER_TYPE named_types )
                    {
                        // Express.g:977:21: ^( PARAMETER_TYPE named_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_TYPE, "PARAMETER_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_named_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:978:6: simple_types
                    {
                    pushFollow(FOLLOW_simple_types_in_parameter_type6286);
                    simple_types455=simple_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_types.add(simple_types455.getTree());


                    // AST REWRITE
                    // elements: simple_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 978:19: -> ^( PARAMETER_TYPE simple_types )
                    {
                        // Express.g:978:22: ^( PARAMETER_TYPE simple_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_TYPE, "PARAMETER_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_simple_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, parameter_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type"

    public static class population_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "population"
    // Express.g:981:1: population : entity_ref -> ^( POPULATION entity_ref ) ;
    public final population_return population() throws RecognitionException {
        population_return retval = new population_return();
        retval.start = input.LT(1);
        int population_StartIndex = input.index();
        CommonTree root_0 = null;

        entity_ref_return entity_ref456 = null;


        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // Express.g:982:3: ( entity_ref -> ^( POPULATION entity_ref ) )
            // Express.g:982:6: entity_ref
            {
            pushFollow(FOLLOW_entity_ref_in_population6309);
            entity_ref456=entity_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref456.getTree());


            // AST REWRITE
            // elements: entity_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:17: -> ^( POPULATION entity_ref )
            {
                // Express.g:982:20: ^( POPULATION entity_ref )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POPULATION, "POPULATION"), root_1);

                adaptor.addChild(root_1, stream_entity_ref.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, population_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "population"

    public static class precision_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "precision_spec"
    // Express.g:985:1: precision_spec : numeric_expression -> ^( PRECISION_SPEC numeric_expression ) ;
    public final precision_spec_return precision_spec() throws RecognitionException {
        precision_spec_return retval = new precision_spec_return();
        retval.start = input.LT(1);
        int precision_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression457 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // Express.g:986:3: ( numeric_expression -> ^( PRECISION_SPEC numeric_expression ) )
            // Express.g:986:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_precision_spec6332);
            numeric_expression457=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression457.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 986:25: -> ^( PRECISION_SPEC numeric_expression )
            {
                // Express.g:986:28: ^( PRECISION_SPEC numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRECISION_SPEC, "PRECISION_SPEC"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, precision_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "precision_spec"

    public static class primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // Express.g:989:1: primary : ( literal -> ^( PRIMARY literal ) | qualifiable_factor ( qualifier )* -> ^( PRIMARY qualifiable_factor ( qualifier )* ) );
    public final primary_return primary() throws RecognitionException {
        primary_return retval = new primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        CommonTree root_0 = null;

        literal_return literal458 = null;

        qualifiable_factor_return qualifiable_factor459 = null;

        qualifier_return qualifier460 = null;


        RewriteRuleSubtreeStream stream_qualifiable_factor=new RewriteRuleSubtreeStream(adaptor,"rule qualifiable_factor");
        RewriteRuleSubtreeStream stream_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifier");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // Express.g:990:3: ( literal -> ^( PRIMARY literal ) | qualifiable_factor ( qualifier )* -> ^( PRIMARY qualifiable_factor ( qualifier )* ) )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=FLOAT && LA128_0<=STRING)||(LA128_0>=338 && LA128_0<=340)) ) {
                alt128=1;
            }
            else if ( ((LA128_0>=CONST_E && LA128_0<=FUNCTION_SIZEOF)||LA128_0==IDENT||(LA128_0>=QUESTION && LA128_0<=STAR)) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // Express.g:990:6: literal
                    {
                    pushFollow(FOLLOW_literal_in_primary6354);
                    literal458=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal458.getTree());


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 990:14: -> ^( PRIMARY literal )
                    {
                        // Express.g:990:17: ^( PRIMARY literal )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIMARY, "PRIMARY"), root_1);

                        adaptor.addChild(root_1, stream_literal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:991:6: qualifiable_factor ( qualifier )*
                    {
                    pushFollow(FOLLOW_qualifiable_factor_in_primary6369);
                    qualifiable_factor459=qualifiable_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiable_factor.add(qualifiable_factor459.getTree());
                    // Express.g:991:25: ( qualifier )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==LBRACK||LA127_0==DOT||LA127_0==BACKSLASH) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // Express.g:0:0: qualifier
                    	    {
                    	    pushFollow(FOLLOW_qualifier_in_primary6371);
                    	    qualifier460=qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_qualifier.add(qualifier460.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: qualifiable_factor, qualifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 992:3: -> ^( PRIMARY qualifiable_factor ( qualifier )* )
                    {
                        // Express.g:992:6: ^( PRIMARY qualifiable_factor ( qualifier )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIMARY, "PRIMARY"), root_1);

                        adaptor.addChild(root_1, stream_qualifiable_factor.nextTree());
                        // Express.g:992:35: ( qualifier )*
                        while ( stream_qualifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_qualifier.nextTree());

                        }
                        stream_qualifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class procedure_call_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_call_stmt"
    // Express.g:995:1: procedure_call_stmt : ( built_in_procedure | procedure_ref ) ( actual_parameter_list )? SEMI -> ^( PROCEDURE_CALL_STMT ( built_in_procedure )? ( procedure_ref )? ( actual_parameter_list )? ) ;
    public final procedure_call_stmt_return procedure_call_stmt() throws RecognitionException {
        procedure_call_stmt_return retval = new procedure_call_stmt_return();
        retval.start = input.LT(1);
        int procedure_call_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI464=null;
        built_in_procedure_return built_in_procedure461 = null;

        procedure_ref_return procedure_ref462 = null;

        actual_parameter_list_return actual_parameter_list463 = null;


        CommonTree SEMI464_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_built_in_procedure=new RewriteRuleSubtreeStream(adaptor,"rule built_in_procedure");
        RewriteRuleSubtreeStream stream_procedure_ref=new RewriteRuleSubtreeStream(adaptor,"rule procedure_ref");
        RewriteRuleSubtreeStream stream_actual_parameter_list=new RewriteRuleSubtreeStream(adaptor,"rule actual_parameter_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // Express.g:996:3: ( ( built_in_procedure | procedure_ref ) ( actual_parameter_list )? SEMI -> ^( PROCEDURE_CALL_STMT ( built_in_procedure )? ( procedure_ref )? ( actual_parameter_list )? ) )
            // Express.g:996:5: ( built_in_procedure | procedure_ref ) ( actual_parameter_list )? SEMI
            {
            // Express.g:996:5: ( built_in_procedure | procedure_ref )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=PROCEDURE_INSERT && LA129_0<=PROCEDURE_REMOVE)) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // Express.g:996:8: built_in_procedure
                    {
                    pushFollow(FOLLOW_built_in_procedure_in_procedure_call_stmt6402);
                    built_in_procedure461=built_in_procedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_built_in_procedure.add(built_in_procedure461.getTree());

                    }
                    break;
                case 2 :
                    // Express.g:996:31: procedure_ref
                    {
                    pushFollow(FOLLOW_procedure_ref_in_procedure_call_stmt6408);
                    procedure_ref462=procedure_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_ref.add(procedure_ref462.getTree());

                    }
                    break;

            }

            // Express.g:996:49: ( actual_parameter_list )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==LPAREN) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // Express.g:996:52: actual_parameter_list
                    {
                    pushFollow(FOLLOW_actual_parameter_list_in_procedure_call_stmt6417);
                    actual_parameter_list463=actual_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_actual_parameter_list.add(actual_parameter_list463.getTree());

                    }
                    break;

            }

            SEMI464=(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_call_stmt6424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI464);



            // AST REWRITE
            // elements: procedure_ref, actual_parameter_list, built_in_procedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 997:3: -> ^( PROCEDURE_CALL_STMT ( built_in_procedure )? ( procedure_ref )? ( actual_parameter_list )? )
            {
                // Express.g:997:6: ^( PROCEDURE_CALL_STMT ( built_in_procedure )? ( procedure_ref )? ( actual_parameter_list )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCEDURE_CALL_STMT, "PROCEDURE_CALL_STMT"), root_1);

                // Express.g:997:28: ( built_in_procedure )?
                if ( stream_built_in_procedure.hasNext() ) {
                    adaptor.addChild(root_1, stream_built_in_procedure.nextTree());

                }
                stream_built_in_procedure.reset();
                // Express.g:997:48: ( procedure_ref )?
                if ( stream_procedure_ref.hasNext() ) {
                    adaptor.addChild(root_1, stream_procedure_ref.nextTree());

                }
                stream_procedure_ref.reset();
                // Express.g:997:63: ( actual_parameter_list )?
                if ( stream_actual_parameter_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_actual_parameter_list.nextTree());

                }
                stream_actual_parameter_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, procedure_call_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_call_stmt"

    public static class procedure_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_decl"
    // Express.g:1000:1: procedure_decl : procedure_head ( algorithm_head )? ( stmt )* 'end_procedure' SEMI -> ^( PROCEDURE_DECL procedure_head ( algorithm_head )? ( stmt )* ) ;
    public final procedure_decl_return procedure_decl() throws RecognitionException {
        procedure_decl_return retval = new procedure_decl_return();
        retval.start = input.LT(1);
        int procedure_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal468=null;
        Token SEMI469=null;
        procedure_head_return procedure_head465 = null;

        algorithm_head_return algorithm_head466 = null;

        stmt_return stmt467 = null;


        CommonTree string_literal468_tree=null;
        CommonTree SEMI469_tree=null;
        RewriteRuleTokenStream stream_344=new RewriteRuleTokenStream(adaptor,"token 344");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_algorithm_head=new RewriteRuleSubtreeStream(adaptor,"rule algorithm_head");
        RewriteRuleSubtreeStream stream_procedure_head=new RewriteRuleSubtreeStream(adaptor,"rule procedure_head");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // Express.g:1001:3: ( procedure_head ( algorithm_head )? ( stmt )* 'end_procedure' SEMI -> ^( PROCEDURE_DECL procedure_head ( algorithm_head )? ( stmt )* ) )
            // Express.g:1001:6: procedure_head ( algorithm_head )? ( stmt )* 'end_procedure' SEMI
            {
            pushFollow(FOLLOW_procedure_head_in_procedure_decl6455);
            procedure_head465=procedure_head();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_head.add(procedure_head465.getTree());
            // Express.g:1001:21: ( algorithm_head )?
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // Express.g:0:0: algorithm_head
                    {
                    pushFollow(FOLLOW_algorithm_head_in_procedure_decl6457);
                    algorithm_head466=algorithm_head();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_algorithm_head.add(algorithm_head466.getTree());

                    }
                    break;

            }

            // Express.g:1001:37: ( stmt )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( ((LA132_0>=PROCEDURE_INSERT && LA132_0<=PROCEDURE_REMOVE)||(LA132_0>=IDENT && LA132_0<=SEMI)||LA132_0==295||LA132_0==304||LA132_0==307||LA132_0==323||LA132_0==329||LA132_0==352||LA132_0==355||LA132_0==361) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_procedure_decl6460);
            	    stmt467=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt467.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            string_literal468=(Token)match(input,344,FOLLOW_344_in_procedure_decl6464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_344.add(string_literal468);

            SEMI469=(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_decl6467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI469);

            if ( state.backtracking==0 ) {
               upScope(); 
            }


            // AST REWRITE
            // elements: procedure_head, algorithm_head, stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1002:3: -> ^( PROCEDURE_DECL procedure_head ( algorithm_head )? ( stmt )* )
            {
                // Express.g:1002:6: ^( PROCEDURE_DECL procedure_head ( algorithm_head )? ( stmt )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCEDURE_DECL, "PROCEDURE_DECL"), root_1);

                adaptor.addChild(root_1, stream_procedure_head.nextTree());
                // Express.g:1002:38: ( algorithm_head )?
                if ( stream_algorithm_head.hasNext() ) {
                    adaptor.addChild(root_1, stream_algorithm_head.nextTree());

                }
                stream_algorithm_head.reset();
                // Express.g:1002:54: ( stmt )*
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, procedure_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_decl"

    public static class procedure_head_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_head"
    // Express.g:1007:1: procedure_head : 'procedure' procedure_id ( LPAREN ( 'var' )? formal_parameter ( SEMI ( 'var' )? formal_parameter )* RPAREN )? SEMI -> ^( PROCEDURE_HEAD procedure_id ( 'var' formal_parameter )? ) ;
    public final procedure_head_return procedure_head() throws RecognitionException {
        procedure_head_return retval = new procedure_head_return();
        retval.start = input.LT(1);
        int procedure_head_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal470=null;
        Token LPAREN472=null;
        Token string_literal473=null;
        Token SEMI475=null;
        Token string_literal476=null;
        Token RPAREN478=null;
        Token SEMI479=null;
        procedure_id_return procedure_id471 = null;

        formal_parameter_return formal_parameter474 = null;

        formal_parameter_return formal_parameter477 = null;


        CommonTree string_literal470_tree=null;
        CommonTree LPAREN472_tree=null;
        CommonTree string_literal473_tree=null;
        CommonTree SEMI475_tree=null;
        CommonTree string_literal476_tree=null;
        CommonTree RPAREN478_tree=null;
        CommonTree SEMI479_tree=null;
        RewriteRuleTokenStream stream_345=new RewriteRuleTokenStream(adaptor,"token 345");
        RewriteRuleTokenStream stream_346=new RewriteRuleTokenStream(adaptor,"token 346");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_formal_parameter=new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter");
        RewriteRuleSubtreeStream stream_procedure_id=new RewriteRuleSubtreeStream(adaptor,"rule procedure_id");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // Express.g:1008:3: ( 'procedure' procedure_id ( LPAREN ( 'var' )? formal_parameter ( SEMI ( 'var' )? formal_parameter )* RPAREN )? SEMI -> ^( PROCEDURE_HEAD procedure_id ( 'var' formal_parameter )? ) )
            // Express.g:1008:6: 'procedure' procedure_id ( LPAREN ( 'var' )? formal_parameter ( SEMI ( 'var' )? formal_parameter )* RPAREN )? SEMI
            {
            string_literal470=(Token)match(input,345,FOLLOW_345_in_procedure_head6501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_345.add(string_literal470);

            pushFollow(FOLLOW_procedure_id_in_procedure_head6504);
            procedure_id471=procedure_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_id.add(procedure_id471.getTree());
            if ( state.backtracking==0 ) {
               newScope("procedure"); 
            }
            // Express.g:1008:59: ( LPAREN ( 'var' )? formal_parameter ( SEMI ( 'var' )? formal_parameter )* RPAREN )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==LPAREN) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // Express.g:1008:62: LPAREN ( 'var' )? formal_parameter ( SEMI ( 'var' )? formal_parameter )* RPAREN
                    {
                    LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_head6511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN472);

                    // Express.g:1008:70: ( 'var' )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==346) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // Express.g:0:0: 'var'
                            {
                            string_literal473=(Token)match(input,346,FOLLOW_346_in_procedure_head6514); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_346.add(string_literal473);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_formal_parameter_in_procedure_head6518);
                    formal_parameter474=formal_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formal_parameter.add(formal_parameter474.getTree());
                    // Express.g:1008:96: ( SEMI ( 'var' )? formal_parameter )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==SEMI) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // Express.g:1008:99: SEMI ( 'var' )? formal_parameter
                    	    {
                    	    SEMI475=(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_head6524); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_SEMI.add(SEMI475);

                    	    // Express.g:1008:105: ( 'var' )?
                    	    int alt134=2;
                    	    int LA134_0 = input.LA(1);

                    	    if ( (LA134_0==346) ) {
                    	        alt134=1;
                    	    }
                    	    switch (alt134) {
                    	        case 1 :
                    	            // Express.g:0:0: 'var'
                    	            {
                    	            string_literal476=(Token)match(input,346,FOLLOW_346_in_procedure_head6527); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_346.add(string_literal476);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_formal_parameter_in_procedure_head6531);
                    	    formal_parameter477=formal_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formal_parameter.add(formal_parameter477.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    RPAREN478=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_head6538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN478);


                    }
                    break;

            }

            SEMI479=(Token)match(input,SEMI,FOLLOW_SEMI_in_procedure_head6545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI479);



            // AST REWRITE
            // elements: formal_parameter, procedure_id, 346
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1009:3: -> ^( PROCEDURE_HEAD procedure_id ( 'var' formal_parameter )? )
            {
                // Express.g:1009:6: ^( PROCEDURE_HEAD procedure_id ( 'var' formal_parameter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCEDURE_HEAD, "PROCEDURE_HEAD"), root_1);

                adaptor.addChild(root_1, stream_procedure_id.nextTree());
                // Express.g:1009:36: ( 'var' formal_parameter )?
                if ( stream_formal_parameter.hasNext()||stream_346.hasNext() ) {
                    adaptor.addChild(root_1, stream_346.nextNode());
                    adaptor.addChild(root_1, stream_formal_parameter.nextTree());

                }
                stream_formal_parameter.reset();
                stream_346.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, procedure_head_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_head"

    public static class procedure_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_id"
    // Express.g:1012:1: procedure_id : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( PROCEDURE_ID IDENT[$id] ) );
    public final procedure_id_return procedure_id() throws RecognitionException {
        procedure_id_return retval = new procedure_id_return();
        retval.start = input.LT(1);
        int procedure_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // Express.g:1013:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( PROCEDURE_ID IDENT[$id] ) )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==IDENT) ) {
                int LA137_1 = input.LA(2);

                if ( ((synpred194_Express()&&( isFirst ))) ) {
                    alt137=1;
                }
                else if ( ((nextIs(PROCEDURE_IDENT))) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // Express.g:1013:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "procedure_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_procedure_id6580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addId((id!=null?id.getText():null),PROCEDURE_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1014:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(PROCEDURE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "procedure_id", "nextIs(PROCEDURE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_procedure_id6593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1015:3: -> ^( PROCEDURE_ID IDENT[$id] )
                    {
                        // Express.g:1015:6: ^( PROCEDURE_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCEDURE_ID, "PROCEDURE_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, procedure_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_id"

    public static class qualifiable_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiable_factor"
    // Express.g:1018:1: qualifiable_factor : ({...}? => IDENT ( actual_parameter_list )? | {...}? => built_in_constant | {...}? => built_in_function ( actual_parameter_list )? | function_call -> ^( QUALIFIABLE_FACTOR function_call ) | attribute_ref -> ^( QUALIFIABLE_FACTOR attribute_ref ) | constant_factor -> ^( QUALIFIABLE_FACTOR constant_factor ) | population -> ^( QUALIFIABLE_FACTOR population ) | general_ref -> ^( QUALIFIABLE_FACTOR general_ref ) );
    public final qualifiable_factor_return qualifiable_factor() throws RecognitionException {
        qualifiable_factor_return retval = new qualifiable_factor_return();
        retval.start = input.LT(1);
        int qualifiable_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT480=null;
        actual_parameter_list_return actual_parameter_list481 = null;

        built_in_constant_return built_in_constant482 = null;

        built_in_function_return built_in_function483 = null;

        actual_parameter_list_return actual_parameter_list484 = null;

        function_call_return function_call485 = null;

        attribute_ref_return attribute_ref486 = null;

        constant_factor_return constant_factor487 = null;

        population_return population488 = null;

        general_ref_return general_ref489 = null;


        CommonTree IDENT480_tree=null;
        RewriteRuleSubtreeStream stream_function_call=new RewriteRuleSubtreeStream(adaptor,"rule function_call");
        RewriteRuleSubtreeStream stream_attribute_ref=new RewriteRuleSubtreeStream(adaptor,"rule attribute_ref");
        RewriteRuleSubtreeStream stream_general_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_ref");
        RewriteRuleSubtreeStream stream_constant_factor=new RewriteRuleSubtreeStream(adaptor,"rule constant_factor");
        RewriteRuleSubtreeStream stream_population=new RewriteRuleSubtreeStream(adaptor,"rule population");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // Express.g:1019:3: ({...}? => IDENT ( actual_parameter_list )? | {...}? => built_in_constant | {...}? => built_in_function ( actual_parameter_list )? | function_call -> ^( QUALIFIABLE_FACTOR function_call ) | attribute_ref -> ^( QUALIFIABLE_FACTOR attribute_ref ) | constant_factor -> ^( QUALIFIABLE_FACTOR constant_factor ) | population -> ^( QUALIFIABLE_FACTOR population ) | general_ref -> ^( QUALIFIABLE_FACTOR general_ref ) )
            int alt140=8;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // Express.g:1019:5: {...}? => IDENT ( actual_parameter_list )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "qualifiable_factor", " isFirst ");
                    }
                    IDENT480=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiable_factor6620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT480_tree = (CommonTree)adaptor.create(IDENT480);
                    adaptor.addChild(root_0, IDENT480_tree);
                    }
                    // Express.g:1019:26: ( actual_parameter_list )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==LPAREN) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // Express.g:1019:28: actual_parameter_list
                            {
                            pushFollow(FOLLOW_actual_parameter_list_in_qualifiable_factor6624);
                            actual_parameter_list481=actual_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, actual_parameter_list481.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Express.g:1020:5: {...}? => built_in_constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "qualifiable_factor", " isFirst ");
                    }
                    pushFollow(FOLLOW_built_in_constant_in_qualifiable_factor6636);
                    built_in_constant482=built_in_constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, built_in_constant482.getTree());

                    }
                    break;
                case 3 :
                    // Express.g:1021:5: {...}? => built_in_function ( actual_parameter_list )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "qualifiable_factor", " isFirst ");
                    }
                    pushFollow(FOLLOW_built_in_function_in_qualifiable_factor6645);
                    built_in_function483=built_in_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, built_in_function483.getTree());
                    if ( state.backtracking==0 ) {
                      log.debug("built_in_function");
                    }
                    // Express.g:1021:72: ( actual_parameter_list )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==LPAREN) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // Express.g:1021:74: actual_parameter_list
                            {
                            pushFollow(FOLLOW_actual_parameter_list_in_qualifiable_factor6651);
                            actual_parameter_list484=actual_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, actual_parameter_list484.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Express.g:1022:6: function_call
                    {
                    pushFollow(FOLLOW_function_call_in_qualifiable_factor6661);
                    function_call485=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_call.add(function_call485.getTree());


                    // AST REWRITE
                    // elements: function_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1022:20: -> ^( QUALIFIABLE_FACTOR function_call )
                    {
                        // Express.g:1022:23: ^( QUALIFIABLE_FACTOR function_call )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIABLE_FACTOR, "QUALIFIABLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_function_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1023:6: attribute_ref
                    {
                    pushFollow(FOLLOW_attribute_ref_in_qualifiable_factor6676);
                    attribute_ref486=attribute_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_ref.add(attribute_ref486.getTree());


                    // AST REWRITE
                    // elements: attribute_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1023:20: -> ^( QUALIFIABLE_FACTOR attribute_ref )
                    {
                        // Express.g:1023:23: ^( QUALIFIABLE_FACTOR attribute_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIABLE_FACTOR, "QUALIFIABLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_attribute_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:1024:6: constant_factor
                    {
                    pushFollow(FOLLOW_constant_factor_in_qualifiable_factor6691);
                    constant_factor487=constant_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_factor.add(constant_factor487.getTree());


                    // AST REWRITE
                    // elements: constant_factor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1024:22: -> ^( QUALIFIABLE_FACTOR constant_factor )
                    {
                        // Express.g:1024:25: ^( QUALIFIABLE_FACTOR constant_factor )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIABLE_FACTOR, "QUALIFIABLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_constant_factor.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Express.g:1025:6: population
                    {
                    pushFollow(FOLLOW_population_in_qualifiable_factor6706);
                    population488=population();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_population.add(population488.getTree());


                    // AST REWRITE
                    // elements: population
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1025:17: -> ^( QUALIFIABLE_FACTOR population )
                    {
                        // Express.g:1025:20: ^( QUALIFIABLE_FACTOR population )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIABLE_FACTOR, "QUALIFIABLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_population.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // Express.g:1026:6: general_ref
                    {
                    pushFollow(FOLLOW_general_ref_in_qualifiable_factor6721);
                    general_ref489=general_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_ref.add(general_ref489.getTree());


                    // AST REWRITE
                    // elements: general_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1026:18: -> ^( QUALIFIABLE_FACTOR general_ref )
                    {
                        // Express.g:1026:21: ^( QUALIFIABLE_FACTOR general_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIABLE_FACTOR, "QUALIFIABLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_general_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, qualifiable_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiable_factor"

    public static class qualifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifier"
    // Express.g:1029:1: qualifier : ( attribute_qualifier -> ^( QUALIFIER attribute_qualifier ) | group_qualifier -> ^( QUALIFIER group_qualifier ) | index_qualifier -> ^( QUALIFIER index_qualifier ) );
    public final qualifier_return qualifier() throws RecognitionException {
        qualifier_return retval = new qualifier_return();
        retval.start = input.LT(1);
        int qualifier_StartIndex = input.index();
        CommonTree root_0 = null;

        attribute_qualifier_return attribute_qualifier490 = null;

        group_qualifier_return group_qualifier491 = null;

        index_qualifier_return index_qualifier492 = null;


        RewriteRuleSubtreeStream stream_attribute_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule attribute_qualifier");
        RewriteRuleSubtreeStream stream_group_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule group_qualifier");
        RewriteRuleSubtreeStream stream_index_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule index_qualifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // Express.g:1030:3: ( attribute_qualifier -> ^( QUALIFIER attribute_qualifier ) | group_qualifier -> ^( QUALIFIER group_qualifier ) | index_qualifier -> ^( QUALIFIER index_qualifier ) )
            int alt141=3;
            switch ( input.LA(1) ) {
            case DOT:
                {
                alt141=1;
                }
                break;
            case BACKSLASH:
                {
                alt141=2;
                }
                break;
            case LBRACK:
                {
                alt141=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // Express.g:1030:6: attribute_qualifier
                    {
                    pushFollow(FOLLOW_attribute_qualifier_in_qualifier6743);
                    attribute_qualifier490=attribute_qualifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_qualifier.add(attribute_qualifier490.getTree());


                    // AST REWRITE
                    // elements: attribute_qualifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1030:26: -> ^( QUALIFIER attribute_qualifier )
                    {
                        // Express.g:1030:29: ^( QUALIFIER attribute_qualifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIER, "QUALIFIER"), root_1);

                        adaptor.addChild(root_1, stream_attribute_qualifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1031:6: group_qualifier
                    {
                    pushFollow(FOLLOW_group_qualifier_in_qualifier6758);
                    group_qualifier491=group_qualifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_qualifier.add(group_qualifier491.getTree());


                    // AST REWRITE
                    // elements: group_qualifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1031:22: -> ^( QUALIFIER group_qualifier )
                    {
                        // Express.g:1031:25: ^( QUALIFIER group_qualifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIER, "QUALIFIER"), root_1);

                        adaptor.addChild(root_1, stream_group_qualifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1032:6: index_qualifier
                    {
                    pushFollow(FOLLOW_index_qualifier_in_qualifier6773);
                    index_qualifier492=index_qualifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_index_qualifier.add(index_qualifier492.getTree());


                    // AST REWRITE
                    // elements: index_qualifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1032:22: -> ^( QUALIFIER index_qualifier )
                    {
                        // Express.g:1032:25: ^( QUALIFIER index_qualifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIER, "QUALIFIER"), root_1);

                        adaptor.addChild(root_1, stream_index_qualifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, qualifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifier"

    public static class query_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_expression"
    // Express.g:1035:1: query_expression : QUERY LPAREN variable_id LTSTAR aggregate_source BAR logical_expression RPAREN -> ^( QUERY_EXPRESSION variable_id aggregate_source logical_expression ) ;
    public final query_expression_return query_expression() throws RecognitionException {
        query_expression_return retval = new query_expression_return();
        retval.start = input.LT(1);
        int query_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUERY493=null;
        Token LPAREN494=null;
        Token LTSTAR496=null;
        Token BAR498=null;
        Token RPAREN500=null;
        variable_id_return variable_id495 = null;

        aggregate_source_return aggregate_source497 = null;

        logical_expression_return logical_expression499 = null;


        CommonTree QUERY493_tree=null;
        CommonTree LPAREN494_tree=null;
        CommonTree LTSTAR496_tree=null;
        CommonTree BAR498_tree=null;
        CommonTree RPAREN500_tree=null;
        RewriteRuleTokenStream stream_BAR=new RewriteRuleTokenStream(adaptor,"token BAR");
        RewriteRuleTokenStream stream_QUERY=new RewriteRuleTokenStream(adaptor,"token QUERY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LTSTAR=new RewriteRuleTokenStream(adaptor,"token LTSTAR");
        RewriteRuleSubtreeStream stream_aggregate_source=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_source");
        RewriteRuleSubtreeStream stream_variable_id=new RewriteRuleSubtreeStream(adaptor,"rule variable_id");
        RewriteRuleSubtreeStream stream_logical_expression=new RewriteRuleSubtreeStream(adaptor,"rule logical_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // Express.g:1036:3: ( QUERY LPAREN variable_id LTSTAR aggregate_source BAR logical_expression RPAREN -> ^( QUERY_EXPRESSION variable_id aggregate_source logical_expression ) )
            // Express.g:1036:6: QUERY LPAREN variable_id LTSTAR aggregate_source BAR logical_expression RPAREN
            {
            QUERY493=(Token)match(input,QUERY,FOLLOW_QUERY_in_query_expression6795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUERY.add(QUERY493);

            LPAREN494=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_query_expression6797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN494);

            if ( state.backtracking==0 ) {
              newScope("query");
            }
            pushFollow(FOLLOW_variable_id_in_query_expression6801);
            variable_id495=variable_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_id.add(variable_id495.getTree());
            LTSTAR496=(Token)match(input,LTSTAR,FOLLOW_LTSTAR_in_query_expression6804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LTSTAR.add(LTSTAR496);

            pushFollow(FOLLOW_aggregate_source_in_query_expression6807);
            aggregate_source497=aggregate_source();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_aggregate_source.add(aggregate_source497.getTree());
            BAR498=(Token)match(input,BAR,FOLLOW_BAR_in_query_expression6810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAR.add(BAR498);

            pushFollow(FOLLOW_logical_expression_in_query_expression6813);
            logical_expression499=logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_logical_expression.add(logical_expression499.getTree());
            RPAREN500=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_query_expression6816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN500);

            if ( state.backtracking==0 ) {
              upScope();log.debug("end of query");
            }


            // AST REWRITE
            // elements: logical_expression, aggregate_source, variable_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1037:3: -> ^( QUERY_EXPRESSION variable_id aggregate_source logical_expression )
            {
                // Express.g:1037:6: ^( QUERY_EXPRESSION variable_id aggregate_source logical_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUERY_EXPRESSION, "QUERY_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_variable_id.nextTree());
                adaptor.addChild(root_1, stream_aggregate_source.nextTree());
                adaptor.addChild(root_1, stream_logical_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, query_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_expression"

    public static class real_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "real_type"
    // Express.g:1040:1: real_type : 'real' ( LPAREN precision_spec RPAREN )? -> ^( REAL_TYPE ( precision_spec )? ) ;
    public final real_type_return real_type() throws RecognitionException {
        real_type_return retval = new real_type_return();
        retval.start = input.LT(1);
        int real_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal501=null;
        Token LPAREN502=null;
        Token RPAREN504=null;
        precision_spec_return precision_spec503 = null;


        CommonTree string_literal501_tree=null;
        CommonTree LPAREN502_tree=null;
        CommonTree RPAREN504_tree=null;
        RewriteRuleTokenStream stream_347=new RewriteRuleTokenStream(adaptor,"token 347");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_precision_spec=new RewriteRuleSubtreeStream(adaptor,"rule precision_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // Express.g:1041:3: ( 'real' ( LPAREN precision_spec RPAREN )? -> ^( REAL_TYPE ( precision_spec )? ) )
            // Express.g:1041:6: 'real' ( LPAREN precision_spec RPAREN )?
            {
            string_literal501=(Token)match(input,347,FOLLOW_347_in_real_type6848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_347.add(string_literal501);

            // Express.g:1041:14: ( LPAREN precision_spec RPAREN )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==LPAREN) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // Express.g:1041:17: LPAREN precision_spec RPAREN
                    {
                    LPAREN502=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_real_type6854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN502);

                    pushFollow(FOLLOW_precision_spec_in_real_type6857);
                    precision_spec503=precision_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_precision_spec.add(precision_spec503.getTree());
                    RPAREN504=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_real_type6860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN504);


                    }
                    break;

            }



            // AST REWRITE
            // elements: precision_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1042:3: -> ^( REAL_TYPE ( precision_spec )? )
            {
                // Express.g:1042:6: ^( REAL_TYPE ( precision_spec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REAL_TYPE, "REAL_TYPE"), root_1);

                // Express.g:1042:18: ( precision_spec )?
                if ( stream_precision_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_precision_spec.nextTree());

                }
                stream_precision_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, real_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "real_type"

    public static class reference_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_clause"
    // Express.g:1045:1: reference_clause : ({...}? => 'reference' 'from' id= IDENT ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )? SEMI | 'reference' 'from' schema_ref ( LPAREN resource_or_rename ( COMMA resource_or_rename )* RPAREN )? SEMI -> ^( REFERENCE_CLAUSE schema_ref ( resource_or_rename )* ) );
    public final reference_clause_return reference_clause() throws RecognitionException {
        reference_clause_return retval = new reference_clause_return();
        retval.start = input.LT(1);
        int reference_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token string_literal505=null;
        Token string_literal506=null;
        Token LPAREN507=null;
        Token COMMA508=null;
        Token RPAREN509=null;
        Token SEMI510=null;
        Token string_literal511=null;
        Token string_literal512=null;
        Token LPAREN514=null;
        Token COMMA516=null;
        Token RPAREN518=null;
        Token SEMI519=null;
        resource_or_rename_return ei = null;

        schema_ref_return schema_ref513 = null;

        resource_or_rename_return resource_or_rename515 = null;

        resource_or_rename_return resource_or_rename517 = null;


        CommonTree id_tree=null;
        CommonTree string_literal505_tree=null;
        CommonTree string_literal506_tree=null;
        CommonTree LPAREN507_tree=null;
        CommonTree COMMA508_tree=null;
        CommonTree RPAREN509_tree=null;
        CommonTree SEMI510_tree=null;
        CommonTree string_literal511_tree=null;
        CommonTree string_literal512_tree=null;
        CommonTree LPAREN514_tree=null;
        CommonTree COMMA516_tree=null;
        CommonTree RPAREN518_tree=null;
        CommonTree SEMI519_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_348=new RewriteRuleTokenStream(adaptor,"token 348");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_349=new RewriteRuleTokenStream(adaptor,"token 349");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_schema_ref=new RewriteRuleSubtreeStream(adaptor,"rule schema_ref");
        RewriteRuleSubtreeStream stream_resource_or_rename=new RewriteRuleSubtreeStream(adaptor,"rule resource_or_rename");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // Express.g:1046:3: ({...}? => 'reference' 'from' id= IDENT ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )? SEMI | 'reference' 'from' schema_ref ( LPAREN resource_or_rename ( COMMA resource_or_rename )* RPAREN )? SEMI -> ^( REFERENCE_CLAUSE schema_ref ( resource_or_rename )* ) )
            int alt147=2;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // Express.g:1046:5: {...}? => 'reference' 'from' id= IDENT ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )? SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "reference_clause", " isFirst ");
                    }
                    string_literal505=(Token)match(input,348,FOLLOW_348_in_reference_clause6891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal505_tree = (CommonTree)adaptor.create(string_literal505);
                    adaptor.addChild(root_0, string_literal505_tree);
                    }
                    string_literal506=(Token)match(input,349,FOLLOW_349_in_reference_clause6893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal506_tree = (CommonTree)adaptor.create(string_literal506);
                    adaptor.addChild(root_0, string_literal506_tree);
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_reference_clause6897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    // Express.g:1046:48: ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==LPAREN) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // Express.g:1046:51: LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN
                            {
                            LPAREN507=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_clause6902); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN507_tree = (CommonTree)adaptor.create(LPAREN507);
                            adaptor.addChild(root_0, LPAREN507_tree);
                            }
                            pushFollow(FOLLOW_resource_or_rename_in_reference_clause6907);
                            ei=resource_or_rename();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ei.getTree());
                            if ( state.backtracking==0 ) {
                               ei.ei.setSchema((id!=null?id.getText():null)); addReference(ei.ei); 
                            }
                            // Express.g:1047:4: ( COMMA ei= resource_or_rename )*
                            loop143:
                            do {
                                int alt143=2;
                                int LA143_0 = input.LA(1);

                                if ( (LA143_0==COMMA) ) {
                                    alt143=1;
                                }


                                switch (alt143) {
                            	case 1 :
                            	    // Express.g:1047:7: COMMA ei= resource_or_rename
                            	    {
                            	    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_reference_clause6919); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    COMMA508_tree = (CommonTree)adaptor.create(COMMA508);
                            	    adaptor.addChild(root_0, COMMA508_tree);
                            	    }
                            	    pushFollow(FOLLOW_resource_or_rename_in_reference_clause6924);
                            	    ei=resource_or_rename();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ei.getTree());
                            	    if ( state.backtracking==0 ) {
                            	       ei.ei.setSchema((id!=null?id.getText():null)); addReference(ei.ei); 
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop143;
                                }
                            } while (true);

                            RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_clause6933); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN509_tree = (CommonTree)adaptor.create(RPAREN509);
                            adaptor.addChild(root_0, RPAREN509_tree);
                            }

                            }
                            break;

                    }

                    SEMI510=(Token)match(input,SEMI,FOLLOW_SEMI_in_reference_clause6943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI510_tree = (CommonTree)adaptor.create(SEMI510);
                    adaptor.addChild(root_0, SEMI510_tree);
                    }
                    if ( state.backtracking==0 ) {
                       if (ei==null) {addAllReferenceExternals((id!=null?id.getText():null)); }
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1049:6: 'reference' 'from' schema_ref ( LPAREN resource_or_rename ( COMMA resource_or_rename )* RPAREN )? SEMI
                    {
                    string_literal511=(Token)match(input,348,FOLLOW_348_in_reference_clause6952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_348.add(string_literal511);

                    string_literal512=(Token)match(input,349,FOLLOW_349_in_reference_clause6955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_349.add(string_literal512);

                    pushFollow(FOLLOW_schema_ref_in_reference_clause6957);
                    schema_ref513=schema_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_schema_ref.add(schema_ref513.getTree());
                    // Express.g:1050:3: ( LPAREN resource_or_rename ( COMMA resource_or_rename )* RPAREN )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==LPAREN) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // Express.g:1050:6: LPAREN resource_or_rename ( COMMA resource_or_rename )* RPAREN
                            {
                            LPAREN514=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_clause6966); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN514);

                            pushFollow(FOLLOW_resource_or_rename_in_reference_clause6969);
                            resource_or_rename515=resource_or_rename();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_resource_or_rename.add(resource_or_rename515.getTree());
                            // Express.g:1050:34: ( COMMA resource_or_rename )*
                            loop145:
                            do {
                                int alt145=2;
                                int LA145_0 = input.LA(1);

                                if ( (LA145_0==COMMA) ) {
                                    alt145=1;
                                }


                                switch (alt145) {
                            	case 1 :
                            	    // Express.g:1050:37: COMMA resource_or_rename
                            	    {
                            	    COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_reference_clause6975); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA516);

                            	    pushFollow(FOLLOW_resource_or_rename_in_reference_clause6978);
                            	    resource_or_rename517=resource_or_rename();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_resource_or_rename.add(resource_or_rename517.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop145;
                                }
                            } while (true);

                            RPAREN518=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_clause6985); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN518);


                            }
                            break;

                    }

                    SEMI519=(Token)match(input,SEMI,FOLLOW_SEMI_in_reference_clause6992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI519);



                    // AST REWRITE
                    // elements: schema_ref, resource_or_rename
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1051:3: -> ^( REFERENCE_CLAUSE schema_ref ( resource_or_rename )* )
                    {
                        // Express.g:1051:6: ^( REFERENCE_CLAUSE schema_ref ( resource_or_rename )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REFERENCE_CLAUSE, "REFERENCE_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_schema_ref.nextTree());
                        // Express.g:1051:36: ( resource_or_rename )*
                        while ( stream_resource_or_rename.hasNext() ) {
                            adaptor.addChild(root_1, stream_resource_or_rename.nextTree());

                        }
                        stream_resource_or_rename.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, reference_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_clause"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // Express.g:1054:1: rel_op : ( LT -> ^( REL_OP LT ) | GT -> ^( REL_OP GT ) | LE -> ^( REL_OP LE ) | GE -> ^( REL_OP GE ) | LTGT -> ^( REL_OP LTGT ) | ASSIGN -> ^( REL_OP ASSIGN ) | COLLTGT -> ^( REL_OP COLLTGT ) | COLEQCOL -> ^( REL_OP COLEQCOL ) );
    public final rel_op_return rel_op() throws RecognitionException {
        rel_op_return retval = new rel_op_return();
        retval.start = input.LT(1);
        int rel_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LT520=null;
        Token GT521=null;
        Token LE522=null;
        Token GE523=null;
        Token LTGT524=null;
        Token ASSIGN525=null;
        Token COLLTGT526=null;
        Token COLEQCOL527=null;

        CommonTree LT520_tree=null;
        CommonTree GT521_tree=null;
        CommonTree LE522_tree=null;
        CommonTree GE523_tree=null;
        CommonTree LTGT524_tree=null;
        CommonTree ASSIGN525_tree=null;
        CommonTree COLLTGT526_tree=null;
        CommonTree COLEQCOL527_tree=null;
        RewriteRuleTokenStream stream_LTGT=new RewriteRuleTokenStream(adaptor,"token LTGT");
        RewriteRuleTokenStream stream_COLLTGT=new RewriteRuleTokenStream(adaptor,"token COLLTGT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_COLEQCOL=new RewriteRuleTokenStream(adaptor,"token COLEQCOL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // Express.g:1055:3: ( LT -> ^( REL_OP LT ) | GT -> ^( REL_OP GT ) | LE -> ^( REL_OP LE ) | GE -> ^( REL_OP GE ) | LTGT -> ^( REL_OP LTGT ) | ASSIGN -> ^( REL_OP ASSIGN ) | COLLTGT -> ^( REL_OP COLLTGT ) | COLEQCOL -> ^( REL_OP COLEQCOL ) )
            int alt148=8;
            switch ( input.LA(1) ) {
            case LT:
                {
                alt148=1;
                }
                break;
            case GT:
                {
                alt148=2;
                }
                break;
            case LE:
                {
                alt148=3;
                }
                break;
            case GE:
                {
                alt148=4;
                }
                break;
            case LTGT:
                {
                alt148=5;
                }
                break;
            case ASSIGN:
                {
                alt148=6;
                }
                break;
            case COLLTGT:
                {
                alt148=7;
                }
                break;
            case COLEQCOL:
                {
                alt148=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // Express.g:1055:6: LT
                    {
                    LT520=(Token)match(input,LT,FOLLOW_LT_in_rel_op7019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT.add(LT520);



                    // AST REWRITE
                    // elements: LT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1055:9: -> ^( REL_OP LT )
                    {
                        // Express.g:1055:12: ^( REL_OP LT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_LT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1056:6: GT
                    {
                    GT521=(Token)match(input,GT,FOLLOW_GT_in_rel_op7034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(GT521);



                    // AST REWRITE
                    // elements: GT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1056:9: -> ^( REL_OP GT )
                    {
                        // Express.g:1056:12: ^( REL_OP GT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_GT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1057:6: LE
                    {
                    LE522=(Token)match(input,LE,FOLLOW_LE_in_rel_op7050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LE.add(LE522);



                    // AST REWRITE
                    // elements: LE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1057:9: -> ^( REL_OP LE )
                    {
                        // Express.g:1057:12: ^( REL_OP LE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_LE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1058:6: GE
                    {
                    GE523=(Token)match(input,GE,FOLLOW_GE_in_rel_op7065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GE.add(GE523);



                    // AST REWRITE
                    // elements: GE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1058:9: -> ^( REL_OP GE )
                    {
                        // Express.g:1058:12: ^( REL_OP GE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_GE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1059:6: LTGT
                    {
                    LTGT524=(Token)match(input,LTGT,FOLLOW_LTGT_in_rel_op7080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LTGT.add(LTGT524);



                    // AST REWRITE
                    // elements: LTGT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1059:11: -> ^( REL_OP LTGT )
                    {
                        // Express.g:1059:14: ^( REL_OP LTGT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_LTGT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:1060:6: ASSIGN
                    {
                    ASSIGN525=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_rel_op7095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN525);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1060:13: -> ^( REL_OP ASSIGN )
                    {
                        // Express.g:1060:16: ^( REL_OP ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_ASSIGN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Express.g:1061:6: COLLTGT
                    {
                    COLLTGT526=(Token)match(input,COLLTGT,FOLLOW_COLLTGT_in_rel_op7111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLLTGT.add(COLLTGT526);



                    // AST REWRITE
                    // elements: COLLTGT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1061:14: -> ^( REL_OP COLLTGT )
                    {
                        // Express.g:1061:17: ^( REL_OP COLLTGT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_COLLTGT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // Express.g:1062:6: COLEQCOL
                    {
                    COLEQCOL527=(Token)match(input,COLEQCOL,FOLLOW_COLEQCOL_in_rel_op7126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLEQCOL.add(COLEQCOL527);



                    // AST REWRITE
                    // elements: COLEQCOL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1062:15: -> ^( REL_OP COLEQCOL )
                    {
                        // Express.g:1062:18: ^( REL_OP COLEQCOL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP, "REL_OP"), root_1);

                        adaptor.addChild(root_1, stream_COLEQCOL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, rel_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class rel_op_extended_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op_extended"
    // Express.g:1065:1: rel_op_extended : ( rel_op -> ^( REL_OP_EXTENDED rel_op ) | 'in' -> ^( REL_OP_EXTENDED 'in' ) | 'like' -> ^( REL_OP_EXTENDED 'like' ) );
    public final rel_op_extended_return rel_op_extended() throws RecognitionException {
        rel_op_extended_return retval = new rel_op_extended_return();
        retval.start = input.LT(1);
        int rel_op_extended_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal529=null;
        Token string_literal530=null;
        rel_op_return rel_op528 = null;


        CommonTree string_literal529_tree=null;
        CommonTree string_literal530_tree=null;
        RewriteRuleTokenStream stream_350=new RewriteRuleTokenStream(adaptor,"token 350");
        RewriteRuleTokenStream stream_351=new RewriteRuleTokenStream(adaptor,"token 351");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // Express.g:1066:3: ( rel_op -> ^( REL_OP_EXTENDED rel_op ) | 'in' -> ^( REL_OP_EXTENDED 'in' ) | 'like' -> ^( REL_OP_EXTENDED 'like' ) )
            int alt149=3;
            switch ( input.LA(1) ) {
            case LT:
            case LE:
            case GT:
            case GE:
            case LTGT:
            case ASSIGN:
            case COLLTGT:
            case COLEQCOL:
                {
                alt149=1;
                }
                break;
            case 350:
                {
                alt149=2;
                }
                break;
            case 351:
                {
                alt149=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // Express.g:1066:6: rel_op
                    {
                    pushFollow(FOLLOW_rel_op_in_rel_op_extended7148);
                    rel_op528=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rel_op.add(rel_op528.getTree());


                    // AST REWRITE
                    // elements: rel_op
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1066:13: -> ^( REL_OP_EXTENDED rel_op )
                    {
                        // Express.g:1066:16: ^( REL_OP_EXTENDED rel_op )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP_EXTENDED, "REL_OP_EXTENDED"), root_1);

                        adaptor.addChild(root_1, stream_rel_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1067:6: 'in'
                    {
                    string_literal529=(Token)match(input,350,FOLLOW_350_in_rel_op_extended7163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_350.add(string_literal529);



                    // AST REWRITE
                    // elements: 350
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1067:11: -> ^( REL_OP_EXTENDED 'in' )
                    {
                        // Express.g:1067:14: ^( REL_OP_EXTENDED 'in' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP_EXTENDED, "REL_OP_EXTENDED"), root_1);

                        adaptor.addChild(root_1, stream_350.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1068:6: 'like'
                    {
                    string_literal530=(Token)match(input,351,FOLLOW_351_in_rel_op_extended7178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_351.add(string_literal530);



                    // AST REWRITE
                    // elements: 351
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1068:14: -> ^( REL_OP_EXTENDED 'like' )
                    {
                        // Express.g:1068:17: ^( REL_OP_EXTENDED 'like' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REL_OP_EXTENDED, "REL_OP_EXTENDED"), root_1);

                        adaptor.addChild(root_1, stream_351.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, rel_op_extended_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rel_op_extended"

    public static class rename_id_return extends ParserRuleReturnScope {
        public String s;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rename_id"
    // Express.g:1071:1: rename_id returns [String s] : ({...}? =>id= IDENT -> ^( RENAME_ID ^( CONSTANT_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( ENTITY_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( FUNCTION_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( PROCEDURE_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( TYPE_IDENT IDENT[$id] ) ) | id= IDENT );
    public final rename_id_return rename_id() throws RecognitionException {
        rename_id_return retval = new rename_id_return();
        retval.start = input.LT(1);
        int rename_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // Express.g:1072:3: ({...}? =>id= IDENT -> ^( RENAME_ID ^( CONSTANT_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( ENTITY_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( FUNCTION_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( PROCEDURE_ID IDENT[$id] ) ) | {...}? =>id= IDENT -> ^( RENAME_ID ^( TYPE_IDENT IDENT[$id] ) ) | id= IDENT )
            int alt150=6;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==IDENT) ) {
                int LA150_1 = input.LA(2);

                if ( ((synpred221_Express()&&(nextIs(CONSTANT_IDENT)))) ) {
                    alt150=1;
                }
                else if ( ((synpred222_Express()&&(nextIs(ENTITY_IDENT)))) ) {
                    alt150=2;
                }
                else if ( ((synpred223_Express()&&(nextIs(FUNCTION_IDENT)))) ) {
                    alt150=3;
                }
                else if ( ((synpred224_Express()&&(nextIs(PROCEDURE_IDENT)))) ) {
                    alt150=4;
                }
                else if ( ((synpred225_Express()&&(nextIs(TYPE_IDENT)))) ) {
                    alt150=5;
                }
                else if ( (true) ) {
                    alt150=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 150, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // Express.g:1072:6: {...}? =>id= IDENT
                    {
                    if ( !((nextIs(CONSTANT_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "rename_id", "nextIs(CONSTANT_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_rename_id7212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1073:5: -> ^( RENAME_ID ^( CONSTANT_ID IDENT[$id] ) )
                    {
                        // Express.g:1073:8: ^( RENAME_ID ^( CONSTANT_ID IDENT[$id] ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RENAME_ID, "RENAME_ID"), root_1);

                        // Express.g:1073:20: ^( CONSTANT_ID IDENT[$id] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_ID, "CONSTANT_ID"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1074:6: {...}? =>id= IDENT
                    {
                    if ( !((nextIs(ENTITY_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "rename_id", "nextIs(ENTITY_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_rename_id7243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1075:5: -> ^( RENAME_ID ^( ENTITY_ID IDENT[$id] ) )
                    {
                        // Express.g:1075:8: ^( RENAME_ID ^( ENTITY_ID IDENT[$id] ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RENAME_ID, "RENAME_ID"), root_1);

                        // Express.g:1075:20: ^( ENTITY_ID IDENT[$id] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_ID, "ENTITY_ID"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1076:6: {...}? =>id= IDENT
                    {
                    if ( !((nextIs(FUNCTION_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "rename_id", "nextIs(FUNCTION_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_rename_id7274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1077:5: -> ^( RENAME_ID ^( FUNCTION_ID IDENT[$id] ) )
                    {
                        // Express.g:1077:8: ^( RENAME_ID ^( FUNCTION_ID IDENT[$id] ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RENAME_ID, "RENAME_ID"), root_1);

                        // Express.g:1077:20: ^( FUNCTION_ID IDENT[$id] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_ID, "FUNCTION_ID"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1078:6: {...}? =>id= IDENT
                    {
                    if ( !((nextIs(PROCEDURE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "rename_id", "nextIs(PROCEDURE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_rename_id7305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1079:5: -> ^( RENAME_ID ^( PROCEDURE_ID IDENT[$id] ) )
                    {
                        // Express.g:1079:8: ^( RENAME_ID ^( PROCEDURE_ID IDENT[$id] ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RENAME_ID, "RENAME_ID"), root_1);

                        // Express.g:1079:20: ^( PROCEDURE_ID IDENT[$id] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCEDURE_ID, "PROCEDURE_ID"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1080:6: {...}? =>id= IDENT
                    {
                    if ( !((nextIs(TYPE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "rename_id", "nextIs(TYPE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_rename_id7336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1081:5: -> ^( RENAME_ID ^( TYPE_IDENT IDENT[$id] ) )
                    {
                        // Express.g:1081:8: ^( RENAME_ID ^( TYPE_IDENT IDENT[$id] ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RENAME_ID, "RENAME_ID"), root_1);

                        // Express.g:1081:20: ^( TYPE_IDENT IDENT[$id] )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_IDENT, "TYPE_IDENT"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:1082:6: id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_rename_id7362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.s =(id!=null?id.getText():null); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, rename_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rename_id"

    public static class repeat_control_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "repeat_control"
    // Express.g:1085:1: repeat_control : ( increment_control )? ( while_control )? ( until_control )? -> ^( REPEAT_CONTROL ( increment_control )? ( while_control )? ( until_control )? ) ;
    public final repeat_control_return repeat_control() throws RecognitionException {
        repeat_control_return retval = new repeat_control_return();
        retval.start = input.LT(1);
        int repeat_control_StartIndex = input.index();
        CommonTree root_0 = null;

        increment_control_return increment_control531 = null;

        while_control_return while_control532 = null;

        until_control_return until_control533 = null;


        RewriteRuleSubtreeStream stream_until_control=new RewriteRuleSubtreeStream(adaptor,"rule until_control");
        RewriteRuleSubtreeStream stream_increment_control=new RewriteRuleSubtreeStream(adaptor,"rule increment_control");
        RewriteRuleSubtreeStream stream_while_control=new RewriteRuleSubtreeStream(adaptor,"rule while_control");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // Express.g:1086:3: ( ( increment_control )? ( while_control )? ( until_control )? -> ^( REPEAT_CONTROL ( increment_control )? ( while_control )? ( until_control )? ) )
            // Express.g:1086:6: ( increment_control )? ( while_control )? ( until_control )?
            {
            // Express.g:1086:6: ( increment_control )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==IDENT) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // Express.g:0:0: increment_control
                    {
                    pushFollow(FOLLOW_increment_control_in_repeat_control7378);
                    increment_control531=increment_control();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_increment_control.add(increment_control531.getTree());

                    }
                    break;

            }

            // Express.g:1086:26: ( while_control )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==373) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Express.g:0:0: while_control
                    {
                    pushFollow(FOLLOW_while_control_in_repeat_control7382);
                    while_control532=while_control();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_while_control.add(while_control532.getTree());

                    }
                    break;

            }

            // Express.g:1086:42: ( until_control )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==371) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // Express.g:0:0: until_control
                    {
                    pushFollow(FOLLOW_until_control_in_repeat_control7386);
                    until_control533=until_control();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_until_control.add(until_control533.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: while_control, until_control, increment_control
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1087:3: -> ^( REPEAT_CONTROL ( increment_control )? ( while_control )? ( until_control )? )
            {
                // Express.g:1087:6: ^( REPEAT_CONTROL ( increment_control )? ( while_control )? ( until_control )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPEAT_CONTROL, "REPEAT_CONTROL"), root_1);

                // Express.g:1087:23: ( increment_control )?
                if ( stream_increment_control.hasNext() ) {
                    adaptor.addChild(root_1, stream_increment_control.nextTree());

                }
                stream_increment_control.reset();
                // Express.g:1087:43: ( while_control )?
                if ( stream_while_control.hasNext() ) {
                    adaptor.addChild(root_1, stream_while_control.nextTree());

                }
                stream_while_control.reset();
                // Express.g:1087:59: ( until_control )?
                if ( stream_until_control.hasNext() ) {
                    adaptor.addChild(root_1, stream_until_control.nextTree());

                }
                stream_until_control.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, repeat_control_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "repeat_control"

    public static class repeat_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "repeat_stmt"
    // Express.g:1090:1: repeat_stmt : 'repeat' repeat_control SEMI ( stmt )+ 'end_repeat' SEMI -> ^( REPEAT_STMT repeat_control ( stmt )+ ) ;
    public final repeat_stmt_return repeat_stmt() throws RecognitionException {
        repeat_stmt_return retval = new repeat_stmt_return();
        retval.start = input.LT(1);
        int repeat_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal534=null;
        Token SEMI536=null;
        Token string_literal538=null;
        Token SEMI539=null;
        repeat_control_return repeat_control535 = null;

        stmt_return stmt537 = null;


        CommonTree string_literal534_tree=null;
        CommonTree SEMI536_tree=null;
        CommonTree string_literal538_tree=null;
        CommonTree SEMI539_tree=null;
        RewriteRuleTokenStream stream_352=new RewriteRuleTokenStream(adaptor,"token 352");
        RewriteRuleTokenStream stream_353=new RewriteRuleTokenStream(adaptor,"token 353");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_repeat_control=new RewriteRuleSubtreeStream(adaptor,"rule repeat_control");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // Express.g:1091:3: ( 'repeat' repeat_control SEMI ( stmt )+ 'end_repeat' SEMI -> ^( REPEAT_STMT repeat_control ( stmt )+ ) )
            // Express.g:1091:6: 'repeat' repeat_control SEMI ( stmt )+ 'end_repeat' SEMI
            {
            string_literal534=(Token)match(input,352,FOLLOW_352_in_repeat_stmt7422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_352.add(string_literal534);

            if ( state.backtracking==0 ) {
              newScope("repeat"); 
            }
            pushFollow(FOLLOW_repeat_control_in_repeat_stmt7426);
            repeat_control535=repeat_control();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_repeat_control.add(repeat_control535.getTree());
            SEMI536=(Token)match(input,SEMI,FOLLOW_SEMI_in_repeat_stmt7429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI536);

            // Express.g:1091:60: ( stmt )+
            int cnt154=0;
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( ((LA154_0>=PROCEDURE_INSERT && LA154_0<=PROCEDURE_REMOVE)||(LA154_0>=IDENT && LA154_0<=SEMI)||LA154_0==295||LA154_0==304||LA154_0==307||LA154_0==323||LA154_0==329||LA154_0==352||LA154_0==355||LA154_0==361) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_repeat_stmt7432);
            	    stmt537=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt537.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt154 >= 1 ) break loop154;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);

            string_literal538=(Token)match(input,353,FOLLOW_353_in_repeat_stmt7436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_353.add(string_literal538);

            if ( state.backtracking==0 ) {
               upScope(); 
            }
            SEMI539=(Token)match(input,SEMI,FOLLOW_SEMI_in_repeat_stmt7440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI539);



            // AST REWRITE
            // elements: stmt, repeat_control
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1092:3: -> ^( REPEAT_STMT repeat_control ( stmt )+ )
            {
                // Express.g:1092:6: ^( REPEAT_STMT repeat_control ( stmt )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPEAT_STMT, "REPEAT_STMT"), root_1);

                adaptor.addChild(root_1, stream_repeat_control.nextTree());
                if ( !(stream_stmt.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, repeat_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "repeat_stmt"

    public static class repetition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "repetition"
    // Express.g:1095:1: repetition : numeric_expression -> ^( REPETITION numeric_expression ) ;
    public final repetition_return repetition() throws RecognitionException {
        repetition_return retval = new repetition_return();
        retval.start = input.LT(1);
        int repetition_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression540 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // Express.g:1096:3: ( numeric_expression -> ^( REPETITION numeric_expression ) )
            // Express.g:1096:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_repetition7467);
            numeric_expression540=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression540.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1097:3: -> ^( REPETITION numeric_expression )
            {
                // Express.g:1097:6: ^( REPETITION numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPETITION, "REPETITION"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, repetition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "repetition"

    public static class resource_or_rename_return extends ParserRuleReturnScope {
        public ExternalId ei;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resource_or_rename"
    // Express.g:1100:1: resource_or_rename returns [ExternalId ei] : ({...}? =>id= IDENT ( 'as' s= rename_id )? | resource_ref ( 'as' rename_id )? -> ^( RESOURCE_OR_RENAME resource_ref ( rename_id )? ) | global_ident ( 'as' rename_id )? -> ^( RESOURCE_OR_RENAME global_ident ( rename_id )? ) );
    public final resource_or_rename_return resource_or_rename() throws RecognitionException {
        resource_or_rename_return retval = new resource_or_rename_return();
        retval.start = input.LT(1);
        int resource_or_rename_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token string_literal541=null;
        Token string_literal543=null;
        Token string_literal546=null;
        rename_id_return s = null;

        resource_ref_return resource_ref542 = null;

        rename_id_return rename_id544 = null;

        global_ident_return global_ident545 = null;

        rename_id_return rename_id547 = null;


        CommonTree id_tree=null;
        CommonTree string_literal541_tree=null;
        CommonTree string_literal543_tree=null;
        CommonTree string_literal546_tree=null;
        RewriteRuleTokenStream stream_354=new RewriteRuleTokenStream(adaptor,"token 354");
        RewriteRuleSubtreeStream stream_global_ident=new RewriteRuleSubtreeStream(adaptor,"rule global_ident");
        RewriteRuleSubtreeStream stream_resource_ref=new RewriteRuleSubtreeStream(adaptor,"rule resource_ref");
        RewriteRuleSubtreeStream stream_rename_id=new RewriteRuleSubtreeStream(adaptor,"rule rename_id");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // Express.g:1101:3: ({...}? =>id= IDENT ( 'as' s= rename_id )? | resource_ref ( 'as' rename_id )? -> ^( RESOURCE_OR_RENAME resource_ref ( rename_id )? ) | global_ident ( 'as' rename_id )? -> ^( RESOURCE_OR_RENAME global_ident ( rename_id )? ) )
            int alt158=3;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==IDENT) ) {
                int LA158_1 = input.LA(2);

                if ( ((synpred231_Express()&&( isFirst ))) ) {
                    alt158=1;
                }
                else if ( (((synpred233_Express()&&(nextIs(TYPE_IDENT)))||(synpred233_Express()&&(nextIs(CONSTANT_IDENT)))||(synpred233_Express()&&(nextIs(TYPE_PARAM_IDENT)))||(synpred233_Express()&&(nextIs(ENTITY_IDENT)))||(synpred233_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred233_Express()&&(nextIs(ENTITY_VAR_IDENT)))||(synpred233_Express()&&(nextIs(FUNCTION_IDENT)))||(synpred233_Express()&&(nextIs(TYPE_VAR_IDENT)))||(synpred233_Express()&&(nextIs(PROCEDURE_IDENT)))||(synpred233_Express()&&(nextIs(TYPE_ATTR_IDENT)))||(synpred233_Express()&&(nextIs(ENTITY_PARAM_IDENT))))) ) {
                    alt158=2;
                }
                else if ( (true) ) {
                    alt158=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // Express.g:1101:5: {...}? =>id= IDENT ( 'as' s= rename_id )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "resource_or_rename", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_resource_or_rename7499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.ei = new ExternalId((id!=null?id.getText():null)); 
                    }
                    // Express.g:1101:65: ( 'as' s= rename_id )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==354) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // Express.g:1101:67: 'as' s= rename_id
                            {
                            string_literal541=(Token)match(input,354,FOLLOW_354_in_resource_or_rename7505); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal541_tree = (CommonTree)adaptor.create(string_literal541);
                            adaptor.addChild(root_0, string_literal541_tree);
                            }
                            pushFollow(FOLLOW_rename_id_in_resource_or_rename7509);
                            s=rename_id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
                            if ( state.backtracking==0 ) {
                               retval.ei.setRename((s!=null?s.s:null)); 
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Express.g:1102:6: resource_ref ( 'as' rename_id )?
                    {
                    pushFollow(FOLLOW_resource_ref_in_resource_or_rename7521);
                    resource_ref542=resource_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_resource_ref.add(resource_ref542.getTree());
                    // Express.g:1102:19: ( 'as' rename_id )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==354) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // Express.g:1102:21: 'as' rename_id
                            {
                            string_literal543=(Token)match(input,354,FOLLOW_354_in_resource_or_rename7525); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_354.add(string_literal543);

                            pushFollow(FOLLOW_rename_id_in_resource_or_rename7527);
                            rename_id544=rename_id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_rename_id.add(rename_id544.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: resource_ref, rename_id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1103:4: -> ^( RESOURCE_OR_RENAME resource_ref ( rename_id )? )
                    {
                        // Express.g:1103:7: ^( RESOURCE_OR_RENAME resource_ref ( rename_id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_OR_RENAME, "RESOURCE_OR_RENAME"), root_1);

                        adaptor.addChild(root_1, stream_resource_ref.nextTree());
                        // Express.g:1103:41: ( rename_id )?
                        if ( stream_rename_id.hasNext() ) {
                            adaptor.addChild(root_1, stream_rename_id.nextTree());

                        }
                        stream_rename_id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1104:6: global_ident ( 'as' rename_id )?
                    {
                    pushFollow(FOLLOW_global_ident_in_resource_or_rename7552);
                    global_ident545=global_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_global_ident.add(global_ident545.getTree());
                    // Express.g:1104:19: ( 'as' rename_id )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==354) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // Express.g:1104:22: 'as' rename_id
                            {
                            string_literal546=(Token)match(input,354,FOLLOW_354_in_resource_or_rename7557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_354.add(string_literal546);

                            pushFollow(FOLLOW_rename_id_in_resource_or_rename7560);
                            rename_id547=rename_id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_rename_id.add(rename_id547.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: global_ident, rename_id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1106:4: -> ^( RESOURCE_OR_RENAME global_ident ( rename_id )? )
                    {
                        // Express.g:1106:7: ^( RESOURCE_OR_RENAME global_ident ( rename_id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_OR_RENAME, "RESOURCE_OR_RENAME"), root_1);

                        adaptor.addChild(root_1, stream_global_ident.nextTree());
                        // Express.g:1106:41: ( rename_id )?
                        if ( stream_rename_id.hasNext() ) {
                            adaptor.addChild(root_1, stream_rename_id.nextTree());

                        }
                        stream_rename_id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, resource_or_rename_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "resource_or_rename"

    public static class resource_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resource_ref"
    // Express.g:1109:1: resource_ref : ( constant_ref -> ^( RESOURCE_REF constant_ref ) | entity_ref -> ^( RESOURCE_REF entity_ref ) | function_ref -> ^( RESOURCE_REF function_ref ) | procedure_ref -> ^( RESOURCE_REF procedure_ref ) | type_ref -> ^( RESOURCE_REF type_ref ) );
    public final resource_ref_return resource_ref() throws RecognitionException {
        resource_ref_return retval = new resource_ref_return();
        retval.start = input.LT(1);
        int resource_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        constant_ref_return constant_ref548 = null;

        entity_ref_return entity_ref549 = null;

        function_ref_return function_ref550 = null;

        procedure_ref_return procedure_ref551 = null;

        type_ref_return type_ref552 = null;


        RewriteRuleSubtreeStream stream_function_ref=new RewriteRuleSubtreeStream(adaptor,"rule function_ref");
        RewriteRuleSubtreeStream stream_procedure_ref=new RewriteRuleSubtreeStream(adaptor,"rule procedure_ref");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        RewriteRuleSubtreeStream stream_constant_ref=new RewriteRuleSubtreeStream(adaptor,"rule constant_ref");
        RewriteRuleSubtreeStream stream_type_ref=new RewriteRuleSubtreeStream(adaptor,"rule type_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // Express.g:1110:3: ( constant_ref -> ^( RESOURCE_REF constant_ref ) | entity_ref -> ^( RESOURCE_REF entity_ref ) | function_ref -> ^( RESOURCE_REF function_ref ) | procedure_ref -> ^( RESOURCE_REF procedure_ref ) | type_ref -> ^( RESOURCE_REF type_ref ) )
            int alt159=5;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==IDENT) ) {
                int LA159_1 = input.LA(2);

                if ( ((synpred235_Express()&&(nextIs(CONSTANT_IDENT)))) ) {
                    alt159=1;
                }
                else if ( (((synpred236_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred236_Express()&&(nextIs(ENTITY_IDENT)))||(synpred236_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred236_Express()&&(nextIs(ENTITY_VAR_IDENT))))) ) {
                    alt159=2;
                }
                else if ( ((synpred237_Express()&&(nextIs(FUNCTION_IDENT)))) ) {
                    alt159=3;
                }
                else if ( ((synpred238_Express()&&(nextIs(PROCEDURE_IDENT)))) ) {
                    alt159=4;
                }
                else if ( (((nextIs(TYPE_IDENT))||(nextIs(TYPE_VAR_IDENT))||(nextIs(TYPE_ATTR_IDENT))||(nextIs(TYPE_PARAM_IDENT)))) ) {
                    alt159=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // Express.g:1110:5: constant_ref
                    {
                    pushFollow(FOLLOW_constant_ref_in_resource_ref7606);
                    constant_ref548=constant_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_ref.add(constant_ref548.getTree());


                    // AST REWRITE
                    // elements: constant_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1111:4: -> ^( RESOURCE_REF constant_ref )
                    {
                        // Express.g:1111:7: ^( RESOURCE_REF constant_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_REF, "RESOURCE_REF"), root_1);

                        adaptor.addChild(root_1, stream_constant_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1112:5: entity_ref
                    {
                    pushFollow(FOLLOW_entity_ref_in_resource_ref7623);
                    entity_ref549=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref549.getTree());


                    // AST REWRITE
                    // elements: entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1113:4: -> ^( RESOURCE_REF entity_ref )
                    {
                        // Express.g:1113:7: ^( RESOURCE_REF entity_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_REF, "RESOURCE_REF"), root_1);

                        adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1114:5: function_ref
                    {
                    pushFollow(FOLLOW_function_ref_in_resource_ref7640);
                    function_ref550=function_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_ref.add(function_ref550.getTree());


                    // AST REWRITE
                    // elements: function_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1115:4: -> ^( RESOURCE_REF function_ref )
                    {
                        // Express.g:1115:7: ^( RESOURCE_REF function_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_REF, "RESOURCE_REF"), root_1);

                        adaptor.addChild(root_1, stream_function_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1116:5: procedure_ref
                    {
                    pushFollow(FOLLOW_procedure_ref_in_resource_ref7657);
                    procedure_ref551=procedure_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_ref.add(procedure_ref551.getTree());


                    // AST REWRITE
                    // elements: procedure_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1117:4: -> ^( RESOURCE_REF procedure_ref )
                    {
                        // Express.g:1117:7: ^( RESOURCE_REF procedure_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_REF, "RESOURCE_REF"), root_1);

                        adaptor.addChild(root_1, stream_procedure_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1118:5: type_ref
                    {
                    pushFollow(FOLLOW_type_ref_in_resource_ref7674);
                    type_ref552=type_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_ref.add(type_ref552.getTree());


                    // AST REWRITE
                    // elements: type_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1119:4: -> ^( RESOURCE_REF type_ref )
                    {
                        // Express.g:1119:7: ^( RESOURCE_REF type_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RESOURCE_REF, "RESOURCE_REF"), root_1);

                        adaptor.addChild(root_1, stream_type_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, resource_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "resource_ref"

    public static class return_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_stmt"
    // Express.g:1122:1: return_stmt : 'return' ( LPAREN expression RPAREN )? SEMI -> ^( RETURN_STMT ( expression )? ) ;
    public final return_stmt_return return_stmt() throws RecognitionException {
        return_stmt_return retval = new return_stmt_return();
        retval.start = input.LT(1);
        int return_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal553=null;
        Token LPAREN554=null;
        Token RPAREN556=null;
        Token SEMI557=null;
        expression_return expression555 = null;


        CommonTree string_literal553_tree=null;
        CommonTree LPAREN554_tree=null;
        CommonTree RPAREN556_tree=null;
        CommonTree SEMI557_tree=null;
        RewriteRuleTokenStream stream_355=new RewriteRuleTokenStream(adaptor,"token 355");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // Express.g:1123:3: ( 'return' ( LPAREN expression RPAREN )? SEMI -> ^( RETURN_STMT ( expression )? ) )
            // Express.g:1123:6: 'return' ( LPAREN expression RPAREN )? SEMI
            {
            string_literal553=(Token)match(input,355,FOLLOW_355_in_return_stmt7699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_355.add(string_literal553);

            // Express.g:1123:16: ( LPAREN expression RPAREN )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==LPAREN) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // Express.g:1123:19: LPAREN expression RPAREN
                    {
                    LPAREN554=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_return_stmt7705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN554);

                    pushFollow(FOLLOW_expression_in_return_stmt7708);
                    expression555=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression555.getTree());
                    RPAREN556=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_return_stmt7711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN556);


                    }
                    break;

            }

            SEMI557=(Token)match(input,SEMI,FOLLOW_SEMI_in_return_stmt7718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI557);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1124:4: -> ^( RETURN_STMT ( expression )? )
            {
                // Express.g:1124:7: ^( RETURN_STMT ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RETURN_STMT, "RETURN_STMT"), root_1);

                // Express.g:1124:21: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, return_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_stmt"

    public static class rule_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_decl"
    // Express.g:1127:1: rule_decl : rule_head ( algorithm_head )? ( stmt )* where_clause 'end_rule' SEMI -> ^( RULE_DECL rule_head ( algorithm_head )? ( stmt )* where_clause ) ;
    public final rule_decl_return rule_decl() throws RecognitionException {
        rule_decl_return retval = new rule_decl_return();
        retval.start = input.LT(1);
        int rule_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal562=null;
        Token SEMI563=null;
        rule_head_return rule_head558 = null;

        algorithm_head_return algorithm_head559 = null;

        stmt_return stmt560 = null;

        where_clause_return where_clause561 = null;


        CommonTree string_literal562_tree=null;
        CommonTree SEMI563_tree=null;
        RewriteRuleTokenStream stream_356=new RewriteRuleTokenStream(adaptor,"token 356");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_algorithm_head=new RewriteRuleSubtreeStream(adaptor,"rule algorithm_head");
        RewriteRuleSubtreeStream stream_rule_head=new RewriteRuleSubtreeStream(adaptor,"rule rule_head");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // Express.g:1128:3: ( rule_head ( algorithm_head )? ( stmt )* where_clause 'end_rule' SEMI -> ^( RULE_DECL rule_head ( algorithm_head )? ( stmt )* where_clause ) )
            // Express.g:1128:6: rule_head ( algorithm_head )? ( stmt )* where_clause 'end_rule' SEMI
            {
            pushFollow(FOLLOW_rule_head_in_rule_decl7744);
            rule_head558=rule_head();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_head.add(rule_head558.getTree());
            if ( state.backtracking==0 ) {
              newScope("rule");
            }
            // Express.g:1128:36: ( algorithm_head )?
            int alt161=2;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // Express.g:0:0: algorithm_head
                    {
                    pushFollow(FOLLOW_algorithm_head_in_rule_decl7748);
                    algorithm_head559=algorithm_head();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_algorithm_head.add(algorithm_head559.getTree());

                    }
                    break;

            }

            // Express.g:1128:52: ( stmt )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( ((LA162_0>=PROCEDURE_INSERT && LA162_0<=PROCEDURE_REMOVE)||(LA162_0>=IDENT && LA162_0<=SEMI)||LA162_0==295||LA162_0==304||LA162_0==307||LA162_0==323||LA162_0==329||LA162_0==352||LA162_0==355||LA162_0==361) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // Express.g:0:0: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_rule_decl7751);
            	    stmt560=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmt.add(stmt560.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            pushFollow(FOLLOW_where_clause_in_rule_decl7755);
            where_clause561=where_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_where_clause.add(where_clause561.getTree());
            string_literal562=(Token)match(input,356,FOLLOW_356_in_rule_decl7758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_356.add(string_literal562);

            if ( state.backtracking==0 ) {
               upScope();log.debug("end of rule"); 
            }
            SEMI563=(Token)match(input,SEMI,FOLLOW_SEMI_in_rule_decl7762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI563);



            // AST REWRITE
            // elements: rule_head, stmt, where_clause, algorithm_head
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1129:3: -> ^( RULE_DECL rule_head ( algorithm_head )? ( stmt )* where_clause )
            {
                // Express.g:1129:6: ^( RULE_DECL rule_head ( algorithm_head )? ( stmt )* where_clause )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RULE_DECL, "RULE_DECL"), root_1);

                adaptor.addChild(root_1, stream_rule_head.nextTree());
                // Express.g:1129:28: ( algorithm_head )?
                if ( stream_algorithm_head.hasNext() ) {
                    adaptor.addChild(root_1, stream_algorithm_head.nextTree());

                }
                stream_algorithm_head.reset();
                // Express.g:1129:44: ( stmt )*
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.nextTree());

                }
                stream_stmt.reset();
                adaptor.addChild(root_1, stream_where_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, rule_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rule_decl"

    public static class rule_head_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_head"
    // Express.g:1132:1: rule_head : ({...}? => 'rule' rule_id 'for' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI | 'rule' rule_id 'for' LPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI -> ^( RULE_HEAD rule_id ( entity_ref )+ ) );
    public final rule_head_return rule_head() throws RecognitionException {
        rule_head_return retval = new rule_head_return();
        retval.start = input.LT(1);
        int rule_head_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal564=null;
        Token string_literal566=null;
        Token LPAREN567=null;
        Token IDENT568=null;
        Token COMMA569=null;
        Token IDENT570=null;
        Token RPAREN571=null;
        Token SEMI572=null;
        Token string_literal573=null;
        Token string_literal575=null;
        Token LPAREN576=null;
        Token COMMA578=null;
        Token RPAREN580=null;
        Token SEMI581=null;
        rule_id_return rule_id565 = null;

        rule_id_return rule_id574 = null;

        entity_ref_return entity_ref577 = null;

        entity_ref_return entity_ref579 = null;


        CommonTree string_literal564_tree=null;
        CommonTree string_literal566_tree=null;
        CommonTree LPAREN567_tree=null;
        CommonTree IDENT568_tree=null;
        CommonTree COMMA569_tree=null;
        CommonTree IDENT570_tree=null;
        CommonTree RPAREN571_tree=null;
        CommonTree SEMI572_tree=null;
        CommonTree string_literal573_tree=null;
        CommonTree string_literal575_tree=null;
        CommonTree LPAREN576_tree=null;
        CommonTree COMMA578_tree=null;
        CommonTree RPAREN580_tree=null;
        CommonTree SEMI581_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_357=new RewriteRuleTokenStream(adaptor,"token 357");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_296=new RewriteRuleTokenStream(adaptor,"token 296");
        RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // Express.g:1133:3: ({...}? => 'rule' rule_id 'for' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI | 'rule' rule_id 'for' LPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI -> ^( RULE_HEAD rule_id ( entity_ref )+ ) )
            int alt165=2;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // Express.g:1133:5: {...}? => 'rule' rule_id 'for' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "rule_head", " isFirst ");
                    }
                    string_literal564=(Token)match(input,357,FOLLOW_357_in_rule_head7797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal564_tree = (CommonTree)adaptor.create(string_literal564);
                    adaptor.addChild(root_0, string_literal564_tree);
                    }
                    pushFollow(FOLLOW_rule_id_in_rule_head7799);
                    rule_id565=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule_id565.getTree());
                    string_literal566=(Token)match(input,296,FOLLOW_296_in_rule_head7801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal566_tree = (CommonTree)adaptor.create(string_literal566);
                    adaptor.addChild(root_0, string_literal566_tree);
                    }
                    LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_rule_head7803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN567_tree = (CommonTree)adaptor.create(LPAREN567);
                    adaptor.addChild(root_0, LPAREN567_tree);
                    }
                    IDENT568=(Token)match(input,IDENT,FOLLOW_IDENT_in_rule_head7805); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT568_tree = (CommonTree)adaptor.create(IDENT568);
                    adaptor.addChild(root_0, IDENT568_tree);
                    }
                    // Express.g:1133:54: ( COMMA IDENT )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==COMMA) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // Express.g:1133:56: COMMA IDENT
                    	    {
                    	    COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_head7809); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA569_tree = (CommonTree)adaptor.create(COMMA569);
                    	    adaptor.addChild(root_0, COMMA569_tree);
                    	    }
                    	    IDENT570=(Token)match(input,IDENT,FOLLOW_IDENT_in_rule_head7811); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    IDENT570_tree = (CommonTree)adaptor.create(IDENT570);
                    	    adaptor.addChild(root_0, IDENT570_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);

                    RPAREN571=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_rule_head7816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN571_tree = (CommonTree)adaptor.create(RPAREN571);
                    adaptor.addChild(root_0, RPAREN571_tree);
                    }
                    SEMI572=(Token)match(input,SEMI,FOLLOW_SEMI_in_rule_head7818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI572_tree = (CommonTree)adaptor.create(SEMI572);
                    adaptor.addChild(root_0, SEMI572_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1134:6: 'rule' rule_id 'for' LPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI
                    {
                    string_literal573=(Token)match(input,357,FOLLOW_357_in_rule_head7825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_357.add(string_literal573);

                    pushFollow(FOLLOW_rule_id_in_rule_head7828);
                    rule_id574=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_id.add(rule_id574.getTree());
                    string_literal575=(Token)match(input,296,FOLLOW_296_in_rule_head7831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_296.add(string_literal575);

                    LPAREN576=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_rule_head7834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN576);

                    pushFollow(FOLLOW_entity_ref_in_rule_head7837);
                    entity_ref577=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref577.getTree());
                    // Express.g:1134:50: ( COMMA entity_ref )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==COMMA) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // Express.g:1134:53: COMMA entity_ref
                    	    {
                    	    COMMA578=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_head7843); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA578);

                    	    pushFollow(FOLLOW_entity_ref_in_rule_head7846);
                    	    entity_ref579=entity_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref579.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    RPAREN580=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_rule_head7853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN580);

                    SEMI581=(Token)match(input,SEMI,FOLLOW_SEMI_in_rule_head7856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI581);



                    // AST REWRITE
                    // elements: rule_id, entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1135:4: -> ^( RULE_HEAD rule_id ( entity_ref )+ )
                    {
                        // Express.g:1135:7: ^( RULE_HEAD rule_id ( entity_ref )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RULE_HEAD, "RULE_HEAD"), root_1);

                        adaptor.addChild(root_1, stream_rule_id.nextTree());
                        if ( !(stream_entity_ref.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_entity_ref.hasNext() ) {
                            adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        }
                        stream_entity_ref.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, rule_head_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rule_head"

    public static class rule_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_id"
    // Express.g:1146:1: rule_id : IDENT -> ^( RULE_ID IDENT ) ;
    public final rule_id_return rule_id() throws RecognitionException {
        rule_id_return retval = new rule_id_return();
        retval.start = input.LT(1);
        int rule_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT582=null;

        CommonTree IDENT582_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // Express.g:1147:3: ( IDENT -> ^( RULE_ID IDENT ) )
            // Express.g:1147:6: IDENT
            {
            IDENT582=(Token)match(input,IDENT,FOLLOW_IDENT_in_rule_id7890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT582);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1147:12: -> ^( RULE_ID IDENT )
            {
                // Express.g:1147:15: ^( RULE_ID IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RULE_ID, "RULE_ID"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, rule_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rule_id"

    public static class schema_id_return extends ParserRuleReturnScope {
        public String s;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_id"
    // Express.g:1150:1: schema_id returns [String s] : ({...}?id= IDENT | {...}? IDENT -> ^( SCHEMA_ID IDENT ) );
    public final schema_id_return schema_id() throws RecognitionException {
        schema_id_return retval = new schema_id_return();
        retval.start = input.LT(1);
        int schema_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token IDENT583=null;

        CommonTree id_tree=null;
        CommonTree IDENT583_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // Express.g:1151:3: ({...}?id= IDENT | {...}? IDENT -> ^( SCHEMA_ID IDENT ) )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==IDENT) ) {
                int LA166_1 = input.LA(2);

                if ( ((synpred245_Express()&&( isFirst ))) ) {
                    alt166=1;
                }
                else if ( ((nextIs(SCHEMA_IDENT))) ) {
                    alt166=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // Express.g:1151:6: {...}?id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "schema_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_schema_id7920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.s =(id!=null?id.getText():null); addId(retval.s,SCHEMA_IDENT); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1152:6: {...}? IDENT
                    {
                    if ( !((nextIs(SCHEMA_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "schema_id", "nextIs(SCHEMA_IDENT)");
                    }
                    IDENT583=(Token)match(input,IDENT,FOLLOW_IDENT_in_schema_id7931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT583);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1152:36: -> ^( SCHEMA_ID IDENT )
                    {
                        // Express.g:1152:39: ^( SCHEMA_ID IDENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCHEMA_ID, "SCHEMA_ID"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, schema_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_id"

    public static class schema_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_body"
    // Express.g:1155:1: schema_body : ( interface_specification )* ( constant_decl )? ( declaration | rule_decl )* -> ^( SCHEMA_BODY ( interface_specification )* ( constant_decl )? ( declaration )* ( rule_decl )* ) ;
    public final schema_body_return schema_body() throws RecognitionException {
        schema_body_return retval = new schema_body_return();
        retval.start = input.LT(1);
        int schema_body_StartIndex = input.index();
        CommonTree root_0 = null;

        interface_specification_return interface_specification584 = null;

        constant_decl_return constant_decl585 = null;

        declaration_return declaration586 = null;

        rule_decl_return rule_decl587 = null;


        RewriteRuleSubtreeStream stream_constant_decl=new RewriteRuleSubtreeStream(adaptor,"rule constant_decl");
        RewriteRuleSubtreeStream stream_interface_specification=new RewriteRuleSubtreeStream(adaptor,"rule interface_specification");
        RewriteRuleSubtreeStream stream_rule_decl=new RewriteRuleSubtreeStream(adaptor,"rule rule_decl");
        RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // Express.g:1156:3: ( ( interface_specification )* ( constant_decl )? ( declaration | rule_decl )* -> ^( SCHEMA_BODY ( interface_specification )* ( constant_decl )? ( declaration )* ( rule_decl )* ) )
            // Express.g:1156:5: ( interface_specification )* ( constant_decl )? ( declaration | rule_decl )*
            {
            // Express.g:1156:5: ( interface_specification )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==348||LA167_0==360) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // Express.g:0:0: interface_specification
            	    {
            	    pushFollow(FOLLOW_interface_specification_in_schema_body7952);
            	    interface_specification584=interface_specification();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interface_specification.add(interface_specification584.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);

            // Express.g:1156:30: ( constant_decl )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==309) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // Express.g:0:0: constant_decl
                    {
                    pushFollow(FOLLOW_constant_decl_in_schema_body7955);
                    constant_decl585=constant_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_decl.add(constant_decl585.getTree());

                    }
                    break;

            }

            // Express.g:1156:45: ( declaration | rule_decl )*
            loop169:
            do {
                int alt169=3;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==311||LA169_0==317||LA169_0==325||LA169_0==345||LA169_0==364) ) {
                    alt169=1;
                }
                else if ( (LA169_0==357) ) {
                    alt169=2;
                }


                switch (alt169) {
            	case 1 :
            	    // Express.g:1156:47: declaration
            	    {
            	    pushFollow(FOLLOW_declaration_in_schema_body7960);
            	    declaration586=declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declaration.add(declaration586.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Express.g:1156:61: rule_decl
            	    {
            	    pushFollow(FOLLOW_rule_decl_in_schema_body7964);
            	    rule_decl587=rule_decl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rule_decl.add(rule_decl587.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);



            // AST REWRITE
            // elements: rule_decl, interface_specification, constant_decl, declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1157:4: -> ^( SCHEMA_BODY ( interface_specification )* ( constant_decl )? ( declaration )* ( rule_decl )* )
            {
                // Express.g:1157:7: ^( SCHEMA_BODY ( interface_specification )* ( constant_decl )? ( declaration )* ( rule_decl )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCHEMA_BODY, "SCHEMA_BODY"), root_1);

                // Express.g:1157:21: ( interface_specification )*
                while ( stream_interface_specification.hasNext() ) {
                    adaptor.addChild(root_1, stream_interface_specification.nextTree());

                }
                stream_interface_specification.reset();
                // Express.g:1157:46: ( constant_decl )?
                if ( stream_constant_decl.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant_decl.nextTree());

                }
                stream_constant_decl.reset();
                // Express.g:1157:61: ( declaration )*
                while ( stream_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_declaration.nextTree());

                }
                stream_declaration.reset();
                // Express.g:1157:74: ( rule_decl )*
                while ( stream_rule_decl.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_decl.nextTree());

                }
                stream_rule_decl.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, schema_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_body"

    public static class schema_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_decl"
    // Express.g:1160:1: schema_decl : 'schema' id= schema_id ( schema_version_id )? SEMI schema_body 'end_schema' SEMI -> ^( SCHEMA_DECL $id ( schema_version_id )? schema_body ) ;
    public final schema_decl_return schema_decl() throws RecognitionException {
        schema_decl_return retval = new schema_decl_return();
        retval.start = input.LT(1);
        int schema_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal588=null;
        Token SEMI590=null;
        Token string_literal592=null;
        Token SEMI593=null;
        schema_id_return id = null;

        schema_version_id_return schema_version_id589 = null;

        schema_body_return schema_body591 = null;


        CommonTree string_literal588_tree=null;
        CommonTree SEMI590_tree=null;
        CommonTree string_literal592_tree=null;
        CommonTree SEMI593_tree=null;
        RewriteRuleTokenStream stream_358=new RewriteRuleTokenStream(adaptor,"token 358");
        RewriteRuleTokenStream stream_359=new RewriteRuleTokenStream(adaptor,"token 359");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_schema_id=new RewriteRuleSubtreeStream(adaptor,"rule schema_id");
        RewriteRuleSubtreeStream stream_schema_version_id=new RewriteRuleSubtreeStream(adaptor,"rule schema_version_id");
        RewriteRuleSubtreeStream stream_schema_body=new RewriteRuleSubtreeStream(adaptor,"rule schema_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // Express.g:1161:3: ( 'schema' id= schema_id ( schema_version_id )? SEMI schema_body 'end_schema' SEMI -> ^( SCHEMA_DECL $id ( schema_version_id )? schema_body ) )
            // Express.g:1161:6: 'schema' id= schema_id ( schema_version_id )? SEMI schema_body 'end_schema' SEMI
            {
            string_literal588=(Token)match(input,358,FOLLOW_358_in_schema_decl8002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_358.add(string_literal588);

            pushFollow(FOLLOW_schema_id_in_schema_decl8006);
            id=schema_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_schema_id.add(id.getTree());
            if ( state.backtracking==0 ) {
               log.debug("Schema !"); newSchemaScope(id.s); 
            }
            // Express.g:1161:77: ( schema_version_id )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==STRING) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // Express.g:0:0: schema_version_id
                    {
                    pushFollow(FOLLOW_schema_version_id_in_schema_decl8010);
                    schema_version_id589=schema_version_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_schema_version_id.add(schema_version_id589.getTree());

                    }
                    break;

            }

            SEMI590=(Token)match(input,SEMI,FOLLOW_SEMI_in_schema_decl8014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI590);

            pushFollow(FOLLOW_schema_body_in_schema_decl8016);
            schema_body591=schema_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_schema_body.add(schema_body591.getTree());
            string_literal592=(Token)match(input,359,FOLLOW_359_in_schema_decl8018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_359.add(string_literal592);

            SEMI593=(Token)match(input,SEMI,FOLLOW_SEMI_in_schema_decl8020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI593);

            if ( state.backtracking==0 ) {
               upScope();log.debug("end of schema");
            }


            // AST REWRITE
            // elements: id, schema_version_id, schema_body
            // token labels: 
            // rule labels: id, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1162:4: -> ^( SCHEMA_DECL $id ( schema_version_id )? schema_body )
            {
                // Express.g:1162:7: ^( SCHEMA_DECL $id ( schema_version_id )? schema_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCHEMA_DECL, "SCHEMA_DECL"), root_1);

                adaptor.addChild(root_1, stream_id.nextTree());
                // Express.g:1162:25: ( schema_version_id )?
                if ( stream_schema_version_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_schema_version_id.nextTree());

                }
                stream_schema_version_id.reset();
                adaptor.addChild(root_1, stream_schema_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, schema_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_decl"

    public static class schema_version_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_version_id"
    // Express.g:1165:1: schema_version_id : STRING -> ^( SCHEMA_VERSION_ID STRING ) ;
    public final schema_version_id_return schema_version_id() throws RecognitionException {
        schema_version_id_return retval = new schema_version_id_return();
        retval.start = input.LT(1);
        int schema_version_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STRING594=null;

        CommonTree STRING594_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // Express.g:1166:3: ( STRING -> ^( SCHEMA_VERSION_ID STRING ) )
            // Express.g:1166:6: STRING
            {
            STRING594=(Token)match(input,STRING,FOLLOW_STRING_in_schema_version_id8053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING.add(STRING594);



            // AST REWRITE
            // elements: STRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1166:13: -> ^( SCHEMA_VERSION_ID STRING )
            {
                // Express.g:1166:16: ^( SCHEMA_VERSION_ID STRING )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCHEMA_VERSION_ID, "SCHEMA_VERSION_ID"), root_1);

                adaptor.addChild(root_1, stream_STRING.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, schema_version_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_version_id"

    public static class interface_specification_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_specification"
    // Express.g:1169:1: interface_specification : ( reference_clause -> ^( INTERFACE_SPECIFICATION reference_clause ) | use_clause -> ^( INTERFACE_SPECIFICATION use_clause ) );
    public final interface_specification_return interface_specification() throws RecognitionException {
        interface_specification_return retval = new interface_specification_return();
        retval.start = input.LT(1);
        int interface_specification_StartIndex = input.index();
        CommonTree root_0 = null;

        reference_clause_return reference_clause595 = null;

        use_clause_return use_clause596 = null;


        RewriteRuleSubtreeStream stream_use_clause=new RewriteRuleSubtreeStream(adaptor,"rule use_clause");
        RewriteRuleSubtreeStream stream_reference_clause=new RewriteRuleSubtreeStream(adaptor,"rule reference_clause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // Express.g:1170:3: ( reference_clause -> ^( INTERFACE_SPECIFICATION reference_clause ) | use_clause -> ^( INTERFACE_SPECIFICATION use_clause ) )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==348) ) {
                alt171=1;
            }
            else if ( (LA171_0==360) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // Express.g:1170:6: reference_clause
                    {
                    pushFollow(FOLLOW_reference_clause_in_interface_specification8075);
                    reference_clause595=reference_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reference_clause.add(reference_clause595.getTree());


                    // AST REWRITE
                    // elements: reference_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1170:23: -> ^( INTERFACE_SPECIFICATION reference_clause )
                    {
                        // Express.g:1170:26: ^( INTERFACE_SPECIFICATION reference_clause )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_SPECIFICATION, "INTERFACE_SPECIFICATION"), root_1);

                        adaptor.addChild(root_1, stream_reference_clause.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1171:6: use_clause
                    {
                    pushFollow(FOLLOW_use_clause_in_interface_specification8090);
                    use_clause596=use_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_use_clause.add(use_clause596.getTree());


                    // AST REWRITE
                    // elements: use_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1171:17: -> ^( INTERFACE_SPECIFICATION use_clause )
                    {
                        // Express.g:1171:20: ^( INTERFACE_SPECIFICATION use_clause )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_SPECIFICATION, "INTERFACE_SPECIFICATION"), root_1);

                        adaptor.addChild(root_1, stream_use_clause.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, interface_specification_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_specification"

    public static class use_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "use_clause"
    // Express.g:1174:1: use_clause : ({...}? => 'use' 'from' id= IDENT ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )? SEMI | 'use' 'from' schema_ref ( LPAREN named_type_or_rename ( COMMA named_type_or_rename )* RPAREN )? SEMI -> ^( USE_CLAUSE schema_ref ( named_type_or_rename )* ) );
    public final use_clause_return use_clause() throws RecognitionException {
        use_clause_return retval = new use_clause_return();
        retval.start = input.LT(1);
        int use_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token string_literal597=null;
        Token string_literal598=null;
        Token LPAREN599=null;
        Token COMMA600=null;
        Token RPAREN601=null;
        Token SEMI602=null;
        Token string_literal603=null;
        Token string_literal604=null;
        Token LPAREN606=null;
        Token COMMA608=null;
        Token RPAREN610=null;
        Token SEMI611=null;
        named_type_or_rename_return ei = null;

        schema_ref_return schema_ref605 = null;

        named_type_or_rename_return named_type_or_rename607 = null;

        named_type_or_rename_return named_type_or_rename609 = null;


        CommonTree id_tree=null;
        CommonTree string_literal597_tree=null;
        CommonTree string_literal598_tree=null;
        CommonTree LPAREN599_tree=null;
        CommonTree COMMA600_tree=null;
        CommonTree RPAREN601_tree=null;
        CommonTree SEMI602_tree=null;
        CommonTree string_literal603_tree=null;
        CommonTree string_literal604_tree=null;
        CommonTree LPAREN606_tree=null;
        CommonTree COMMA608_tree=null;
        CommonTree RPAREN610_tree=null;
        CommonTree SEMI611_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_349=new RewriteRuleTokenStream(adaptor,"token 349");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_360=new RewriteRuleTokenStream(adaptor,"token 360");
        RewriteRuleSubtreeStream stream_named_type_or_rename=new RewriteRuleSubtreeStream(adaptor,"rule named_type_or_rename");
        RewriteRuleSubtreeStream stream_schema_ref=new RewriteRuleSubtreeStream(adaptor,"rule schema_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // Express.g:1175:3: ({...}? => 'use' 'from' id= IDENT ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )? SEMI | 'use' 'from' schema_ref ( LPAREN named_type_or_rename ( COMMA named_type_or_rename )* RPAREN )? SEMI -> ^( USE_CLAUSE schema_ref ( named_type_or_rename )* ) )
            int alt176=2;
            alt176 = dfa176.predict(input);
            switch (alt176) {
                case 1 :
                    // Express.g:1175:5: {...}? => 'use' 'from' id= IDENT ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )? SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "use_clause", " isFirst ");
                    }
                    string_literal597=(Token)match(input,360,FOLLOW_360_in_use_clause8114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal597_tree = (CommonTree)adaptor.create(string_literal597);
                    adaptor.addChild(root_0, string_literal597_tree);
                    }
                    string_literal598=(Token)match(input,349,FOLLOW_349_in_use_clause8116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal598_tree = (CommonTree)adaptor.create(string_literal598);
                    adaptor.addChild(root_0, string_literal598_tree);
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_use_clause8120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    // Express.g:1176:3: ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==LPAREN) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // Express.g:1176:5: LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN
                            {
                            LPAREN599=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_use_clause8127); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN599_tree = (CommonTree)adaptor.create(LPAREN599);
                            adaptor.addChild(root_0, LPAREN599_tree);
                            }
                            pushFollow(FOLLOW_named_type_or_rename_in_use_clause8131);
                            ei=named_type_or_rename();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ei.getTree());
                            if ( state.backtracking==0 ) {
                               ei.ei.setSchema((id!=null?id.getText():null)); addUse(ei.ei); 
                            }
                            // Express.g:1177:3: ( COMMA ei= named_type_or_rename )*
                            loop172:
                            do {
                                int alt172=2;
                                int LA172_0 = input.LA(1);

                                if ( (LA172_0==COMMA) ) {
                                    alt172=1;
                                }


                                switch (alt172) {
                            	case 1 :
                            	    // Express.g:1177:5: COMMA ei= named_type_or_rename
                            	    {
                            	    COMMA600=(Token)match(input,COMMA,FOLLOW_COMMA_in_use_clause8140); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    COMMA600_tree = (CommonTree)adaptor.create(COMMA600);
                            	    adaptor.addChild(root_0, COMMA600_tree);
                            	    }
                            	    pushFollow(FOLLOW_named_type_or_rename_in_use_clause8144);
                            	    ei=named_type_or_rename();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ei.getTree());
                            	    if ( state.backtracking==0 ) {
                            	       ei.ei.setSchema((id!=null?id.getText():null)); addUse(ei.ei); 
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop172;
                                }
                            } while (true);

                            RPAREN601=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_use_clause8154); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN601_tree = (CommonTree)adaptor.create(RPAREN601);
                            adaptor.addChild(root_0, RPAREN601_tree);
                            }

                            }
                            break;

                    }

                    SEMI602=(Token)match(input,SEMI,FOLLOW_SEMI_in_use_clause8159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI602_tree = (CommonTree)adaptor.create(SEMI602);
                    adaptor.addChild(root_0, SEMI602_tree);
                    }
                    if ( state.backtracking==0 ) {
                       if (ei==null) {addAllUseExternals((id!=null?id.getText():null)); }
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1180:6: 'use' 'from' schema_ref ( LPAREN named_type_or_rename ( COMMA named_type_or_rename )* RPAREN )? SEMI
                    {
                    string_literal603=(Token)match(input,360,FOLLOW_360_in_use_clause8171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_360.add(string_literal603);

                    string_literal604=(Token)match(input,349,FOLLOW_349_in_use_clause8173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_349.add(string_literal604);

                    pushFollow(FOLLOW_schema_ref_in_use_clause8175);
                    schema_ref605=schema_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_schema_ref.add(schema_ref605.getTree());
                    // Express.g:1180:30: ( LPAREN named_type_or_rename ( COMMA named_type_or_rename )* RPAREN )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==LPAREN) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // Express.g:1180:32: LPAREN named_type_or_rename ( COMMA named_type_or_rename )* RPAREN
                            {
                            LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_use_clause8179); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN606);

                            pushFollow(FOLLOW_named_type_or_rename_in_use_clause8181);
                            named_type_or_rename607=named_type_or_rename();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_named_type_or_rename.add(named_type_or_rename607.getTree());
                            // Express.g:1180:60: ( COMMA named_type_or_rename )*
                            loop174:
                            do {
                                int alt174=2;
                                int LA174_0 = input.LA(1);

                                if ( (LA174_0==COMMA) ) {
                                    alt174=1;
                                }


                                switch (alt174) {
                            	case 1 :
                            	    // Express.g:1180:62: COMMA named_type_or_rename
                            	    {
                            	    COMMA608=(Token)match(input,COMMA,FOLLOW_COMMA_in_use_clause8185); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA608);

                            	    pushFollow(FOLLOW_named_type_or_rename_in_use_clause8187);
                            	    named_type_or_rename609=named_type_or_rename();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_named_type_or_rename.add(named_type_or_rename609.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop174;
                                }
                            } while (true);

                            RPAREN610=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_use_clause8192); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN610);


                            }
                            break;

                    }

                    SEMI611=(Token)match(input,SEMI,FOLLOW_SEMI_in_use_clause8197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI611);



                    // AST REWRITE
                    // elements: named_type_or_rename, schema_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1181:3: -> ^( USE_CLAUSE schema_ref ( named_type_or_rename )* )
                    {
                        // Express.g:1181:6: ^( USE_CLAUSE schema_ref ( named_type_or_rename )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(USE_CLAUSE, "USE_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_schema_ref.nextTree());
                        // Express.g:1181:30: ( named_type_or_rename )*
                        while ( stream_named_type_or_rename.hasNext() ) {
                            adaptor.addChild(root_1, stream_named_type_or_rename.nextTree());

                        }
                        stream_named_type_or_rename.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, use_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "use_clause"

    public static class named_type_or_rename_return extends ParserRuleReturnScope {
        public ExternalId ei;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_type_or_rename"
    // Express.g:1184:1: named_type_or_rename returns [ExternalId ei] : ({...}? =>id= IDENT ( 'as' s= rename_id )? | named_types ( 'as' ( entity_id | type_id ) )? -> ^( NAMED_TYPE_OR_RENAME named_types ( entity_id )? ( type_id )? ) );
    public final named_type_or_rename_return named_type_or_rename() throws RecognitionException {
        named_type_or_rename_return retval = new named_type_or_rename_return();
        retval.start = input.LT(1);
        int named_type_or_rename_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token string_literal612=null;
        Token string_literal614=null;
        rename_id_return s = null;

        named_types_return named_types613 = null;

        entity_id_return entity_id615 = null;

        type_id_return type_id616 = null;


        CommonTree id_tree=null;
        CommonTree string_literal612_tree=null;
        CommonTree string_literal614_tree=null;
        RewriteRuleTokenStream stream_354=new RewriteRuleTokenStream(adaptor,"token 354");
        RewriteRuleSubtreeStream stream_type_id=new RewriteRuleSubtreeStream(adaptor,"rule type_id");
        RewriteRuleSubtreeStream stream_named_types=new RewriteRuleSubtreeStream(adaptor,"rule named_types");
        RewriteRuleSubtreeStream stream_entity_id=new RewriteRuleSubtreeStream(adaptor,"rule entity_id");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // Express.g:1185:3: ({...}? =>id= IDENT ( 'as' s= rename_id )? | named_types ( 'as' ( entity_id | type_id ) )? -> ^( NAMED_TYPE_OR_RENAME named_types ( entity_id )? ( type_id )? ) )
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==IDENT) ) {
                int LA180_1 = input.LA(2);

                if ( ((synpred258_Express()&&( isFirst ))) ) {
                    alt180=1;
                }
                else if ( (((nextIs(TYPE_IDENT))||(nextIs(TYPE_VAR_IDENT))||(nextIs(ENTITY_IDENT))||(nextIs(ENTITY_PARAM_IDENT))||(nextIs(ENTITY_VAR_IDENT))||(nextIs(TYPE_ATTR_IDENT))||( isFirst )||(nextIs(TYPE_PARAM_IDENT))||(nextIs(ENTITY_ATTR_IDENT)))) ) {
                    alt180=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    // Express.g:1185:5: {...}? =>id= IDENT ( 'as' s= rename_id )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "named_type_or_rename", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_named_type_or_rename8232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.ei = new ExternalId((id!=null?id.getText():null)); 
                    }
                    // Express.g:1185:65: ( 'as' s= rename_id )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==354) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // Express.g:1185:67: 'as' s= rename_id
                            {
                            string_literal612=(Token)match(input,354,FOLLOW_354_in_named_type_or_rename8238); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal612_tree = (CommonTree)adaptor.create(string_literal612);
                            adaptor.addChild(root_0, string_literal612_tree);
                            }
                            pushFollow(FOLLOW_rename_id_in_named_type_or_rename8242);
                            s=rename_id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
                            if ( state.backtracking==0 ) {
                               retval.ei.setRename((s!=null?s.s:null)); 
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Express.g:1186:6: named_types ( 'as' ( entity_id | type_id ) )?
                    {
                    pushFollow(FOLLOW_named_types_in_named_type_or_rename8254);
                    named_types613=named_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_named_types.add(named_types613.getTree());
                    // Express.g:1186:18: ( 'as' ( entity_id | type_id ) )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==354) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // Express.g:1186:20: 'as' ( entity_id | type_id )
                            {
                            string_literal614=(Token)match(input,354,FOLLOW_354_in_named_type_or_rename8258); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_354.add(string_literal614);

                            // Express.g:1186:25: ( entity_id | type_id )
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==IDENT) ) {
                                int LA178_1 = input.LA(2);

                                if ( (((synpred259_Express()&&( isFirst ))||(synpred259_Express()&&(nextIs(ENTITY_IDENT))))) ) {
                                    alt178=1;
                                }
                                else if ( (((nextIs(TYPE_IDENT))||( isFirst ))) ) {
                                    alt178=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 178, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 178, 0, input);

                                throw nvae;
                            }
                            switch (alt178) {
                                case 1 :
                                    // Express.g:1186:27: entity_id
                                    {
                                    pushFollow(FOLLOW_entity_id_in_named_type_or_rename8262);
                                    entity_id615=entity_id();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_entity_id.add(entity_id615.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Express.g:1186:39: type_id
                                    {
                                    pushFollow(FOLLOW_type_id_in_named_type_or_rename8266);
                                    type_id616=type_id();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type_id.add(type_id616.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: entity_id, named_types, type_id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1187:3: -> ^( NAMED_TYPE_OR_RENAME named_types ( entity_id )? ( type_id )? )
                    {
                        // Express.g:1187:6: ^( NAMED_TYPE_OR_RENAME named_types ( entity_id )? ( type_id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NAMED_TYPE_OR_RENAME, "NAMED_TYPE_OR_RENAME"), root_1);

                        adaptor.addChild(root_1, stream_named_types.nextTree());
                        // Express.g:1187:41: ( entity_id )?
                        if ( stream_entity_id.hasNext() ) {
                            adaptor.addChild(root_1, stream_entity_id.nextTree());

                        }
                        stream_entity_id.reset();
                        // Express.g:1187:52: ( type_id )?
                        if ( stream_type_id.hasNext() ) {
                            adaptor.addChild(root_1, stream_type_id.nextTree());

                        }
                        stream_type_id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, named_type_or_rename_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "named_type_or_rename"

    public static class selector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // Express.g:1190:1: selector : expression -> ^( SELECTOR expression ) ;
    public final selector_return selector() throws RecognitionException {
        selector_return retval = new selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        CommonTree root_0 = null;

        expression_return expression617 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // Express.g:1191:3: ( expression -> ^( SELECTOR expression ) )
            // Express.g:1191:6: expression
            {
            pushFollow(FOLLOW_expression_in_selector8301);
            expression617=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression617.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1191:17: -> ^( SELECTOR expression )
            {
                // Express.g:1191:20: ^( SELECTOR expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTOR, "SELECTOR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class set_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_type"
    // Express.g:1194:1: set_type : 'set' ( bound_spec )? 'of' base_type -> ^( SET_TYPE ( bound_spec )? base_type ) ;
    public final set_type_return set_type() throws RecognitionException {
        set_type_return retval = new set_type_return();
        retval.start = input.LT(1);
        int set_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal618=null;
        Token string_literal620=null;
        bound_spec_return bound_spec619 = null;

        base_type_return base_type621 = null;


        CommonTree string_literal618_tree=null;
        CommonTree string_literal620_tree=null;
        RewriteRuleTokenStream stream_322=new RewriteRuleTokenStream(adaptor,"token 322");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_base_type=new RewriteRuleSubtreeStream(adaptor,"rule base_type");
        RewriteRuleSubtreeStream stream_bound_spec=new RewriteRuleSubtreeStream(adaptor,"rule bound_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // Express.g:1195:3: ( 'set' ( bound_spec )? 'of' base_type -> ^( SET_TYPE ( bound_spec )? base_type ) )
            // Express.g:1195:6: 'set' ( bound_spec )? 'of' base_type
            {
            string_literal618=(Token)match(input,322,FOLLOW_322_in_set_type8323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_322.add(string_literal618);

            // Express.g:1195:13: ( bound_spec )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LBRACK) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Express.g:0:0: bound_spec
                    {
                    pushFollow(FOLLOW_bound_spec_in_set_type8326);
                    bound_spec619=bound_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound_spec.add(bound_spec619.getTree());

                    }
                    break;

            }

            string_literal620=(Token)match(input,294,FOLLOW_294_in_set_type8330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal620);

            pushFollow(FOLLOW_base_type_in_set_type8333);
            base_type621=base_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_base_type.add(base_type621.getTree());


            // AST REWRITE
            // elements: base_type, bound_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1196:3: -> ^( SET_TYPE ( bound_spec )? base_type )
            {
                // Express.g:1196:6: ^( SET_TYPE ( bound_spec )? base_type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SET_TYPE, "SET_TYPE"), root_1);

                // Express.g:1196:17: ( bound_spec )?
                if ( stream_bound_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound_spec.nextTree());

                }
                stream_bound_spec.reset();
                adaptor.addChild(root_1, stream_base_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, set_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_type"

    public static class simple_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expression"
    // Express.g:1199:1: simple_expression : term ( add_like_op term )* -> ^( SIMPLE_EXPRESSION term ( add_like_op term )* ) ;
    public final simple_expression_return simple_expression() throws RecognitionException {
        simple_expression_return retval = new simple_expression_return();
        retval.start = input.LT(1);
        int simple_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        term_return term622 = null;

        add_like_op_return add_like_op623 = null;

        term_return term624 = null;


        RewriteRuleSubtreeStream stream_add_like_op=new RewriteRuleSubtreeStream(adaptor,"rule add_like_op");
        RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // Express.g:1200:3: ( term ( add_like_op term )* -> ^( SIMPLE_EXPRESSION term ( add_like_op term )* ) )
            // Express.g:1200:6: term ( add_like_op term )*
            {
            pushFollow(FOLLOW_term_in_simple_expression8360);
            term622=term();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term.add(term622.getTree());
            // Express.g:1200:12: ( add_like_op term )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( ((LA182_0>=OR && LA182_0<=XOR)||(LA182_0>=PLUS && LA182_0<=MINUS)) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // Express.g:1200:15: add_like_op term
            	    {
            	    pushFollow(FOLLOW_add_like_op_in_simple_expression8366);
            	    add_like_op623=add_like_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_add_like_op.add(add_like_op623.getTree());
            	    pushFollow(FOLLOW_term_in_simple_expression8369);
            	    term624=term();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_term.add(term624.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);



            // AST REWRITE
            // elements: term, add_like_op, term
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1201:3: -> ^( SIMPLE_EXPRESSION term ( add_like_op term )* )
            {
                // Express.g:1201:6: ^( SIMPLE_EXPRESSION term ( add_like_op term )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_EXPRESSION, "SIMPLE_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_term.nextTree());
                // Express.g:1201:32: ( add_like_op term )*
                while ( stream_add_like_op.hasNext()||stream_term.hasNext() ) {
                    adaptor.addChild(root_1, stream_add_like_op.nextTree());
                    adaptor.addChild(root_1, stream_term.nextTree());

                }
                stream_add_like_op.reset();
                stream_term.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, simple_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_expression"

    public static class simple_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_factor"
    // Express.g:1204:1: simple_factor : ( aggregate_initializer -> ^( SIMPLE_FACTOR aggregate_initializer ) | interval -> ^( SIMPLE_FACTOR interval ) | query_expression -> ^( SIMPLE_FACTOR query_expression ) | {...}? => unary_op ( ( LPAREN expression RPAREN ) | primary ) | {...}? => LPAREN expression RPAREN | {...}? => literal | {...}? => built_in_constant ( qualifier )* | {...}? => built_in_function ( actual_parameter_list )? ( qualifier )* | {...}? => IDENT ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ( DOT IDENT )? ( qualifier )* | {...}? => entity_constructor -> ^( SIMPLE_FACTOR entity_constructor ) | {...}? => enumeration_reference -> ^( SIMPLE_FACTOR enumeration_reference ) | ( unary_op )? ( ( LPAREN expression RPAREN ) | primary ) -> ^( SIMPLE_FACTOR ( unary_op )? ( expression )? ( primary )? ) );
    public final simple_factor_return simple_factor() throws RecognitionException {
        simple_factor_return retval = new simple_factor_return();
        retval.start = input.LT(1);
        int simple_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN629=null;
        Token RPAREN631=null;
        Token LPAREN633=null;
        Token RPAREN635=null;
        Token IDENT642=null;
        Token LPAREN643=null;
        Token COMMA645=null;
        Token RPAREN647=null;
        Token DOT648=null;
        Token IDENT649=null;
        Token LPAREN654=null;
        Token RPAREN656=null;
        aggregate_initializer_return aggregate_initializer625 = null;

        interval_return interval626 = null;

        query_expression_return query_expression627 = null;

        unary_op_return unary_op628 = null;

        expression_return expression630 = null;

        primary_return primary632 = null;

        expression_return expression634 = null;

        literal_return literal636 = null;

        built_in_constant_return built_in_constant637 = null;

        qualifier_return qualifier638 = null;

        built_in_function_return built_in_function639 = null;

        actual_parameter_list_return actual_parameter_list640 = null;

        qualifier_return qualifier641 = null;

        expression_return expression644 = null;

        expression_return expression646 = null;

        qualifier_return qualifier650 = null;

        entity_constructor_return entity_constructor651 = null;

        enumeration_reference_return enumeration_reference652 = null;

        unary_op_return unary_op653 = null;

        expression_return expression655 = null;

        primary_return primary657 = null;


        CommonTree LPAREN629_tree=null;
        CommonTree RPAREN631_tree=null;
        CommonTree LPAREN633_tree=null;
        CommonTree RPAREN635_tree=null;
        CommonTree IDENT642_tree=null;
        CommonTree LPAREN643_tree=null;
        CommonTree COMMA645_tree=null;
        CommonTree RPAREN647_tree=null;
        CommonTree DOT648_tree=null;
        CommonTree IDENT649_tree=null;
        CommonTree LPAREN654_tree=null;
        CommonTree RPAREN656_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_entity_constructor=new RewriteRuleSubtreeStream(adaptor,"rule entity_constructor");
        RewriteRuleSubtreeStream stream_enumeration_reference=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_reference");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_interval=new RewriteRuleSubtreeStream(adaptor,"rule interval");
        RewriteRuleSubtreeStream stream_query_expression=new RewriteRuleSubtreeStream(adaptor,"rule query_expression");
        RewriteRuleSubtreeStream stream_unary_op=new RewriteRuleSubtreeStream(adaptor,"rule unary_op");
        RewriteRuleSubtreeStream stream_aggregate_initializer=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_initializer");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // Express.g:1205:3: ( aggregate_initializer -> ^( SIMPLE_FACTOR aggregate_initializer ) | interval -> ^( SIMPLE_FACTOR interval ) | query_expression -> ^( SIMPLE_FACTOR query_expression ) | {...}? => unary_op ( ( LPAREN expression RPAREN ) | primary ) | {...}? => LPAREN expression RPAREN | {...}? => literal | {...}? => built_in_constant ( qualifier )* | {...}? => built_in_function ( actual_parameter_list )? ( qualifier )* | {...}? => IDENT ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ( DOT IDENT )? ( qualifier )* | {...}? => entity_constructor -> ^( SIMPLE_FACTOR entity_constructor ) | {...}? => enumeration_reference -> ^( SIMPLE_FACTOR enumeration_reference ) | ( unary_op )? ( ( LPAREN expression RPAREN ) | primary ) -> ^( SIMPLE_FACTOR ( unary_op )? ( expression )? ( primary )? ) )
            int alt194=12;
            alt194 = dfa194.predict(input);
            switch (alt194) {
                case 1 :
                    // Express.g:1205:6: aggregate_initializer
                    {
                    pushFollow(FOLLOW_aggregate_initializer_in_simple_factor8425);
                    aggregate_initializer625=aggregate_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregate_initializer.add(aggregate_initializer625.getTree());


                    // AST REWRITE
                    // elements: aggregate_initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1205:28: -> ^( SIMPLE_FACTOR aggregate_initializer )
                    {
                        // Express.g:1205:31: ^( SIMPLE_FACTOR aggregate_initializer )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_FACTOR, "SIMPLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_aggregate_initializer.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1206:6: interval
                    {
                    pushFollow(FOLLOW_interval_in_simple_factor8442);
                    interval626=interval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval.add(interval626.getTree());


                    // AST REWRITE
                    // elements: interval
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1206:15: -> ^( SIMPLE_FACTOR interval )
                    {
                        // Express.g:1206:18: ^( SIMPLE_FACTOR interval )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_FACTOR, "SIMPLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_interval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1207:6: query_expression
                    {
                    pushFollow(FOLLOW_query_expression_in_simple_factor8457);
                    query_expression627=query_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_query_expression.add(query_expression627.getTree());


                    // AST REWRITE
                    // elements: query_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1207:23: -> ^( SIMPLE_FACTOR query_expression )
                    {
                        // Express.g:1207:26: ^( SIMPLE_FACTOR query_expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_FACTOR, "SIMPLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_query_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1208:6: {...}? => unary_op ( ( LPAREN expression RPAREN ) | primary )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " isFirst ");
                    }
                    pushFollow(FOLLOW_unary_op_in_simple_factor8475);
                    unary_op628=unary_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_op628.getTree());
                    // Express.g:1208:30: ( ( LPAREN expression RPAREN ) | primary )
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==LPAREN) ) {
                        alt183=1;
                    }
                    else if ( ((LA183_0>=CONST_E && LA183_0<=FUNCTION_SIZEOF)||LA183_0==IDENT||(LA183_0>=QUESTION && LA183_0<=STAR)||(LA183_0>=FLOAT && LA183_0<=STRING)||(LA183_0>=338 && LA183_0<=340)) ) {
                        alt183=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);

                        throw nvae;
                    }
                    switch (alt183) {
                        case 1 :
                            // Express.g:1208:32: ( LPAREN expression RPAREN )
                            {
                            // Express.g:1208:32: ( LPAREN expression RPAREN )
                            // Express.g:1208:33: LPAREN expression RPAREN
                            {
                            LPAREN629=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_simple_factor8480); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN629_tree = (CommonTree)adaptor.create(LPAREN629);
                            adaptor.addChild(root_0, LPAREN629_tree);
                            }
                            pushFollow(FOLLOW_expression_in_simple_factor8482);
                            expression630=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression630.getTree());
                            RPAREN631=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_simple_factor8484); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN631_tree = (CommonTree)adaptor.create(RPAREN631);
                            adaptor.addChild(root_0, RPAREN631_tree);
                            }

                            }


                            }
                            break;
                        case 2 :
                            // Express.g:1208:61: primary
                            {
                            pushFollow(FOLLOW_primary_in_simple_factor8489);
                            primary632=primary();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, primary632.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // Express.g:1209:6: {...}? => LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " isFirst ");
                    }
                    LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_simple_factor8501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN633_tree = (CommonTree)adaptor.create(LPAREN633);
                    adaptor.addChild(root_0, LPAREN633_tree);
                    }
                    pushFollow(FOLLOW_expression_in_simple_factor8503);
                    expression634=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression634.getTree());
                    RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_simple_factor8505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN635_tree = (CommonTree)adaptor.create(RPAREN635);
                    adaptor.addChild(root_0, RPAREN635_tree);
                    }

                    }
                    break;
                case 6 :
                    // Express.g:1210:6: {...}? => literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " isFirst ");
                    }
                    pushFollow(FOLLOW_literal_in_simple_factor8515);
                    literal636=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal636.getTree());

                    }
                    break;
                case 7 :
                    // Express.g:1211:6: {...}? => built_in_constant ( qualifier )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " isFirst ");
                    }
                    pushFollow(FOLLOW_built_in_constant_in_simple_factor8525);
                    built_in_constant637=built_in_constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, built_in_constant637.getTree());
                    // Express.g:1211:39: ( qualifier )*
                    loop184:
                    do {
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==LBRACK||LA184_0==DOT||LA184_0==BACKSLASH) ) {
                            alt184=1;
                        }


                        switch (alt184) {
                    	case 1 :
                    	    // Express.g:1211:41: qualifier
                    	    {
                    	    pushFollow(FOLLOW_qualifier_in_simple_factor8529);
                    	    qualifier638=qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifier638.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop184;
                        }
                    } while (true);


                    }
                    break;
                case 8 :
                    // Express.g:1212:6: {...}? => built_in_function ( actual_parameter_list )? ( qualifier )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " isFirst ");
                    }
                    pushFollow(FOLLOW_built_in_function_in_simple_factor8542);
                    built_in_function639=built_in_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, built_in_function639.getTree());
                    // Express.g:1212:39: ( actual_parameter_list )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==LPAREN) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // Express.g:1212:41: actual_parameter_list
                            {
                            pushFollow(FOLLOW_actual_parameter_list_in_simple_factor8546);
                            actual_parameter_list640=actual_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, actual_parameter_list640.getTree());

                            }
                            break;

                    }

                    // Express.g:1212:66: ( qualifier )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==LBRACK||LA186_0==DOT||LA186_0==BACKSLASH) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // Express.g:1212:68: qualifier
                    	    {
                    	    pushFollow(FOLLOW_qualifier_in_simple_factor8553);
                    	    qualifier641=qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifier641.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);


                    }
                    break;
                case 9 :
                    // Express.g:1213:6: {...}? => IDENT ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ( DOT IDENT )? ( qualifier )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " isFirst ");
                    }
                    IDENT642=(Token)match(input,IDENT,FOLLOW_IDENT_in_simple_factor8566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT642_tree = (CommonTree)adaptor.create(IDENT642);
                    adaptor.addChild(root_0, IDENT642_tree);
                    }
                    // Express.g:1213:27: ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==LPAREN) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // Express.g:1213:29: LPAREN ( expression ( COMMA expression )* )? RPAREN
                            {
                            LPAREN643=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_simple_factor8570); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN643_tree = (CommonTree)adaptor.create(LPAREN643);
                            adaptor.addChild(root_0, LPAREN643_tree);
                            }
                            // Express.g:1213:36: ( expression ( COMMA expression )* )?
                            int alt188=2;
                            int LA188_0 = input.LA(1);

                            if ( ((LA188_0>=CONST_E && LA188_0<=FUNCTION_SIZEOF)||LA188_0==NOT||LA188_0==LPAREN||(LA188_0>=PLUS && LA188_0<=LBRACK)||LA188_0==IDENT||(LA188_0>=QUESTION && LA188_0<=STAR)||LA188_0==LCURLY||(LA188_0>=FLOAT && LA188_0<=STRING)||LA188_0==QUERY||(LA188_0>=338 && LA188_0<=340)) ) {
                                alt188=1;
                            }
                            switch (alt188) {
                                case 1 :
                                    // Express.g:1213:38: expression ( COMMA expression )*
                                    {
                                    pushFollow(FOLLOW_expression_in_simple_factor8574);
                                    expression644=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression644.getTree());
                                    // Express.g:1213:49: ( COMMA expression )*
                                    loop187:
                                    do {
                                        int alt187=2;
                                        int LA187_0 = input.LA(1);

                                        if ( (LA187_0==COMMA) ) {
                                            alt187=1;
                                        }


                                        switch (alt187) {
                                    	case 1 :
                                    	    // Express.g:1213:51: COMMA expression
                                    	    {
                                    	    COMMA645=(Token)match(input,COMMA,FOLLOW_COMMA_in_simple_factor8578); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    COMMA645_tree = (CommonTree)adaptor.create(COMMA645);
                                    	    adaptor.addChild(root_0, COMMA645_tree);
                                    	    }
                                    	    pushFollow(FOLLOW_expression_in_simple_factor8580);
                                    	    expression646=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression646.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop187;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }

                            RPAREN647=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_simple_factor8588); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN647_tree = (CommonTree)adaptor.create(RPAREN647);
                            adaptor.addChild(root_0, RPAREN647_tree);
                            }

                            }
                            break;

                    }

                    // Express.g:1213:84: ( DOT IDENT )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==DOT) ) {
                        int LA190_1 = input.LA(2);

                        if ( (LA190_1==IDENT) ) {
                            int LA190_3 = input.LA(3);

                            if ( (synpred278_Express()) ) {
                                alt190=1;
                            }
                        }
                    }
                    switch (alt190) {
                        case 1 :
                            // Express.g:1213:86: DOT IDENT
                            {
                            DOT648=(Token)match(input,DOT,FOLLOW_DOT_in_simple_factor8595); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT648_tree = (CommonTree)adaptor.create(DOT648);
                            adaptor.addChild(root_0, DOT648_tree);
                            }
                            IDENT649=(Token)match(input,IDENT,FOLLOW_IDENT_in_simple_factor8597); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IDENT649_tree = (CommonTree)adaptor.create(IDENT649);
                            adaptor.addChild(root_0, IDENT649_tree);
                            }

                            }
                            break;

                    }

                    // Express.g:1213:99: ( qualifier )*
                    loop191:
                    do {
                        int alt191=2;
                        int LA191_0 = input.LA(1);

                        if ( (LA191_0==LBRACK||LA191_0==DOT||LA191_0==BACKSLASH) ) {
                            alt191=1;
                        }


                        switch (alt191) {
                    	case 1 :
                    	    // Express.g:1213:101: qualifier
                    	    {
                    	    pushFollow(FOLLOW_qualifier_in_simple_factor8604);
                    	    qualifier650=qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifier650.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop191;
                        }
                    } while (true);


                    }
                    break;
                case 10 :
                    // Express.g:1214:6: {...}? => entity_constructor
                    {
                    if ( !(( input.LA(2)==LPAREN )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", " input.LA(2)==LPAREN ");
                    }
                    pushFollow(FOLLOW_entity_constructor_in_simple_factor8617);
                    entity_constructor651=entity_constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_constructor.add(entity_constructor651.getTree());


                    // AST REWRITE
                    // elements: entity_constructor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1214:52: -> ^( SIMPLE_FACTOR entity_constructor )
                    {
                        // Express.g:1214:55: ^( SIMPLE_FACTOR entity_constructor )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_FACTOR, "SIMPLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_entity_constructor.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // Express.g:1215:6: {...}? => enumeration_reference
                    {
                    if ( !((nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_factor", "nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)");
                    }
                    pushFollow(FOLLOW_enumeration_reference_in_simple_factor8635);
                    enumeration_reference652=enumeration_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumeration_reference.add(enumeration_reference652.getTree());


                    // AST REWRITE
                    // elements: enumeration_reference
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1215:91: -> ^( SIMPLE_FACTOR enumeration_reference )
                    {
                        // Express.g:1215:94: ^( SIMPLE_FACTOR enumeration_reference )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_FACTOR, "SIMPLE_FACTOR"), root_1);

                        adaptor.addChild(root_1, stream_enumeration_reference.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // Express.g:1216:6: ( unary_op )? ( ( LPAREN expression RPAREN ) | primary )
                    {
                    // Express.g:1216:6: ( unary_op )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==NOT||(LA192_0>=PLUS && LA192_0<=MINUS)) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // Express.g:0:0: unary_op
                            {
                            pushFollow(FOLLOW_unary_op_in_simple_factor8650);
                            unary_op653=unary_op();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unary_op.add(unary_op653.getTree());

                            }
                            break;

                    }

                    // Express.g:1216:17: ( ( LPAREN expression RPAREN ) | primary )
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==LPAREN) ) {
                        alt193=1;
                    }
                    else if ( ((LA193_0>=CONST_E && LA193_0<=FUNCTION_SIZEOF)||LA193_0==IDENT||(LA193_0>=QUESTION && LA193_0<=STAR)||(LA193_0>=FLOAT && LA193_0<=STRING)||(LA193_0>=338 && LA193_0<=340)) ) {
                        alt193=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 193, 0, input);

                        throw nvae;
                    }
                    switch (alt193) {
                        case 1 :
                            // Express.g:1216:18: ( LPAREN expression RPAREN )
                            {
                            // Express.g:1216:18: ( LPAREN expression RPAREN )
                            // Express.g:1216:19: LPAREN expression RPAREN
                            {
                            LPAREN654=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_simple_factor8656); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN654);

                            pushFollow(FOLLOW_expression_in_simple_factor8659);
                            expression655=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression655.getTree());
                            RPAREN656=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_simple_factor8662); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN656);


                            }


                            }
                            break;
                        case 2 :
                            // Express.g:1216:49: primary
                            {
                            pushFollow(FOLLOW_primary_in_simple_factor8667);
                            primary657=primary();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_primary.add(primary657.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: primary, expression, unary_op
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1217:4: -> ^( SIMPLE_FACTOR ( unary_op )? ( expression )? ( primary )? )
                    {
                        // Express.g:1217:7: ^( SIMPLE_FACTOR ( unary_op )? ( expression )? ( primary )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_FACTOR, "SIMPLE_FACTOR"), root_1);

                        // Express.g:1217:23: ( unary_op )?
                        if ( stream_unary_op.hasNext() ) {
                            adaptor.addChild(root_1, stream_unary_op.nextTree());

                        }
                        stream_unary_op.reset();
                        // Express.g:1217:33: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();
                        // Express.g:1217:45: ( primary )?
                        if ( stream_primary.hasNext() ) {
                            adaptor.addChild(root_1, stream_primary.nextTree());

                        }
                        stream_primary.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, simple_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_factor"

    public static class simple_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_types"
    // Express.g:1220:1: simple_types : ( binary_type -> ^( SIMPLE_TYPES binary_type ) | boolean_type -> ^( SIMPLE_TYPES boolean_type ) | integer_type -> ^( SIMPLE_TYPES integer_type ) | logical_type -> ^( SIMPLE_TYPES logical_type ) | number_type -> ^( SIMPLE_TYPES number_type ) | real_type -> ^( SIMPLE_TYPES real_type ) | string_type -> ^( SIMPLE_TYPES string_type ) );
    public final simple_types_return simple_types() throws RecognitionException {
        simple_types_return retval = new simple_types_return();
        retval.start = input.LT(1);
        int simple_types_StartIndex = input.index();
        CommonTree root_0 = null;

        binary_type_return binary_type658 = null;

        boolean_type_return boolean_type659 = null;

        integer_type_return integer_type660 = null;

        logical_type_return logical_type661 = null;

        number_type_return number_type662 = null;

        real_type_return real_type663 = null;

        string_type_return string_type664 = null;


        RewriteRuleSubtreeStream stream_real_type=new RewriteRuleSubtreeStream(adaptor,"rule real_type");
        RewriteRuleSubtreeStream stream_string_type=new RewriteRuleSubtreeStream(adaptor,"rule string_type");
        RewriteRuleSubtreeStream stream_logical_type=new RewriteRuleSubtreeStream(adaptor,"rule logical_type");
        RewriteRuleSubtreeStream stream_boolean_type=new RewriteRuleSubtreeStream(adaptor,"rule boolean_type");
        RewriteRuleSubtreeStream stream_integer_type=new RewriteRuleSubtreeStream(adaptor,"rule integer_type");
        RewriteRuleSubtreeStream stream_number_type=new RewriteRuleSubtreeStream(adaptor,"rule number_type");
        RewriteRuleSubtreeStream stream_binary_type=new RewriteRuleSubtreeStream(adaptor,"rule binary_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // Express.g:1221:3: ( binary_type -> ^( SIMPLE_TYPES binary_type ) | boolean_type -> ^( SIMPLE_TYPES boolean_type ) | integer_type -> ^( SIMPLE_TYPES integer_type ) | logical_type -> ^( SIMPLE_TYPES logical_type ) | number_type -> ^( SIMPLE_TYPES number_type ) | real_type -> ^( SIMPLE_TYPES real_type ) | string_type -> ^( SIMPLE_TYPES string_type ) )
            int alt195=7;
            switch ( input.LA(1) ) {
            case 302:
                {
                alt195=1;
                }
                break;
            case 303:
                {
                alt195=2;
                }
                break;
            case 335:
                {
                alt195=3;
                }
                break;
            case 341:
                {
                alt195=4;
                }
                break;
            case 342:
                {
                alt195=5;
                }
                break;
            case 347:
                {
                alt195=6;
                }
                break;
            case 362:
                {
                alt195=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // Express.g:1221:6: binary_type
                    {
                    pushFollow(FOLLOW_binary_type_in_simple_types8706);
                    binary_type658=binary_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_binary_type.add(binary_type658.getTree());


                    // AST REWRITE
                    // elements: binary_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1221:18: -> ^( SIMPLE_TYPES binary_type )
                    {
                        // Express.g:1221:21: ^( SIMPLE_TYPES binary_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_binary_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1222:6: boolean_type
                    {
                    pushFollow(FOLLOW_boolean_type_in_simple_types8721);
                    boolean_type659=boolean_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolean_type.add(boolean_type659.getTree());


                    // AST REWRITE
                    // elements: boolean_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1222:19: -> ^( SIMPLE_TYPES boolean_type )
                    {
                        // Express.g:1222:22: ^( SIMPLE_TYPES boolean_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_boolean_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1223:6: integer_type
                    {
                    pushFollow(FOLLOW_integer_type_in_simple_types8737);
                    integer_type660=integer_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_integer_type.add(integer_type660.getTree());


                    // AST REWRITE
                    // elements: integer_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1223:19: -> ^( SIMPLE_TYPES integer_type )
                    {
                        // Express.g:1223:22: ^( SIMPLE_TYPES integer_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_integer_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1224:6: logical_type
                    {
                    pushFollow(FOLLOW_logical_type_in_simple_types8753);
                    logical_type661=logical_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logical_type.add(logical_type661.getTree());


                    // AST REWRITE
                    // elements: logical_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1224:19: -> ^( SIMPLE_TYPES logical_type )
                    {
                        // Express.g:1224:22: ^( SIMPLE_TYPES logical_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_logical_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1225:6: number_type
                    {
                    pushFollow(FOLLOW_number_type_in_simple_types8769);
                    number_type662=number_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number_type.add(number_type662.getTree());


                    // AST REWRITE
                    // elements: number_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1225:18: -> ^( SIMPLE_TYPES number_type )
                    {
                        // Express.g:1225:21: ^( SIMPLE_TYPES number_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_number_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:1226:6: real_type
                    {
                    pushFollow(FOLLOW_real_type_in_simple_types8784);
                    real_type663=real_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_type.add(real_type663.getTree());


                    // AST REWRITE
                    // elements: real_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1226:16: -> ^( SIMPLE_TYPES real_type )
                    {
                        // Express.g:1226:19: ^( SIMPLE_TYPES real_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_real_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Express.g:1227:6: string_type
                    {
                    pushFollow(FOLLOW_string_type_in_simple_types8799);
                    string_type664=string_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_string_type.add(string_type664.getTree());


                    // AST REWRITE
                    // elements: string_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1227:18: -> ^( SIMPLE_TYPES string_type )
                    {
                        // Express.g:1227:21: ^( SIMPLE_TYPES string_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_TYPES, "SIMPLE_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_string_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, simple_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_types"

    public static class skip_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "skip_stmt"
    // Express.g:1230:1: skip_stmt : 'skip' SEMI -> ^( SKIP_STMT ) ;
    public final skip_stmt_return skip_stmt() throws RecognitionException {
        skip_stmt_return retval = new skip_stmt_return();
        retval.start = input.LT(1);
        int skip_stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal665=null;
        Token SEMI666=null;

        CommonTree string_literal665_tree=null;
        CommonTree SEMI666_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_361=new RewriteRuleTokenStream(adaptor,"token 361");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // Express.g:1231:3: ( 'skip' SEMI -> ^( SKIP_STMT ) )
            // Express.g:1231:6: 'skip' SEMI
            {
            string_literal665=(Token)match(input,361,FOLLOW_361_in_skip_stmt8821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_361.add(string_literal665);

            SEMI666=(Token)match(input,SEMI,FOLLOW_SEMI_in_skip_stmt8824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI666);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1231:19: -> ^( SKIP_STMT )
            {
                // Express.g:1231:22: ^( SKIP_STMT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SKIP_STMT, "SKIP_STMT"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, skip_stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "skip_stmt"

    public static class stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stmt"
    // Express.g:1234:1: stmt : ({...}? => IDENT ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? ) SEMI | alias_stmt -> ^( STMT alias_stmt ) | assignment_stmt -> ^( STMT assignment_stmt ) | case_stmt -> ^( STMT case_stmt ) | compound_stmt -> ^( STMT compound_stmt ) | escape_stmt -> ^( STMT escape_stmt ) | if_stmt -> ^( STMT if_stmt ) | null_stmt -> ^( STMT null_stmt ) | procedure_call_stmt -> ^( STMT procedure_call_stmt ) | repeat_stmt -> ^( STMT repeat_stmt ) | return_stmt -> ^( STMT return_stmt ) | skip_stmt -> ^( STMT skip_stmt ) );
    public final stmt_return stmt() throws RecognitionException {
        stmt_return retval = new stmt_return();
        retval.start = input.LT(1);
        int stmt_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT667=null;
        Token COLEQ669=null;
        Token SEMI672=null;
        qualifier_return qualifier668 = null;

        expression_return expression670 = null;

        actual_parameter_list_return actual_parameter_list671 = null;

        alias_stmt_return alias_stmt673 = null;

        assignment_stmt_return assignment_stmt674 = null;

        case_stmt_return case_stmt675 = null;

        compound_stmt_return compound_stmt676 = null;

        escape_stmt_return escape_stmt677 = null;

        if_stmt_return if_stmt678 = null;

        null_stmt_return null_stmt679 = null;

        procedure_call_stmt_return procedure_call_stmt680 = null;

        repeat_stmt_return repeat_stmt681 = null;

        return_stmt_return return_stmt682 = null;

        skip_stmt_return skip_stmt683 = null;


        CommonTree IDENT667_tree=null;
        CommonTree COLEQ669_tree=null;
        CommonTree SEMI672_tree=null;
        RewriteRuleSubtreeStream stream_assignment_stmt=new RewriteRuleSubtreeStream(adaptor,"rule assignment_stmt");
        RewriteRuleSubtreeStream stream_compound_stmt=new RewriteRuleSubtreeStream(adaptor,"rule compound_stmt");
        RewriteRuleSubtreeStream stream_skip_stmt=new RewriteRuleSubtreeStream(adaptor,"rule skip_stmt");
        RewriteRuleSubtreeStream stream_escape_stmt=new RewriteRuleSubtreeStream(adaptor,"rule escape_stmt");
        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        RewriteRuleSubtreeStream stream_procedure_call_stmt=new RewriteRuleSubtreeStream(adaptor,"rule procedure_call_stmt");
        RewriteRuleSubtreeStream stream_repeat_stmt=new RewriteRuleSubtreeStream(adaptor,"rule repeat_stmt");
        RewriteRuleSubtreeStream stream_null_stmt=new RewriteRuleSubtreeStream(adaptor,"rule null_stmt");
        RewriteRuleSubtreeStream stream_return_stmt=new RewriteRuleSubtreeStream(adaptor,"rule return_stmt");
        RewriteRuleSubtreeStream stream_alias_stmt=new RewriteRuleSubtreeStream(adaptor,"rule alias_stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // Express.g:1235:3: ({...}? => IDENT ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? ) SEMI | alias_stmt -> ^( STMT alias_stmt ) | assignment_stmt -> ^( STMT assignment_stmt ) | case_stmt -> ^( STMT case_stmt ) | compound_stmt -> ^( STMT compound_stmt ) | escape_stmt -> ^( STMT escape_stmt ) | if_stmt -> ^( STMT if_stmt ) | null_stmt -> ^( STMT null_stmt ) | procedure_call_stmt -> ^( STMT procedure_call_stmt ) | repeat_stmt -> ^( STMT repeat_stmt ) | return_stmt -> ^( STMT return_stmt ) | skip_stmt -> ^( STMT skip_stmt ) )
            int alt199=12;
            alt199 = dfa199.predict(input);
            switch (alt199) {
                case 1 :
                    // Express.g:1235:5: {...}? => IDENT ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? ) SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "stmt", " isFirst ");
                    }
                    IDENT667=(Token)match(input,IDENT,FOLLOW_IDENT_in_stmt8846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT667_tree = (CommonTree)adaptor.create(IDENT667);
                    adaptor.addChild(root_0, IDENT667_tree);
                    }
                    // Express.g:1235:26: ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? )
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==LBRACK||LA198_0==COLEQ||LA198_0==DOT||LA198_0==BACKSLASH) ) {
                        alt198=1;
                    }
                    else if ( (LA198_0==LPAREN||LA198_0==SEMI) ) {
                        alt198=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 198, 0, input);

                        throw nvae;
                    }
                    switch (alt198) {
                        case 1 :
                            // Express.g:1235:28: ( qualifier )* COLEQ expression
                            {
                            // Express.g:1235:28: ( qualifier )*
                            loop196:
                            do {
                                int alt196=2;
                                int LA196_0 = input.LA(1);

                                if ( (LA196_0==LBRACK||LA196_0==DOT||LA196_0==BACKSLASH) ) {
                                    alt196=1;
                                }


                                switch (alt196) {
                            	case 1 :
                            	    // Express.g:0:0: qualifier
                            	    {
                            	    pushFollow(FOLLOW_qualifier_in_stmt8850);
                            	    qualifier668=qualifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifier668.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop196;
                                }
                            } while (true);

                            COLEQ669=(Token)match(input,COLEQ,FOLLOW_COLEQ_in_stmt8853); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLEQ669_tree = (CommonTree)adaptor.create(COLEQ669);
                            adaptor.addChild(root_0, COLEQ669_tree);
                            }
                            pushFollow(FOLLOW_expression_in_stmt8855);
                            expression670=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression670.getTree());

                            }
                            break;
                        case 2 :
                            // Express.g:1235:58: ( actual_parameter_list )?
                            {
                            // Express.g:1235:58: ( actual_parameter_list )?
                            int alt197=2;
                            int LA197_0 = input.LA(1);

                            if ( (LA197_0==LPAREN) ) {
                                alt197=1;
                            }
                            switch (alt197) {
                                case 1 :
                                    // Express.g:0:0: actual_parameter_list
                                    {
                                    pushFollow(FOLLOW_actual_parameter_list_in_stmt8859);
                                    actual_parameter_list671=actual_parameter_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, actual_parameter_list671.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    SEMI672=(Token)match(input,SEMI,FOLLOW_SEMI_in_stmt8864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI672_tree = (CommonTree)adaptor.create(SEMI672);
                    adaptor.addChild(root_0, SEMI672_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1236:6: alias_stmt
                    {
                    pushFollow(FOLLOW_alias_stmt_in_stmt8873);
                    alias_stmt673=alias_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias_stmt.add(alias_stmt673.getTree());


                    // AST REWRITE
                    // elements: alias_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1236:17: -> ^( STMT alias_stmt )
                    {
                        // Express.g:1236:20: ^( STMT alias_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_alias_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1237:6: assignment_stmt
                    {
                    pushFollow(FOLLOW_assignment_stmt_in_stmt8888);
                    assignment_stmt674=assignment_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignment_stmt.add(assignment_stmt674.getTree());


                    // AST REWRITE
                    // elements: assignment_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1237:22: -> ^( STMT assignment_stmt )
                    {
                        // Express.g:1237:25: ^( STMT assignment_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_assignment_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1238:6: case_stmt
                    {
                    pushFollow(FOLLOW_case_stmt_in_stmt8903);
                    case_stmt675=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_stmt.add(case_stmt675.getTree());


                    // AST REWRITE
                    // elements: case_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1238:16: -> ^( STMT case_stmt )
                    {
                        // Express.g:1238:19: ^( STMT case_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_case_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1239:6: compound_stmt
                    {
                    pushFollow(FOLLOW_compound_stmt_in_stmt8918);
                    compound_stmt676=compound_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compound_stmt.add(compound_stmt676.getTree());


                    // AST REWRITE
                    // elements: compound_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1239:20: -> ^( STMT compound_stmt )
                    {
                        // Express.g:1239:23: ^( STMT compound_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_compound_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:1240:6: escape_stmt
                    {
                    pushFollow(FOLLOW_escape_stmt_in_stmt8933);
                    escape_stmt677=escape_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_escape_stmt.add(escape_stmt677.getTree());


                    // AST REWRITE
                    // elements: escape_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1240:18: -> ^( STMT escape_stmt )
                    {
                        // Express.g:1240:21: ^( STMT escape_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_escape_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Express.g:1241:6: if_stmt
                    {
                    pushFollow(FOLLOW_if_stmt_in_stmt8949);
                    if_stmt678=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_if_stmt.add(if_stmt678.getTree());


                    // AST REWRITE
                    // elements: if_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1241:14: -> ^( STMT if_stmt )
                    {
                        // Express.g:1241:17: ^( STMT if_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_if_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // Express.g:1242:6: null_stmt
                    {
                    pushFollow(FOLLOW_null_stmt_in_stmt8964);
                    null_stmt679=null_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_stmt.add(null_stmt679.getTree());


                    // AST REWRITE
                    // elements: null_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1242:16: -> ^( STMT null_stmt )
                    {
                        // Express.g:1242:19: ^( STMT null_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_null_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // Express.g:1243:6: procedure_call_stmt
                    {
                    pushFollow(FOLLOW_procedure_call_stmt_in_stmt8979);
                    procedure_call_stmt680=procedure_call_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_call_stmt.add(procedure_call_stmt680.getTree());


                    // AST REWRITE
                    // elements: procedure_call_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1243:26: -> ^( STMT procedure_call_stmt )
                    {
                        // Express.g:1243:29: ^( STMT procedure_call_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_procedure_call_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // Express.g:1244:6: repeat_stmt
                    {
                    pushFollow(FOLLOW_repeat_stmt_in_stmt8995);
                    repeat_stmt681=repeat_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_repeat_stmt.add(repeat_stmt681.getTree());


                    // AST REWRITE
                    // elements: repeat_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1244:18: -> ^( STMT repeat_stmt )
                    {
                        // Express.g:1244:21: ^( STMT repeat_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_repeat_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // Express.g:1245:6: return_stmt
                    {
                    pushFollow(FOLLOW_return_stmt_in_stmt9010);
                    return_stmt682=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_stmt.add(return_stmt682.getTree());


                    // AST REWRITE
                    // elements: return_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1245:18: -> ^( STMT return_stmt )
                    {
                        // Express.g:1245:21: ^( STMT return_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_return_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // Express.g:1246:6: skip_stmt
                    {
                    pushFollow(FOLLOW_skip_stmt_in_stmt9026);
                    skip_stmt683=skip_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_skip_stmt.add(skip_stmt683.getTree());


                    // AST REWRITE
                    // elements: skip_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1246:16: -> ^( STMT skip_stmt )
                    {
                        // Express.g:1246:19: ^( STMT skip_stmt )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STMT, "STMT"), root_1);

                        adaptor.addChild(root_1, stream_skip_stmt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, stmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stmt"

    public static class string_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_type"
    // Express.g:1249:1: string_type : 'string' ( width_spec )? -> ^( STRING_TYPE ( width_spec )? ) ;
    public final string_type_return string_type() throws RecognitionException {
        string_type_return retval = new string_type_return();
        retval.start = input.LT(1);
        int string_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal684=null;
        width_spec_return width_spec685 = null;


        CommonTree string_literal684_tree=null;
        RewriteRuleTokenStream stream_362=new RewriteRuleTokenStream(adaptor,"token 362");
        RewriteRuleSubtreeStream stream_width_spec=new RewriteRuleSubtreeStream(adaptor,"rule width_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // Express.g:1250:3: ( 'string' ( width_spec )? -> ^( STRING_TYPE ( width_spec )? ) )
            // Express.g:1250:6: 'string' ( width_spec )?
            {
            string_literal684=(Token)match(input,362,FOLLOW_362_in_string_type9048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_362.add(string_literal684);

            // Express.g:1250:16: ( width_spec )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==LPAREN) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // Express.g:0:0: width_spec
                    {
                    pushFollow(FOLLOW_width_spec_in_string_type9051);
                    width_spec685=width_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_width_spec.add(width_spec685.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: width_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1251:4: -> ^( STRING_TYPE ( width_spec )? )
            {
                // Express.g:1251:7: ^( STRING_TYPE ( width_spec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, "STRING_TYPE"), root_1);

                // Express.g:1251:21: ( width_spec )?
                if ( stream_width_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_width_spec.nextTree());

                }
                stream_width_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, string_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "string_type"

    public static class subtype_constraint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_constraint"
    // Express.g:1254:1: subtype_constraint : 'of' LPAREN supertype_expression RPAREN ( SEMI )? -> ^( SUBTYPE_CONSTRAINT supertype_expression ) ;
    public final subtype_constraint_return subtype_constraint() throws RecognitionException {
        subtype_constraint_return retval = new subtype_constraint_return();
        retval.start = input.LT(1);
        int subtype_constraint_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal686=null;
        Token LPAREN687=null;
        Token RPAREN689=null;
        Token SEMI690=null;
        supertype_expression_return supertype_expression688 = null;


        CommonTree string_literal686_tree=null;
        CommonTree LPAREN687_tree=null;
        CommonTree RPAREN689_tree=null;
        CommonTree SEMI690_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_supertype_expression=new RewriteRuleSubtreeStream(adaptor,"rule supertype_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // Express.g:1255:3: ( 'of' LPAREN supertype_expression RPAREN ( SEMI )? -> ^( SUBTYPE_CONSTRAINT supertype_expression ) )
            // Express.g:1255:6: 'of' LPAREN supertype_expression RPAREN ( SEMI )?
            {
            string_literal686=(Token)match(input,294,FOLLOW_294_in_subtype_constraint9078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_294.add(string_literal686);

            LPAREN687=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subtype_constraint9081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN687);

            pushFollow(FOLLOW_supertype_expression_in_subtype_constraint9084);
            supertype_expression688=supertype_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_supertype_expression.add(supertype_expression688.getTree());
            RPAREN689=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subtype_constraint9087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN689);

            // Express.g:1255:49: ( SEMI )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==SEMI) ) {
                int LA201_1 = input.LA(2);

                if ( (synpred306_Express()) ) {
                    alt201=1;
                }
            }
            switch (alt201) {
                case 1 :
                    // Express.g:0:0: SEMI
                    {
                    SEMI690=(Token)match(input,SEMI,FOLLOW_SEMI_in_subtype_constraint9089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI690);


                    }
                    break;

            }



            // AST REWRITE
            // elements: supertype_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1256:4: -> ^( SUBTYPE_CONSTRAINT supertype_expression )
            {
                // Express.g:1256:7: ^( SUBTYPE_CONSTRAINT supertype_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBTYPE_CONSTRAINT, "SUBTYPE_CONSTRAINT"), root_1);

                adaptor.addChild(root_1, stream_supertype_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, subtype_constraint_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_constraint"

    public static class supertype_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supertype_expression"
    // Express.g:1259:1: supertype_expression : supertype_factor ( 'andor' supertype_factor )* -> ^( SUPERTYPE_EXPRESSION ( supertype_factor )+ ) ;
    public final supertype_expression_return supertype_expression() throws RecognitionException {
        supertype_expression_return retval = new supertype_expression_return();
        retval.start = input.LT(1);
        int supertype_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal692=null;
        supertype_factor_return supertype_factor691 = null;

        supertype_factor_return supertype_factor693 = null;


        CommonTree string_literal692_tree=null;
        RewriteRuleTokenStream stream_363=new RewriteRuleTokenStream(adaptor,"token 363");
        RewriteRuleSubtreeStream stream_supertype_factor=new RewriteRuleSubtreeStream(adaptor,"rule supertype_factor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // Express.g:1260:3: ( supertype_factor ( 'andor' supertype_factor )* -> ^( SUPERTYPE_EXPRESSION ( supertype_factor )+ ) )
            // Express.g:1260:6: supertype_factor ( 'andor' supertype_factor )*
            {
            pushFollow(FOLLOW_supertype_factor_in_supertype_expression9115);
            supertype_factor691=supertype_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_supertype_factor.add(supertype_factor691.getTree());
            // Express.g:1260:24: ( 'andor' supertype_factor )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==363) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // Express.g:1260:27: 'andor' supertype_factor
            	    {
            	    string_literal692=(Token)match(input,363,FOLLOW_363_in_supertype_expression9121); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_363.add(string_literal692);

            	    pushFollow(FOLLOW_supertype_factor_in_supertype_expression9124);
            	    supertype_factor693=supertype_factor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_supertype_factor.add(supertype_factor693.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);



            // AST REWRITE
            // elements: supertype_factor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1261:4: -> ^( SUPERTYPE_EXPRESSION ( supertype_factor )+ )
            {
                // Express.g:1261:7: ^( SUPERTYPE_EXPRESSION ( supertype_factor )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_EXPRESSION, "SUPERTYPE_EXPRESSION"), root_1);

                if ( !(stream_supertype_factor.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_supertype_factor.hasNext() ) {
                    adaptor.addChild(root_1, stream_supertype_factor.nextTree());

                }
                stream_supertype_factor.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, supertype_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "supertype_expression"

    public static class supertype_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supertype_factor"
    // Express.g:1264:1: supertype_factor : supertype_term ( 'and' supertype_term )* -> ^( SUPERTYPE_FACTOR ( supertype_term )+ ) ;
    public final supertype_factor_return supertype_factor() throws RecognitionException {
        supertype_factor_return retval = new supertype_factor_return();
        retval.start = input.LT(1);
        int supertype_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal695=null;
        supertype_term_return supertype_term694 = null;

        supertype_term_return supertype_term696 = null;


        CommonTree string_literal695_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleSubtreeStream stream_supertype_term=new RewriteRuleSubtreeStream(adaptor,"rule supertype_term");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // Express.g:1265:3: ( supertype_term ( 'and' supertype_term )* -> ^( SUPERTYPE_FACTOR ( supertype_term )+ ) )
            // Express.g:1265:6: supertype_term ( 'and' supertype_term )*
            {
            pushFollow(FOLLOW_supertype_term_in_supertype_factor9154);
            supertype_term694=supertype_term();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_supertype_term.add(supertype_term694.getTree());
            // Express.g:1265:22: ( 'and' supertype_term )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==AND) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // Express.g:1265:25: 'and' supertype_term
            	    {
            	    string_literal695=(Token)match(input,AND,FOLLOW_AND_in_supertype_factor9160); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(string_literal695);

            	    pushFollow(FOLLOW_supertype_term_in_supertype_factor9163);
            	    supertype_term696=supertype_term();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_supertype_term.add(supertype_term696.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);



            // AST REWRITE
            // elements: supertype_term
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1266:4: -> ^( SUPERTYPE_FACTOR ( supertype_term )+ )
            {
                // Express.g:1266:7: ^( SUPERTYPE_FACTOR ( supertype_term )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_FACTOR, "SUPERTYPE_FACTOR"), root_1);

                if ( !(stream_supertype_term.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_supertype_term.hasNext() ) {
                    adaptor.addChild(root_1, stream_supertype_term.nextTree());

                }
                stream_supertype_term.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, supertype_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "supertype_factor"

    public static class supertype_rule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supertype_rule"
    // Express.g:1269:1: supertype_rule : ( 'abstract' )? 'supertype' ( subtype_constraint )? -> ^( SUPERTYPE_RULE ( 'abstract' )? ( subtype_constraint )? ) ;
    public final supertype_rule_return supertype_rule() throws RecognitionException {
        supertype_rule_return retval = new supertype_rule_return();
        retval.start = input.LT(1);
        int supertype_rule_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal697=null;
        Token string_literal698=null;
        subtype_constraint_return subtype_constraint699 = null;


        CommonTree string_literal697_tree=null;
        CommonTree string_literal698_tree=null;
        RewriteRuleTokenStream stream_312=new RewriteRuleTokenStream(adaptor,"token 312");
        RewriteRuleTokenStream stream_314=new RewriteRuleTokenStream(adaptor,"token 314");
        RewriteRuleSubtreeStream stream_subtype_constraint=new RewriteRuleSubtreeStream(adaptor,"rule subtype_constraint");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // Express.g:1270:3: ( ( 'abstract' )? 'supertype' ( subtype_constraint )? -> ^( SUPERTYPE_RULE ( 'abstract' )? ( subtype_constraint )? ) )
            // Express.g:1270:6: ( 'abstract' )? 'supertype' ( subtype_constraint )?
            {
            // Express.g:1270:6: ( 'abstract' )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==312) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // Express.g:0:0: 'abstract'
                    {
                    string_literal697=(Token)match(input,312,FOLLOW_312_in_supertype_rule9193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_312.add(string_literal697);


                    }
                    break;

            }

            string_literal698=(Token)match(input,314,FOLLOW_314_in_supertype_rule9197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_314.add(string_literal698);

            // Express.g:1270:32: ( subtype_constraint )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==294) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // Express.g:0:0: subtype_constraint
                    {
                    pushFollow(FOLLOW_subtype_constraint_in_supertype_rule9200);
                    subtype_constraint699=subtype_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subtype_constraint.add(subtype_constraint699.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: subtype_constraint, 312
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1271:4: -> ^( SUPERTYPE_RULE ( 'abstract' )? ( subtype_constraint )? )
            {
                // Express.g:1271:7: ^( SUPERTYPE_RULE ( 'abstract' )? ( subtype_constraint )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_RULE, "SUPERTYPE_RULE"), root_1);

                // Express.g:1271:24: ( 'abstract' )?
                if ( stream_312.hasNext() ) {
                    adaptor.addChild(root_1, stream_312.nextNode());

                }
                stream_312.reset();
                // Express.g:1271:36: ( subtype_constraint )?
                if ( stream_subtype_constraint.hasNext() ) {
                    adaptor.addChild(root_1, stream_subtype_constraint.nextTree());

                }
                stream_subtype_constraint.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, supertype_rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "supertype_rule"

    public static class supertype_term_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supertype_term"
    // Express.g:1274:1: supertype_term : ({...}? => IDENT | entity_ref -> ^( SUPERTYPE_TERM entity_ref ) | one_of -> ^( SUPERTYPE_TERM one_of ) | LPAREN supertype_expression RPAREN -> ^( SUPERTYPE_TERM supertype_expression ) );
    public final supertype_term_return supertype_term() throws RecognitionException {
        supertype_term_return retval = new supertype_term_return();
        retval.start = input.LT(1);
        int supertype_term_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT700=null;
        Token LPAREN703=null;
        Token RPAREN705=null;
        entity_ref_return entity_ref701 = null;

        one_of_return one_of702 = null;

        supertype_expression_return supertype_expression704 = null;


        CommonTree IDENT700_tree=null;
        CommonTree LPAREN703_tree=null;
        CommonTree RPAREN705_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_supertype_expression=new RewriteRuleSubtreeStream(adaptor,"rule supertype_expression");
        RewriteRuleSubtreeStream stream_entity_ref=new RewriteRuleSubtreeStream(adaptor,"rule entity_ref");
        RewriteRuleSubtreeStream stream_one_of=new RewriteRuleSubtreeStream(adaptor,"rule one_of");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // Express.g:1275:3: ({...}? => IDENT | entity_ref -> ^( SUPERTYPE_TERM entity_ref ) | one_of -> ^( SUPERTYPE_TERM one_of ) | LPAREN supertype_expression RPAREN -> ^( SUPERTYPE_TERM supertype_expression ) )
            int alt206=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA206_1 = input.LA(2);

                if ( ((synpred311_Express()&&( isFirst ))) ) {
                    alt206=1;
                }
                else if ( (((synpred312_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred312_Express()&&(nextIs(ENTITY_VAR_IDENT)))||(synpred312_Express()&&(nextIs(ENTITY_IDENT)))||(synpred312_Express()&&(nextIs(ENTITY_ATTR_IDENT))))) ) {
                    alt206=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 1, input);

                    throw nvae;
                }
                }
                break;
            case 343:
                {
                alt206=3;
                }
                break;
            case LPAREN:
                {
                alt206=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }

            switch (alt206) {
                case 1 :
                    // Express.g:1275:5: {...}? => IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "supertype_term", " isFirst ");
                    }
                    IDENT700=(Token)match(input,IDENT,FOLLOW_IDENT_in_supertype_term9232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT700_tree = (CommonTree)adaptor.create(IDENT700);
                    adaptor.addChild(root_0, IDENT700_tree);
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1276:6: entity_ref
                    {
                    pushFollow(FOLLOW_entity_ref_in_supertype_term9239);
                    entity_ref701=entity_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_entity_ref.add(entity_ref701.getTree());


                    // AST REWRITE
                    // elements: entity_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1276:17: -> ^( SUPERTYPE_TERM entity_ref )
                    {
                        // Express.g:1276:20: ^( SUPERTYPE_TERM entity_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_TERM, "SUPERTYPE_TERM"), root_1);

                        adaptor.addChild(root_1, stream_entity_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1277:6: one_of
                    {
                    pushFollow(FOLLOW_one_of_in_supertype_term9254);
                    one_of702=one_of();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_one_of.add(one_of702.getTree());


                    // AST REWRITE
                    // elements: one_of
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1277:13: -> ^( SUPERTYPE_TERM one_of )
                    {
                        // Express.g:1277:16: ^( SUPERTYPE_TERM one_of )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_TERM, "SUPERTYPE_TERM"), root_1);

                        adaptor.addChild(root_1, stream_one_of.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1278:6: LPAREN supertype_expression RPAREN
                    {
                    LPAREN703=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_supertype_term9271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN703);

                    pushFollow(FOLLOW_supertype_expression_in_supertype_term9274);
                    supertype_expression704=supertype_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_supertype_expression.add(supertype_expression704.getTree());
                    RPAREN705=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_supertype_term9277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN705);



                    // AST REWRITE
                    // elements: supertype_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1279:5: -> ^( SUPERTYPE_TERM supertype_expression )
                    {
                        // Express.g:1279:8: ^( SUPERTYPE_TERM supertype_expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPERTYPE_TERM, "SUPERTYPE_TERM"), root_1);

                        adaptor.addChild(root_1, stream_supertype_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, supertype_term_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "supertype_term"

    public static class start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start"
    // Express.g:1282:1: start : syntax ;
    public final start_return start() throws RecognitionException {
        start_return retval = new start_return();
        retval.start = input.LT(1);
        int start_StartIndex = input.index();
        CommonTree root_0 = null;

        syntax_return syntax706 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // Express.g:1282:7: ( syntax )
            // Express.g:1282:9: syntax
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_syntax_in_start9303);
            syntax706=syntax();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, syntax706.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "start"

    public static class syntax_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "syntax"
    // Express.g:1284:1: syntax : ( language_version_id )? schema_decl ( schema_decl )* -> ^( SYNTAX ( language_version_id )? schema_decl ( schema_decl )* ) ;
    public final syntax_return syntax() throws RecognitionException {
        syntax_return retval = new syntax_return();
        retval.start = input.LT(1);
        int syntax_StartIndex = input.index();
        CommonTree root_0 = null;

        language_version_id_return language_version_id707 = null;

        schema_decl_return schema_decl708 = null;

        schema_decl_return schema_decl709 = null;


        RewriteRuleSubtreeStream stream_language_version_id=new RewriteRuleSubtreeStream(adaptor,"rule language_version_id");
        RewriteRuleSubtreeStream stream_schema_decl=new RewriteRuleSubtreeStream(adaptor,"rule schema_decl");

        	if (isFirst)
        	{
        		rootScope = new Scope(null);
        		lastCreatedScope=rootScope;
        		currentScope=rootScope;
        		schemas = new Hashtable<String, Scope>();
        	}

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // Express.g:1295:3: ( ( language_version_id )? schema_decl ( schema_decl )* -> ^( SYNTAX ( language_version_id )? schema_decl ( schema_decl )* ) )
            // Express.g:1295:5: ( language_version_id )? schema_decl ( schema_decl )*
            {
            // Express.g:1295:5: ( language_version_id )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==LCURLY) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // Express.g:0:0: language_version_id
                    {
                    pushFollow(FOLLOW_language_version_id_in_syntax9318);
                    language_version_id707=language_version_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_language_version_id.add(language_version_id707.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_schema_decl_in_syntax9321);
            schema_decl708=schema_decl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_schema_decl.add(schema_decl708.getTree());
            // Express.g:1295:38: ( schema_decl )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==358) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // Express.g:0:0: schema_decl
            	    {
            	    pushFollow(FOLLOW_schema_decl_in_syntax9323);
            	    schema_decl709=schema_decl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_schema_decl.add(schema_decl709.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);



            // AST REWRITE
            // elements: schema_decl, language_version_id, schema_decl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1296:3: -> ^( SYNTAX ( language_version_id )? schema_decl ( schema_decl )* )
            {
                // Express.g:1296:6: ^( SYNTAX ( language_version_id )? schema_decl ( schema_decl )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SYNTAX, "SYNTAX"), root_1);

                // Express.g:1296:15: ( language_version_id )?
                if ( stream_language_version_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_language_version_id.nextTree());

                }
                stream_language_version_id.reset();
                adaptor.addChild(root_1, stream_schema_decl.nextTree());
                // Express.g:1296:48: ( schema_decl )*
                while ( stream_schema_decl.hasNext() ) {
                    adaptor.addChild(root_1, stream_schema_decl.nextTree());

                }
                stream_schema_decl.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, syntax_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "syntax"

    public static class language_version_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "language_version_id"
    // Express.g:1299:1: language_version_id : LCURLY LANG_VERSION RCURLY -> ^( LANGUAGE_VERSION_ID ) ;
    public final language_version_id_return language_version_id() throws RecognitionException {
        language_version_id_return retval = new language_version_id_return();
        retval.start = input.LT(1);
        int language_version_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY710=null;
        Token LANG_VERSION711=null;
        Token RCURLY712=null;

        CommonTree LCURLY710_tree=null;
        CommonTree LANG_VERSION711_tree=null;
        CommonTree RCURLY712_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LANG_VERSION=new RewriteRuleTokenStream(adaptor,"token LANG_VERSION");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // Express.g:1300:3: ( LCURLY LANG_VERSION RCURLY -> ^( LANGUAGE_VERSION_ID ) )
            // Express.g:1300:5: LCURLY LANG_VERSION RCURLY
            {
            LCURLY710=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_language_version_id9353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY710);

            LANG_VERSION711=(Token)match(input,LANG_VERSION,FOLLOW_LANG_VERSION_in_language_version_id9355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LANG_VERSION.add(LANG_VERSION711);

            RCURLY712=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_language_version_id9357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY712);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1301:4: -> ^( LANGUAGE_VERSION_ID )
            {
                // Express.g:1301:7: ^( LANGUAGE_VERSION_ID )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LANGUAGE_VERSION_ID, "LANGUAGE_VERSION_ID"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, language_version_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "language_version_id"

    public static class term_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term"
    // Express.g:1304:1: term : factor ( multiplication_like_op factor )* -> ^( TERM factor ( multiplication_like_op factor )* ) ;
    public final term_return term() throws RecognitionException {
        term_return retval = new term_return();
        retval.start = input.LT(1);
        int term_StartIndex = input.index();
        CommonTree root_0 = null;

        factor_return factor713 = null;

        multiplication_like_op_return multiplication_like_op714 = null;

        factor_return factor715 = null;


        RewriteRuleSubtreeStream stream_multiplication_like_op=new RewriteRuleSubtreeStream(adaptor,"rule multiplication_like_op");
        RewriteRuleSubtreeStream stream_factor=new RewriteRuleSubtreeStream(adaptor,"rule factor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // Express.g:1305:3: ( factor ( multiplication_like_op factor )* -> ^( TERM factor ( multiplication_like_op factor )* ) )
            // Express.g:1305:6: factor ( multiplication_like_op factor )*
            {
            pushFollow(FOLLOW_factor_in_term9380);
            factor713=factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_factor.add(factor713.getTree());
            // Express.g:1305:14: ( multiplication_like_op factor )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( ((LA209_0>=DIV && LA209_0<=AND)||LA209_0==STAR||(LA209_0>=DIVSIGN && LA209_0<=DOUBLEBAR)) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // Express.g:1305:17: multiplication_like_op factor
            	    {
            	    pushFollow(FOLLOW_multiplication_like_op_in_term9386);
            	    multiplication_like_op714=multiplication_like_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplication_like_op.add(multiplication_like_op714.getTree());
            	    pushFollow(FOLLOW_factor_in_term9389);
            	    factor715=factor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_factor.add(factor715.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);



            // AST REWRITE
            // elements: multiplication_like_op, factor, factor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1306:4: -> ^( TERM factor ( multiplication_like_op factor )* )
            {
                // Express.g:1306:7: ^( TERM factor ( multiplication_like_op factor )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM, "TERM"), root_1);

                adaptor.addChild(root_1, stream_factor.nextTree());
                // Express.g:1306:22: ( multiplication_like_op factor )*
                while ( stream_multiplication_like_op.hasNext()||stream_factor.hasNext() ) {
                    adaptor.addChild(root_1, stream_multiplication_like_op.nextTree());
                    adaptor.addChild(root_1, stream_factor.nextTree());

                }
                stream_multiplication_like_op.reset();
                stream_factor.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, term_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "term"

    public static class type_decl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl"
    // Express.g:1310:1: type_decl : 'type' id= type_id ASSIGN eids= underlying_type SEMI ( where_clause )? 'end_type' SEMI -> ^( TYPE_DECL $id $eids ( where_clause )? ) ;
    public final type_decl_return type_decl() throws RecognitionException {
        type_decl_return retval = new type_decl_return();
        retval.start = input.LT(1);
        int type_decl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal716=null;
        Token ASSIGN717=null;
        Token SEMI718=null;
        Token string_literal720=null;
        Token SEMI721=null;
        type_id_return id = null;

        underlying_type_return eids = null;

        where_clause_return where_clause719 = null;


        CommonTree string_literal716_tree=null;
        CommonTree ASSIGN717_tree=null;
        CommonTree SEMI718_tree=null;
        CommonTree string_literal720_tree=null;
        CommonTree SEMI721_tree=null;
        RewriteRuleTokenStream stream_364=new RewriteRuleTokenStream(adaptor,"token 364");
        RewriteRuleTokenStream stream_365=new RewriteRuleTokenStream(adaptor,"token 365");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_type_id=new RewriteRuleSubtreeStream(adaptor,"rule type_id");
        RewriteRuleSubtreeStream stream_underlying_type=new RewriteRuleSubtreeStream(adaptor,"rule underlying_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // Express.g:1311:7: ( 'type' id= type_id ASSIGN eids= underlying_type SEMI ( where_clause )? 'end_type' SEMI -> ^( TYPE_DECL $id $eids ( where_clause )? ) )
            // Express.g:1311:10: 'type' id= type_id ASSIGN eids= underlying_type SEMI ( where_clause )? 'end_type' SEMI
            {
            string_literal716=(Token)match(input,364,FOLLOW_364_in_type_decl9436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_364.add(string_literal716);

            pushFollow(FOLLOW_type_id_in_type_decl9440);
            id=type_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_id.add(id.getTree());
            if ( state.backtracking==0 ) {
               newScope("type"); 
            }
            ASSIGN717=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_type_decl9444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN717);

            pushFollow(FOLLOW_underlying_type_in_type_decl9448);
            eids=underlying_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_underlying_type.add(eids.getTree());
            SEMI718=(Token)match(input,SEMI,FOLLOW_SEMI_in_type_decl9450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI718);

            // Express.g:1311:83: ( where_clause )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==372) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // Express.g:0:0: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_type_decl9452);
                    where_clause719=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause719.getTree());

                    }
                    break;

            }

            string_literal720=(Token)match(input,365,FOLLOW_365_in_type_decl9455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_365.add(string_literal720);

            SEMI721=(Token)match(input,SEMI,FOLLOW_SEMI_in_type_decl9457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI721);

            if ( state.backtracking==0 ) {
               
              	     	upScope();
              			if ((eids!=null?eids.eids:null) != null) 
              			{
              			(eids!=null?eids.eids:null).setTypeName((id!=null?id.s:null));
              			currentScope.addEnumerationType((eids!=null?eids.eids:null));
              			}
              		
            }


            // AST REWRITE
            // elements: id, eids, where_clause
            // token labels: 
            // rule labels: id, eids, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.tree:null);
            RewriteRuleSubtreeStream stream_eids=new RewriteRuleSubtreeStream(adaptor,"rule eids",eids!=null?eids.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1320:4: -> ^( TYPE_DECL $id $eids ( where_clause )? )
            {
                // Express.g:1320:7: ^( TYPE_DECL $id $eids ( where_clause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECL, "TYPE_DECL"), root_1);

                adaptor.addChild(root_1, stream_id.nextTree());
                adaptor.addChild(root_1, stream_eids.nextTree());
                // Express.g:1320:29: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, type_decl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_decl"

    public static class underlying_type_return extends ParserRuleReturnScope {
        public EnumerationType eids;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "underlying_type"
    // Express.g:1323:1: underlying_type returns [EnumerationType eids] : (eids2= constructed_types -> ^( UNDERLYING_TYPE $eids2) | aggregation_types -> ^( UNDERLYING_TYPE aggregation_types ) | simple_types -> ^( UNDERLYING_TYPE simple_types ) | {...}? => IDENT | type_ref -> ^( UNDERLYING_TYPE type_ref ) );
    public final underlying_type_return underlying_type() throws RecognitionException {
        underlying_type_return retval = new underlying_type_return();
        retval.start = input.LT(1);
        int underlying_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT724=null;
        constructed_types_return eids2 = null;

        aggregation_types_return aggregation_types722 = null;

        simple_types_return simple_types723 = null;

        type_ref_return type_ref725 = null;


        CommonTree IDENT724_tree=null;
        RewriteRuleSubtreeStream stream_constructed_types=new RewriteRuleSubtreeStream(adaptor,"rule constructed_types");
        RewriteRuleSubtreeStream stream_aggregation_types=new RewriteRuleSubtreeStream(adaptor,"rule aggregation_types");
        RewriteRuleSubtreeStream stream_simple_types=new RewriteRuleSubtreeStream(adaptor,"rule simple_types");
        RewriteRuleSubtreeStream stream_type_ref=new RewriteRuleSubtreeStream(adaptor,"rule type_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // Express.g:1324:3: (eids2= constructed_types -> ^( UNDERLYING_TYPE $eids2) | aggregation_types -> ^( UNDERLYING_TYPE aggregation_types ) | simple_types -> ^( UNDERLYING_TYPE simple_types ) | {...}? => IDENT | type_ref -> ^( UNDERLYING_TYPE type_ref ) )
            int alt211=5;
            switch ( input.LA(1) ) {
            case 328:
            case 366:
            case 367:
            case 370:
                {
                alt211=1;
                }
                break;
            case 298:
            case 301:
            case 322:
            case 326:
                {
                alt211=2;
                }
                break;
            case 302:
            case 303:
            case 335:
            case 341:
            case 342:
            case 347:
            case 362:
                {
                alt211=3;
                }
                break;
            case IDENT:
                {
                int LA211_4 = input.LA(2);

                if ( ((synpred321_Express()&&( isFirst ))) ) {
                    alt211=4;
                }
                else if ( (((nextIs(TYPE_IDENT))||(nextIs(TYPE_VAR_IDENT))||(nextIs(TYPE_ATTR_IDENT))||(nextIs(TYPE_PARAM_IDENT)))) ) {
                    alt211=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 4, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }

            switch (alt211) {
                case 1 :
                    // Express.g:1324:6: eids2= constructed_types
                    {
                    pushFollow(FOLLOW_constructed_types_in_underlying_type9508);
                    eids2=constructed_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructed_types.add(eids2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.eids = (eids2!=null?eids2.eids:null);
                    }


                    // AST REWRITE
                    // elements: eids2
                    // token labels: 
                    // rule labels: retval, eids2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_eids2=new RewriteRuleSubtreeStream(adaptor,"rule eids2",eids2!=null?eids2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1324:53: -> ^( UNDERLYING_TYPE $eids2)
                    {
                        // Express.g:1324:56: ^( UNDERLYING_TYPE $eids2)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNDERLYING_TYPE, "UNDERLYING_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_eids2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1325:6: aggregation_types
                    {
                    pushFollow(FOLLOW_aggregation_types_in_underlying_type9526);
                    aggregation_types722=aggregation_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregation_types.add(aggregation_types722.getTree());


                    // AST REWRITE
                    // elements: aggregation_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1325:24: -> ^( UNDERLYING_TYPE aggregation_types )
                    {
                        // Express.g:1325:27: ^( UNDERLYING_TYPE aggregation_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNDERLYING_TYPE, "UNDERLYING_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_aggregation_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1326:6: simple_types
                    {
                    pushFollow(FOLLOW_simple_types_in_underlying_type9541);
                    simple_types723=simple_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_types.add(simple_types723.getTree());


                    // AST REWRITE
                    // elements: simple_types
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1326:19: -> ^( UNDERLYING_TYPE simple_types )
                    {
                        // Express.g:1326:22: ^( UNDERLYING_TYPE simple_types )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNDERLYING_TYPE, "UNDERLYING_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_simple_types.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1327:5: {...}? => IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "underlying_type", " isFirst ");
                    }
                    IDENT724=(Token)match(input,IDENT,FOLLOW_IDENT_in_underlying_type9558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT724_tree = (CommonTree)adaptor.create(IDENT724);
                    adaptor.addChild(root_0, IDENT724_tree);
                    }

                    }
                    break;
                case 5 :
                    // Express.g:1328:6: type_ref
                    {
                    pushFollow(FOLLOW_type_ref_in_underlying_type9565);
                    type_ref725=type_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_ref.add(type_ref725.getTree());


                    // AST REWRITE
                    // elements: type_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1328:15: -> ^( UNDERLYING_TYPE type_ref )
                    {
                        // Express.g:1328:18: ^( UNDERLYING_TYPE type_ref )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNDERLYING_TYPE, "UNDERLYING_TYPE"), root_1);

                        adaptor.addChild(root_1, stream_type_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, underlying_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "underlying_type"

    public static class constructed_types_return extends ParserRuleReturnScope {
        public EnumerationType eids;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructed_types"
    // Express.g:1331:1: constructed_types returns [EnumerationType eids] : ({...}? =>eids2= enumeration_type -> ^( CONSTRUCTED_TYPES $eids2) | select_type -> ^( CONSTRUCTED_TYPES select_type ) );
    public final constructed_types_return constructed_types() throws RecognitionException {
        constructed_types_return retval = new constructed_types_return();
        retval.start = input.LT(1);
        int constructed_types_StartIndex = input.index();
        CommonTree root_0 = null;

        enumeration_type_return eids2 = null;

        select_type_return select_type726 = null;


        RewriteRuleSubtreeStream stream_enumeration_type=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_type");
        RewriteRuleSubtreeStream stream_select_type=new RewriteRuleSubtreeStream(adaptor,"rule select_type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // Express.g:1333:3: ({...}? =>eids2= enumeration_type -> ^( CONSTRUCTED_TYPES $eids2) | select_type -> ^( CONSTRUCTED_TYPES select_type ) )
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==366) ) {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==367) && (( input.LT(1).getText().equals("ENUMERATION")||input.LT(2).getText().equals("ENUMERATION") ))) {
                    alt212=1;
                }
                else if ( (LA212_1==328||LA212_1==370) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA212_0==367) && (( input.LT(1).getText().equals("ENUMERATION")||input.LT(2).getText().equals("ENUMERATION") ))) {
                alt212=1;
            }
            else if ( (LA212_0==328||LA212_0==370) ) {
                alt212=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    // Express.g:1333:5: {...}? =>eids2= enumeration_type
                    {
                    if ( !(( input.LT(1).getText().equals("ENUMERATION")||input.LT(2).getText().equals("ENUMERATION") )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "constructed_types", " input.LT(1).getText().equals(\"ENUMERATION\")||input.LT(2).getText().equals(\"ENUMERATION\") ");
                    }
                    pushFollow(FOLLOW_enumeration_type_in_constructed_types9599);
                    eids2=enumeration_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumeration_type.add(eids2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.eids = (eids2!=null?eids2.eids:null);
                    }


                    // AST REWRITE
                    // elements: eids2
                    // token labels: 
                    // rule labels: retval, eids2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_eids2=new RewriteRuleSubtreeStream(adaptor,"rule eids2",eids2!=null?eids2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1334:4: -> ^( CONSTRUCTED_TYPES $eids2)
                    {
                        // Express.g:1334:7: ^( CONSTRUCTED_TYPES $eids2)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTED_TYPES, "CONSTRUCTED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_eids2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1335:6: select_type
                    {
                    pushFollow(FOLLOW_select_type_in_constructed_types9620);
                    select_type726=select_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_type.add(select_type726.getTree());


                    // AST REWRITE
                    // elements: select_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1335:18: -> ^( CONSTRUCTED_TYPES select_type )
                    {
                        // Express.g:1335:21: ^( CONSTRUCTED_TYPES select_type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTED_TYPES, "CONSTRUCTED_TYPES"), root_1);

                        adaptor.addChild(root_1, stream_select_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, constructed_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructed_types"

    public static class enumeration_type_return extends ParserRuleReturnScope {
        public EnumerationType eids;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumeration_type"
    // Express.g:1338:1: enumeration_type returns [EnumerationType eids] : ( 'extensible' )? 'enumeration' ( ( 'of' eids2= enumeration_items ) | eids3= enumeration_extension )? -> ^( ENUMERATION_TYPE ( 'extensible' )? ( enumeration_items )? ( enumeration_extension )? ) ;
    public final enumeration_type_return enumeration_type() throws RecognitionException {
        enumeration_type_return retval = new enumeration_type_return();
        retval.start = input.LT(1);
        int enumeration_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal727=null;
        Token string_literal728=null;
        Token string_literal729=null;
        enumeration_items_return eids2 = null;

        enumeration_extension_return eids3 = null;


        CommonTree string_literal727_tree=null;
        CommonTree string_literal728_tree=null;
        CommonTree string_literal729_tree=null;
        RewriteRuleTokenStream stream_366=new RewriteRuleTokenStream(adaptor,"token 366");
        RewriteRuleTokenStream stream_367=new RewriteRuleTokenStream(adaptor,"token 367");
        RewriteRuleTokenStream stream_294=new RewriteRuleTokenStream(adaptor,"token 294");
        RewriteRuleSubtreeStream stream_enumeration_extension=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_extension");
        RewriteRuleSubtreeStream stream_enumeration_items=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_items");

        	boolean ext=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // Express.g:1348:3: ( ( 'extensible' )? 'enumeration' ( ( 'of' eids2= enumeration_items ) | eids3= enumeration_extension )? -> ^( ENUMERATION_TYPE ( 'extensible' )? ( enumeration_items )? ( enumeration_extension )? ) )
            // Express.g:1348:5: ( 'extensible' )? 'enumeration' ( ( 'of' eids2= enumeration_items ) | eids3= enumeration_extension )?
            {
            // Express.g:1348:5: ( 'extensible' )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==366) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // Express.g:1348:7: 'extensible'
                    {
                    string_literal727=(Token)match(input,366,FOLLOW_366_in_enumeration_type9665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_366.add(string_literal727);

                    if ( state.backtracking==0 ) {
                       ext=true; 
                    }

                    }
                    break;

            }

            string_literal728=(Token)match(input,367,FOLLOW_367_in_enumeration_type9672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_367.add(string_literal728);

            // Express.g:1348:51: ( ( 'of' eids2= enumeration_items ) | eids3= enumeration_extension )?
            int alt214=3;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==294) ) {
                alt214=1;
            }
            else if ( (LA214_0==368) ) {
                alt214=2;
            }
            switch (alt214) {
                case 1 :
                    // Express.g:1348:52: ( 'of' eids2= enumeration_items )
                    {
                    // Express.g:1348:52: ( 'of' eids2= enumeration_items )
                    // Express.g:1348:54: 'of' eids2= enumeration_items
                    {
                    string_literal729=(Token)match(input,294,FOLLOW_294_in_enumeration_type9677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_294.add(string_literal729);

                    pushFollow(FOLLOW_enumeration_items_in_enumeration_type9681);
                    eids2=enumeration_items();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumeration_items.add(eids2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.eids = (eids2!=null?eids2.eids:null);
                    }

                    }


                    }
                    break;
                case 2 :
                    // Express.g:1348:109: eids3= enumeration_extension
                    {
                    pushFollow(FOLLOW_enumeration_extension_in_enumeration_type9690);
                    eids3=enumeration_extension();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumeration_extension.add(eids3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.eids = (eids3!=null?eids3.eids:null);
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: enumeration_items, 366, enumeration_extension
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1349:4: -> ^( ENUMERATION_TYPE ( 'extensible' )? ( enumeration_items )? ( enumeration_extension )? )
            {
                // Express.g:1349:7: ^( ENUMERATION_TYPE ( 'extensible' )? ( enumeration_items )? ( enumeration_extension )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUMERATION_TYPE, "ENUMERATION_TYPE"), root_1);

                // Express.g:1349:26: ( 'extensible' )?
                if ( stream_366.hasNext() ) {
                    adaptor.addChild(root_1, stream_366.nextNode());

                }
                stream_366.reset();
                // Express.g:1349:40: ( enumeration_items )?
                if ( stream_enumeration_items.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumeration_items.nextTree());

                }
                stream_enumeration_items.reset();
                // Express.g:1349:59: ( enumeration_extension )?
                if ( stream_enumeration_extension.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumeration_extension.nextTree());

                }
                stream_enumeration_extension.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	if (retval.eids==null) retval.eids = new EnumerationType();
              		retval.eids.setExtensible(ext);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, enumeration_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeration_type"

    public static class enumeration_items_return extends ParserRuleReturnScope {
        public EnumerationType eids;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumeration_items"
    // Express.g:1352:1: enumeration_items returns [EnumerationType eids] : LPAREN id= enumeration_id ( COMMA id= enumeration_id )* RPAREN -> ^( ENUMERATION_ITEMS ( enumeration_id )+ ) ;
    public final enumeration_items_return enumeration_items() throws RecognitionException {
        enumeration_items_return retval = new enumeration_items_return();
        retval.start = input.LT(1);
        int enumeration_items_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN730=null;
        Token COMMA731=null;
        Token RPAREN732=null;
        enumeration_id_return id = null;


        CommonTree LPAREN730_tree=null;
        CommonTree COMMA731_tree=null;
        CommonTree RPAREN732_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_enumeration_id=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_id");

        	if (isFirst) retval.eids = new EnumerationType();
        	else retval.eids =null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // Express.g:1358:3: ( LPAREN id= enumeration_id ( COMMA id= enumeration_id )* RPAREN -> ^( ENUMERATION_ITEMS ( enumeration_id )+ ) )
            // Express.g:1358:5: LPAREN id= enumeration_id ( COMMA id= enumeration_id )* RPAREN
            {
            LPAREN730=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_enumeration_items9735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN730);

            pushFollow(FOLLOW_enumeration_id_in_enumeration_items9739);
            id=enumeration_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumeration_id.add(id.getTree());
            if ( state.backtracking==0 ) {
               if (isFirst) retval.eids.add((id!=null?input.toString(id.start,id.stop):null)); 
            }
            // Express.g:1358:68: ( COMMA id= enumeration_id )*
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);

                if ( (LA215_0==COMMA) ) {
                    alt215=1;
                }


                switch (alt215) {
            	case 1 :
            	    // Express.g:1358:70: COMMA id= enumeration_id
            	    {
            	    COMMA731=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumeration_items9745); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA731);

            	    pushFollow(FOLLOW_enumeration_id_in_enumeration_items9749);
            	    id=enumeration_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumeration_id.add(id.getTree());
            	    if ( state.backtracking==0 ) {
            	       if (isFirst) retval.eids.add((id!=null?input.toString(id.start,id.stop):null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);

            RPAREN732=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_enumeration_items9756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN732);



            // AST REWRITE
            // elements: enumeration_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1359:5: -> ^( ENUMERATION_ITEMS ( enumeration_id )+ )
            {
                // Express.g:1359:8: ^( ENUMERATION_ITEMS ( enumeration_id )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUMERATION_ITEMS, "ENUMERATION_ITEMS"), root_1);

                if ( !(stream_enumeration_id.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumeration_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumeration_id.nextTree());

                }
                stream_enumeration_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, enumeration_items_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeration_items"

    public static class enumeration_extension_return extends ParserRuleReturnScope {
        public EnumerationType eids;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumeration_extension"
    // Express.g:1362:1: enumeration_extension returns [EnumerationType eids] : ({...}? => 'based_on' id= IDENT ( 'with' eids2= enumeration_items )? | 'based_on' type_ref ( 'with' enumeration_items )? -> ^( ENUMERATION_EXTENSION type_ref ( enumeration_items )? ) );
    public final enumeration_extension_return enumeration_extension() throws RecognitionException {
        enumeration_extension_return retval = new enumeration_extension_return();
        retval.start = input.LT(1);
        int enumeration_extension_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token string_literal733=null;
        Token string_literal734=null;
        Token string_literal735=null;
        Token string_literal737=null;
        enumeration_items_return eids2 = null;

        type_ref_return type_ref736 = null;

        enumeration_items_return enumeration_items738 = null;


        CommonTree id_tree=null;
        CommonTree string_literal733_tree=null;
        CommonTree string_literal734_tree=null;
        CommonTree string_literal735_tree=null;
        CommonTree string_literal737_tree=null;
        RewriteRuleTokenStream stream_368=new RewriteRuleTokenStream(adaptor,"token 368");
        RewriteRuleTokenStream stream_369=new RewriteRuleTokenStream(adaptor,"token 369");
        RewriteRuleSubtreeStream stream_enumeration_items=new RewriteRuleSubtreeStream(adaptor,"rule enumeration_items");
        RewriteRuleSubtreeStream stream_type_ref=new RewriteRuleSubtreeStream(adaptor,"rule type_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // Express.g:1363:3: ({...}? => 'based_on' id= IDENT ( 'with' eids2= enumeration_items )? | 'based_on' type_ref ( 'with' enumeration_items )? -> ^( ENUMERATION_EXTENSION type_ref ( enumeration_items )? ) )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==368) ) {
                int LA218_1 = input.LA(2);

                if ( (LA218_1==IDENT) ) {
                    int LA218_2 = input.LA(3);

                    if ( ((synpred328_Express()&&( isFirst ))) ) {
                        alt218=1;
                    }
                    else if ( (true) ) {
                        alt218=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // Express.g:1363:5: {...}? => 'based_on' id= IDENT ( 'with' eids2= enumeration_items )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "enumeration_extension", " isFirst ");
                    }
                    string_literal733=(Token)match(input,368,FOLLOW_368_in_enumeration_extension9790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal733_tree = (CommonTree)adaptor.create(string_literal733);
                    adaptor.addChild(root_0, string_literal733_tree);
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumeration_extension9794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.eids = new EnumerationType();
                    }
                    // Express.g:1363:73: ( 'with' eids2= enumeration_items )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==369) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // Express.g:1363:75: 'with' eids2= enumeration_items
                            {
                            string_literal734=(Token)match(input,369,FOLLOW_369_in_enumeration_extension9800); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal734_tree = (CommonTree)adaptor.create(string_literal734);
                            adaptor.addChild(root_0, string_literal734_tree);
                            }
                            pushFollow(FOLLOW_enumeration_items_in_enumeration_extension9804);
                            eids2=enumeration_items();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, eids2.getTree());
                            if ( state.backtracking==0 ) {
                              retval.eids = (eids2!=null?eids2.eids:null); 
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.eids.setBasedOn((id!=null?id.getText():null)); log.debug("ext!");
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1364:5: 'based_on' type_ref ( 'with' enumeration_items )?
                    {
                    string_literal735=(Token)match(input,368,FOLLOW_368_in_enumeration_extension9816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_368.add(string_literal735);

                    pushFollow(FOLLOW_type_ref_in_enumeration_extension9818);
                    type_ref736=type_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_ref.add(type_ref736.getTree());
                    // Express.g:1364:25: ( 'with' enumeration_items )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==369) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // Express.g:1364:27: 'with' enumeration_items
                            {
                            string_literal737=(Token)match(input,369,FOLLOW_369_in_enumeration_extension9822); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_369.add(string_literal737);

                            pushFollow(FOLLOW_enumeration_items_in_enumeration_extension9824);
                            enumeration_items738=enumeration_items();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumeration_items.add(enumeration_items738.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: enumeration_items, type_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1365:4: -> ^( ENUMERATION_EXTENSION type_ref ( enumeration_items )? )
                    {
                        // Express.g:1365:7: ^( ENUMERATION_EXTENSION type_ref ( enumeration_items )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUMERATION_EXTENSION, "ENUMERATION_EXTENSION"), root_1);

                        adaptor.addChild(root_1, stream_type_ref.nextTree());
                        // Express.g:1365:40: ( enumeration_items )?
                        if ( stream_enumeration_items.hasNext() ) {
                            adaptor.addChild(root_1, stream_enumeration_items.nextTree());

                        }
                        stream_enumeration_items.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, enumeration_extension_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeration_extension"

    public static class enumeration_id_return extends ParserRuleReturnScope {
        public String eid;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumeration_id"
    // Express.g:1368:1: enumeration_id returns [String eid] : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( ENUMERATION_ID IDENT[$id] ) );
    public final enumeration_id_return enumeration_id() throws RecognitionException {
        enumeration_id_return retval = new enumeration_id_return();
        retval.start = input.LT(1);
        int enumeration_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // Express.g:1369:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( ENUMERATION_ID IDENT[$id] ) )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==IDENT) ) {
                int LA219_1 = input.LA(2);

                if ( ((synpred330_Express()&&( isFirst ))) ) {
                    alt219=1;
                }
                else if ( ((nextIs(ENUMERATION_IDENT))) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // Express.g:1369:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "enumeration_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumeration_id9863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.eid =(id!=null?id.getText():null); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1370:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENUMERATION_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "enumeration_id", "nextIs(ENUMERATION_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumeration_id9876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1371:4: -> ^( ENUMERATION_ID IDENT[$id] )
                    {
                        // Express.g:1371:7: ^( ENUMERATION_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUMERATION_ID, "ENUMERATION_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, enumeration_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeration_id"

    public static class select_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_type"
    // Express.g:1374:1: select_type : ( 'extensible' )? ( 'generic_entity' )? 'select' ( select_list | select_extension )? -> ^( SELECT_TYPE ( 'extensible' )? ( 'generic_entity' )? ( select_list )? ( select_extension )? ) ;
    public final select_type_return select_type() throws RecognitionException {
        select_type_return retval = new select_type_return();
        retval.start = input.LT(1);
        int select_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal739=null;
        Token string_literal740=null;
        Token string_literal741=null;
        select_list_return select_list742 = null;

        select_extension_return select_extension743 = null;


        CommonTree string_literal739_tree=null;
        CommonTree string_literal740_tree=null;
        CommonTree string_literal741_tree=null;
        RewriteRuleTokenStream stream_366=new RewriteRuleTokenStream(adaptor,"token 366");
        RewriteRuleTokenStream stream_328=new RewriteRuleTokenStream(adaptor,"token 328");
        RewriteRuleTokenStream stream_370=new RewriteRuleTokenStream(adaptor,"token 370");
        RewriteRuleSubtreeStream stream_select_extension=new RewriteRuleSubtreeStream(adaptor,"rule select_extension");
        RewriteRuleSubtreeStream stream_select_list=new RewriteRuleSubtreeStream(adaptor,"rule select_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // Express.g:1375:3: ( ( 'extensible' )? ( 'generic_entity' )? 'select' ( select_list | select_extension )? -> ^( SELECT_TYPE ( 'extensible' )? ( 'generic_entity' )? ( select_list )? ( select_extension )? ) )
            // Express.g:1375:6: ( 'extensible' )? ( 'generic_entity' )? 'select' ( select_list | select_extension )?
            {
            // Express.g:1375:6: ( 'extensible' )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==366) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // Express.g:0:0: 'extensible'
                    {
                    string_literal739=(Token)match(input,366,FOLLOW_366_in_select_type9902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_366.add(string_literal739);


                    }
                    break;

            }

            // Express.g:1375:20: ( 'generic_entity' )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==328) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // Express.g:0:0: 'generic_entity'
                    {
                    string_literal740=(Token)match(input,328,FOLLOW_328_in_select_type9905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_328.add(string_literal740);


                    }
                    break;

            }

            string_literal741=(Token)match(input,370,FOLLOW_370_in_select_type9908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_370.add(string_literal741);

            // Express.g:1375:47: ( select_list | select_extension )?
            int alt222=3;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==LPAREN) ) {
                alt222=1;
            }
            else if ( (LA222_0==368) ) {
                alt222=2;
            }
            switch (alt222) {
                case 1 :
                    // Express.g:1375:49: select_list
                    {
                    pushFollow(FOLLOW_select_list_in_select_type9912);
                    select_list742=select_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_list.add(select_list742.getTree());

                    }
                    break;
                case 2 :
                    // Express.g:1375:63: select_extension
                    {
                    pushFollow(FOLLOW_select_extension_in_select_type9916);
                    select_extension743=select_extension();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_extension.add(select_extension743.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: 366, select_extension, 328, select_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1376:4: -> ^( SELECT_TYPE ( 'extensible' )? ( 'generic_entity' )? ( select_list )? ( select_extension )? )
            {
                // Express.g:1376:7: ^( SELECT_TYPE ( 'extensible' )? ( 'generic_entity' )? ( select_list )? ( select_extension )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_TYPE, "SELECT_TYPE"), root_1);

                // Express.g:1376:21: ( 'extensible' )?
                if ( stream_366.hasNext() ) {
                    adaptor.addChild(root_1, stream_366.nextNode());

                }
                stream_366.reset();
                // Express.g:1376:35: ( 'generic_entity' )?
                if ( stream_328.hasNext() ) {
                    adaptor.addChild(root_1, stream_328.nextNode());

                }
                stream_328.reset();
                // Express.g:1376:53: ( select_list )?
                if ( stream_select_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_list.nextTree());

                }
                stream_select_list.reset();
                // Express.g:1376:66: ( select_extension )?
                if ( stream_select_extension.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_extension.nextTree());

                }
                stream_select_extension.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, select_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_type"

    public static class select_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_list"
    // Express.g:1379:1: select_list : LPAREN named_types ( COMMA named_types )* RPAREN -> ^( SELECT_LIST ( named_types )+ ) ;
    public final select_list_return select_list() throws RecognitionException {
        select_list_return retval = new select_list_return();
        retval.start = input.LT(1);
        int select_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN744=null;
        Token COMMA746=null;
        Token RPAREN748=null;
        named_types_return named_types745 = null;

        named_types_return named_types747 = null;


        CommonTree LPAREN744_tree=null;
        CommonTree COMMA746_tree=null;
        CommonTree RPAREN748_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_named_types=new RewriteRuleSubtreeStream(adaptor,"rule named_types");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // Express.g:1380:3: ( LPAREN named_types ( COMMA named_types )* RPAREN -> ^( SELECT_LIST ( named_types )+ ) )
            // Express.g:1380:6: LPAREN named_types ( COMMA named_types )* RPAREN
            {
            LPAREN744=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_select_list9954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN744);

            pushFollow(FOLLOW_named_types_in_select_list9956);
            named_types745=named_types();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_named_types.add(named_types745.getTree());
            // Express.g:1380:25: ( COMMA named_types )*
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==COMMA) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // Express.g:1380:27: COMMA named_types
            	    {
            	    COMMA746=(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list9960); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA746);

            	    pushFollow(FOLLOW_named_types_in_select_list9962);
            	    named_types747=named_types();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_named_types.add(named_types747.getTree());

            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);

            RPAREN748=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_select_list9967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN748);



            // AST REWRITE
            // elements: named_types
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1381:4: -> ^( SELECT_LIST ( named_types )+ )
            {
                // Express.g:1381:7: ^( SELECT_LIST ( named_types )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_LIST, "SELECT_LIST"), root_1);

                if ( !(stream_named_types.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_named_types.hasNext() ) {
                    adaptor.addChild(root_1, stream_named_types.nextTree());

                }
                stream_named_types.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, select_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_list"

    public static class select_extension_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_extension"
    // Express.g:1384:1: select_extension : ({...}? => 'based_on' IDENT ( 'with' select_list )? | 'based_on' type_ref ( 'with' select_list )? -> ^( SELECT_EXTENSION type_ref ( select_list )? ) );
    public final select_extension_return select_extension() throws RecognitionException {
        select_extension_return retval = new select_extension_return();
        retval.start = input.LT(1);
        int select_extension_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal749=null;
        Token IDENT750=null;
        Token string_literal751=null;
        Token string_literal753=null;
        Token string_literal755=null;
        select_list_return select_list752 = null;

        type_ref_return type_ref754 = null;

        select_list_return select_list756 = null;


        CommonTree string_literal749_tree=null;
        CommonTree IDENT750_tree=null;
        CommonTree string_literal751_tree=null;
        CommonTree string_literal753_tree=null;
        CommonTree string_literal755_tree=null;
        RewriteRuleTokenStream stream_368=new RewriteRuleTokenStream(adaptor,"token 368");
        RewriteRuleTokenStream stream_369=new RewriteRuleTokenStream(adaptor,"token 369");
        RewriteRuleSubtreeStream stream_select_list=new RewriteRuleSubtreeStream(adaptor,"rule select_list");
        RewriteRuleSubtreeStream stream_type_ref=new RewriteRuleSubtreeStream(adaptor,"rule type_ref");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // Express.g:1385:3: ({...}? => 'based_on' IDENT ( 'with' select_list )? | 'based_on' type_ref ( 'with' select_list )? -> ^( SELECT_EXTENSION type_ref ( select_list )? ) )
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==368) ) {
                int LA226_1 = input.LA(2);

                if ( (LA226_1==IDENT) ) {
                    int LA226_2 = input.LA(3);

                    if ( ((synpred337_Express()&&( isFirst ))) ) {
                        alt226=1;
                    }
                    else if ( (true) ) {
                        alt226=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 226, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    // Express.g:1385:5: {...}? => 'based_on' IDENT ( 'with' select_list )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "select_extension", " isFirst ");
                    }
                    string_literal749=(Token)match(input,368,FOLLOW_368_in_select_extension9996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal749_tree = (CommonTree)adaptor.create(string_literal749);
                    adaptor.addChild(root_0, string_literal749_tree);
                    }
                    IDENT750=(Token)match(input,IDENT,FOLLOW_IDENT_in_select_extension9998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT750_tree = (CommonTree)adaptor.create(IDENT750);
                    adaptor.addChild(root_0, IDENT750_tree);
                    }
                    // Express.g:1385:38: ( 'with' select_list )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==369) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // Express.g:1385:40: 'with' select_list
                            {
                            string_literal751=(Token)match(input,369,FOLLOW_369_in_select_extension10002); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal751_tree = (CommonTree)adaptor.create(string_literal751);
                            adaptor.addChild(root_0, string_literal751_tree);
                            }
                            pushFollow(FOLLOW_select_list_in_select_extension10004);
                            select_list752=select_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list752.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Express.g:1386:6: 'based_on' type_ref ( 'with' select_list )?
                    {
                    string_literal753=(Token)match(input,368,FOLLOW_368_in_select_extension10014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_368.add(string_literal753);

                    pushFollow(FOLLOW_type_ref_in_select_extension10016);
                    type_ref754=type_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_ref.add(type_ref754.getTree());
                    // Express.g:1386:26: ( 'with' select_list )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==369) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // Express.g:1386:28: 'with' select_list
                            {
                            string_literal755=(Token)match(input,369,FOLLOW_369_in_select_extension10020); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_369.add(string_literal755);

                            pushFollow(FOLLOW_select_list_in_select_extension10022);
                            select_list756=select_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_select_list.add(select_list756.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: type_ref, select_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1387:4: -> ^( SELECT_EXTENSION type_ref ( select_list )? )
                    {
                        // Express.g:1387:7: ^( SELECT_EXTENSION type_ref ( select_list )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_EXTENSION, "SELECT_EXTENSION"), root_1);

                        adaptor.addChild(root_1, stream_type_ref.nextTree());
                        // Express.g:1387:35: ( select_list )?
                        if ( stream_select_list.hasNext() ) {
                            adaptor.addChild(root_1, stream_select_list.nextTree());

                        }
                        stream_select_list.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, select_extension_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_extension"

    public static class type_id_return extends ParserRuleReturnScope {
        public String s;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_id"
    // Express.g:1390:1: type_id returns [String s] : ({...}? =>id= IDENT | {...}?id= IDENT -> ^( TYPE_ID IDENT[$id] ) );
    public final type_id_return type_id() throws RecognitionException {
        type_id_return retval = new type_id_return();
        retval.start = input.LT(1);
        int type_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // Express.g:1391:3: ({...}? =>id= IDENT | {...}?id= IDENT -> ^( TYPE_ID IDENT[$id] ) )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==IDENT) ) {
                int LA227_1 = input.LA(2);

                if ( ((synpred339_Express()&&( isFirst ))) ) {
                    alt227=1;
                }
                else if ( ((nextIs(TYPE_IDENT))) ) {
                    alt227=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // Express.g:1391:5: {...}? =>id= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( isFirst )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "type_id", " isFirst ");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_id10062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (CommonTree)adaptor.create(id);
                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       addId((id!=null?id.getText():null),TYPE_IDENT); retval.s =(id!=null?id.getText():null); 
                    }

                    }
                    break;
                case 2 :
                    // Express.g:1392:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "type_id", "nextIs(TYPE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_id10075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1393:4: -> ^( TYPE_ID IDENT[$id] )
                    {
                        // Express.g:1393:7: ^( TYPE_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_ID, "TYPE_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, type_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_id"

    public static class type_label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_label"
    // Express.g:1396:1: type_label : IDENT -> ^( TYPE_LABEL IDENT ) ;
    public final type_label_return type_label() throws RecognitionException {
        type_label_return retval = new type_label_return();
        retval.start = input.LT(1);
        int type_label_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT757=null;

        CommonTree IDENT757_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // Express.g:1397:3: ( IDENT -> ^( TYPE_LABEL IDENT ) )
            // Express.g:1397:6: IDENT
            {
            IDENT757=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_label10102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT757);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1397:12: -> ^( TYPE_LABEL IDENT )
            {
                // Express.g:1397:15: ^( TYPE_LABEL IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_LABEL, "TYPE_LABEL"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, type_label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_label"

    public static class type_label_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_label_id"
    // Express.g:1400:1: type_label_id : IDENT -> ^( TYPE_LABEL_ID IDENT ) ;
    public final type_label_id_return type_label_id() throws RecognitionException {
        type_label_id_return retval = new type_label_id_return();
        retval.start = input.LT(1);
        int type_label_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT758=null;

        CommonTree IDENT758_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // Express.g:1401:3: ( IDENT -> ^( TYPE_LABEL_ID IDENT ) )
            // Express.g:1401:6: IDENT
            {
            IDENT758=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_label_id10124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT758);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1401:12: -> ^( TYPE_LABEL_ID IDENT )
            {
                // Express.g:1401:15: ^( TYPE_LABEL_ID IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_LABEL_ID, "TYPE_LABEL_ID"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, type_label_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_label_id"

    public static class unary_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_op"
    // Express.g:1404:1: unary_op : ( PLUS -> ^( UNARY_OP PLUS ) | MINUS -> ^( UNARY_OP MINUS ) | NOT -> ^( UNARY_OP NOT ) );
    public final unary_op_return unary_op() throws RecognitionException {
        unary_op_return retval = new unary_op_return();
        retval.start = input.LT(1);
        int unary_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS759=null;
        Token MINUS760=null;
        Token NOT761=null;

        CommonTree PLUS759_tree=null;
        CommonTree MINUS760_tree=null;
        CommonTree NOT761_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // Express.g:1405:3: ( PLUS -> ^( UNARY_OP PLUS ) | MINUS -> ^( UNARY_OP MINUS ) | NOT -> ^( UNARY_OP NOT ) )
            int alt228=3;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt228=1;
                }
                break;
            case MINUS:
                {
                alt228=2;
                }
                break;
            case NOT:
                {
                alt228=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }

            switch (alt228) {
                case 1 :
                    // Express.g:1405:6: PLUS
                    {
                    PLUS759=(Token)match(input,PLUS,FOLLOW_PLUS_in_unary_op10146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS759);



                    // AST REWRITE
                    // elements: PLUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1405:11: -> ^( UNARY_OP PLUS )
                    {
                        // Express.g:1405:14: ^( UNARY_OP PLUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_OP, "UNARY_OP"), root_1);

                        adaptor.addChild(root_1, stream_PLUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1406:6: MINUS
                    {
                    MINUS760=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_op10161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS760);



                    // AST REWRITE
                    // elements: MINUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1406:12: -> ^( UNARY_OP MINUS )
                    {
                        // Express.g:1406:15: ^( UNARY_OP MINUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_OP, "UNARY_OP"), root_1);

                        adaptor.addChild(root_1, stream_MINUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1407:6: NOT
                    {
                    NOT761=(Token)match(input,NOT,FOLLOW_NOT_in_unary_op10176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT761);



                    // AST REWRITE
                    // elements: NOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1407:10: -> ^( UNARY_OP NOT )
                    {
                        // Express.g:1407:13: ^( UNARY_OP NOT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_OP, "UNARY_OP"), root_1);

                        adaptor.addChild(root_1, stream_NOT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, unary_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_op"

    public static class until_control_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "until_control"
    // Express.g:1410:1: until_control : 'until' logical_expression -> ^( UNTIL_CONTROL logical_expression ) ;
    public final until_control_return until_control() throws RecognitionException {
        until_control_return retval = new until_control_return();
        retval.start = input.LT(1);
        int until_control_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal762=null;
        logical_expression_return logical_expression763 = null;


        CommonTree string_literal762_tree=null;
        RewriteRuleTokenStream stream_371=new RewriteRuleTokenStream(adaptor,"token 371");
        RewriteRuleSubtreeStream stream_logical_expression=new RewriteRuleSubtreeStream(adaptor,"rule logical_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // Express.g:1411:3: ( 'until' logical_expression -> ^( UNTIL_CONTROL logical_expression ) )
            // Express.g:1411:6: 'until' logical_expression
            {
            string_literal762=(Token)match(input,371,FOLLOW_371_in_until_control10198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_371.add(string_literal762);

            pushFollow(FOLLOW_logical_expression_in_until_control10201);
            logical_expression763=logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_logical_expression.add(logical_expression763.getTree());


            // AST REWRITE
            // elements: logical_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1412:3: -> ^( UNTIL_CONTROL logical_expression )
            {
                // Express.g:1412:6: ^( UNTIL_CONTROL logical_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNTIL_CONTROL, "UNTIL_CONTROL"), root_1);

                adaptor.addChild(root_1, stream_logical_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, until_control_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "until_control"

    public static class variable_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_id"
    // Express.g:1426:1: variable_id : (id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) );
    public final variable_id_return variable_id() throws RecognitionException {
        variable_id_return retval = new variable_id_return();
        retval.start = input.LT(1);
        int variable_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // Express.g:1427:3: (id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_ID IDENT[$id] ) )
            int alt229=4;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==IDENT) ) {
                int LA229_1 = input.LA(2);

                if ( (synpred342_Express()) ) {
                    alt229=1;
                }
                else if ( (synpred343_Express()) ) {
                    alt229=2;
                }
                else if ( (synpred344_Express()) ) {
                    alt229=3;
                }
                else if ( (true) ) {
                    alt229=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // Express.g:1427:5: id= IDENT
                    {
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_id10228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);

                    if ( state.backtracking==0 ) {
                       if (isFirst) addId((id!=null?id.getText():null),VARIABLE_IDENT); 
                    }


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1427:63: -> ^( VARIABLE_ID IDENT[$id] )
                    {
                        // Express.g:1427:66: ^( VARIABLE_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_ID, "VARIABLE_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1428:6: {...}?id= IDENT
                    {
                    if ( state.backtracking==0 ) {
                      log.debug("variable spotted");
                    }
                    if ( !((nextIs(VARIABLE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "variable_id", "nextIs(VARIABLE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_id10252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1429:4: -> ^( VARIABLE_ID IDENT[$id] )
                    {
                        // Express.g:1429:7: ^( VARIABLE_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_ID, "VARIABLE_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1430:6: {...}?id= IDENT
                    {
                    if ( state.backtracking==0 ) {
                      log.debug("variable spotted");
                    }
                    if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "variable_id", "nextIs(ENTITY_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_id10277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1431:4: -> ^( VARIABLE_ID IDENT[$id] )
                    {
                        // Express.g:1431:7: ^( VARIABLE_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_ID, "VARIABLE_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1432:6: {...}?id= IDENT
                    {
                    if ( state.backtracking==0 ) {
                      log.debug("variable spotted");
                    }
                    if ( !((nextIs(TYPE_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "variable_id", "nextIs(TYPE_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_id10302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1433:4: -> ^( VARIABLE_ID IDENT[$id] )
                    {
                        // Express.g:1433:7: ^( VARIABLE_ID IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_ID, "VARIABLE_ID"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, variable_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_id"

    public static class where_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_clause"
    // Express.g:1436:1: where_clause : 'where' domain_rule SEMI ( domain_rule SEMI )* -> ^( WHERE_CLAUSE ( domain_rule )+ ) ;
    public final where_clause_return where_clause() throws RecognitionException {
        where_clause_return retval = new where_clause_return();
        retval.start = input.LT(1);
        int where_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal764=null;
        Token SEMI766=null;
        Token SEMI768=null;
        domain_rule_return domain_rule765 = null;

        domain_rule_return domain_rule767 = null;


        CommonTree string_literal764_tree=null;
        CommonTree SEMI766_tree=null;
        CommonTree SEMI768_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_372=new RewriteRuleTokenStream(adaptor,"token 372");
        RewriteRuleSubtreeStream stream_domain_rule=new RewriteRuleSubtreeStream(adaptor,"rule domain_rule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // Express.g:1437:3: ( 'where' domain_rule SEMI ( domain_rule SEMI )* -> ^( WHERE_CLAUSE ( domain_rule )+ ) )
            // Express.g:1437:6: 'where' domain_rule SEMI ( domain_rule SEMI )*
            {
            string_literal764=(Token)match(input,372,FOLLOW_372_in_where_clause10328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_372.add(string_literal764);

            pushFollow(FOLLOW_domain_rule_in_where_clause10331);
            domain_rule765=domain_rule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_domain_rule.add(domain_rule765.getTree());
            SEMI766=(Token)match(input,SEMI,FOLLOW_SEMI_in_where_clause10334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI766);

            // Express.g:1437:34: ( domain_rule SEMI )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( ((LA230_0>=CONST_E && LA230_0<=FUNCTION_SIZEOF)||LA230_0==NOT||LA230_0==LPAREN||(LA230_0>=PLUS && LA230_0<=LBRACK)||LA230_0==IDENT||(LA230_0>=QUESTION && LA230_0<=STAR)||LA230_0==LCURLY||(LA230_0>=FLOAT && LA230_0<=STRING)||LA230_0==QUERY||(LA230_0>=338 && LA230_0<=340)) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // Express.g:1437:37: domain_rule SEMI
            	    {
            	    pushFollow(FOLLOW_domain_rule_in_where_clause10340);
            	    domain_rule767=domain_rule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_domain_rule.add(domain_rule767.getTree());
            	    SEMI768=(Token)match(input,SEMI,FOLLOW_SEMI_in_where_clause10343); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMI.add(SEMI768);


            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);



            // AST REWRITE
            // elements: domain_rule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1438:4: -> ^( WHERE_CLAUSE ( domain_rule )+ )
            {
                // Express.g:1438:7: ^( WHERE_CLAUSE ( domain_rule )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_CLAUSE, "WHERE_CLAUSE"), root_1);

                if ( !(stream_domain_rule.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_domain_rule.hasNext() ) {
                    adaptor.addChild(root_1, stream_domain_rule.nextTree());

                }
                stream_domain_rule.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, where_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class while_control_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_control"
    // Express.g:1441:1: while_control : 'while' logical_expression -> ^( WHILE_CONTROL logical_expression ) ;
    public final while_control_return while_control() throws RecognitionException {
        while_control_return retval = new while_control_return();
        retval.start = input.LT(1);
        int while_control_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal769=null;
        logical_expression_return logical_expression770 = null;


        CommonTree string_literal769_tree=null;
        RewriteRuleTokenStream stream_373=new RewriteRuleTokenStream(adaptor,"token 373");
        RewriteRuleSubtreeStream stream_logical_expression=new RewriteRuleSubtreeStream(adaptor,"rule logical_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // Express.g:1442:3: ( 'while' logical_expression -> ^( WHILE_CONTROL logical_expression ) )
            // Express.g:1442:6: 'while' logical_expression
            {
            string_literal769=(Token)match(input,373,FOLLOW_373_in_while_control10372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_373.add(string_literal769);

            pushFollow(FOLLOW_logical_expression_in_while_control10375);
            logical_expression770=logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_logical_expression.add(logical_expression770.getTree());


            // AST REWRITE
            // elements: logical_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1443:4: -> ^( WHILE_CONTROL logical_expression )
            {
                // Express.g:1443:7: ^( WHILE_CONTROL logical_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_CONTROL, "WHILE_CONTROL"), root_1);

                adaptor.addChild(root_1, stream_logical_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, while_control_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_control"

    public static class width_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "width"
    // Express.g:1446:1: width : numeric_expression -> ^( WIDTH numeric_expression ) ;
    public final width_return width() throws RecognitionException {
        width_return retval = new width_return();
        retval.start = input.LT(1);
        int width_StartIndex = input.index();
        CommonTree root_0 = null;

        numeric_expression_return numeric_expression771 = null;


        RewriteRuleSubtreeStream stream_numeric_expression=new RewriteRuleSubtreeStream(adaptor,"rule numeric_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // Express.g:1447:3: ( numeric_expression -> ^( WIDTH numeric_expression ) )
            // Express.g:1447:6: numeric_expression
            {
            pushFollow(FOLLOW_numeric_expression_in_width10400);
            numeric_expression771=numeric_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric_expression.add(numeric_expression771.getTree());


            // AST REWRITE
            // elements: numeric_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1448:4: -> ^( WIDTH numeric_expression )
            {
                // Express.g:1448:7: ^( WIDTH numeric_expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WIDTH, "WIDTH"), root_1);

                adaptor.addChild(root_1, stream_numeric_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, width_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "width"

    public static class width_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "width_spec"
    // Express.g:1451:1: width_spec : LPAREN width RPAREN ( 'fixed' )? -> ^( WIDTH_SPEC width ( 'fixed' )? ) ;
    public final width_spec_return width_spec() throws RecognitionException {
        width_spec_return retval = new width_spec_return();
        retval.start = input.LT(1);
        int width_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN772=null;
        Token RPAREN774=null;
        Token string_literal775=null;
        width_return width773 = null;


        CommonTree LPAREN772_tree=null;
        CommonTree RPAREN774_tree=null;
        CommonTree string_literal775_tree=null;
        RewriteRuleTokenStream stream_374=new RewriteRuleTokenStream(adaptor,"token 374");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_width=new RewriteRuleSubtreeStream(adaptor,"rule width");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // Express.g:1452:3: ( LPAREN width RPAREN ( 'fixed' )? -> ^( WIDTH_SPEC width ( 'fixed' )? ) )
            // Express.g:1452:6: LPAREN width RPAREN ( 'fixed' )?
            {
            LPAREN772=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_width_spec10425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN772);

            pushFollow(FOLLOW_width_in_width_spec10428);
            width773=width();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_width.add(width773.getTree());
            RPAREN774=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_width_spec10431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN774);

            // Express.g:1452:29: ( 'fixed' )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==374) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // Express.g:0:0: 'fixed'
                    {
                    string_literal775=(Token)match(input,374,FOLLOW_374_in_width_spec10434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_374.add(string_literal775);


                    }
                    break;

            }



            // AST REWRITE
            // elements: 374, width
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1453:4: -> ^( WIDTH_SPEC width ( 'fixed' )? )
            {
                // Express.g:1453:7: ^( WIDTH_SPEC width ( 'fixed' )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WIDTH_SPEC, "WIDTH_SPEC"), root_1);

                adaptor.addChild(root_1, stream_width.nextTree());
                // Express.g:1453:26: ( 'fixed' )?
                if ( stream_374.hasNext() ) {
                    adaptor.addChild(root_1, stream_374.nextNode());

                }
                stream_374.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, width_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "width_spec"

    public static class entity_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entity_ref"
    // Express.g:1456:1: entity_ref : ({...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) );
    public final entity_ref_return entity_ref() throws RecognitionException {
        entity_ref_return retval = new entity_ref_return();
        retval.start = input.LT(1);
        int entity_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // Express.g:1457:3: ({...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ENTITY_REF IDENT[$id] ) )
            int alt232=4;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==IDENT) ) {
                int LA232_1 = input.LA(2);

                if ( ((synpred347_Express()&&(nextIs(ENTITY_IDENT)))) ) {
                    alt232=1;
                }
                else if ( ((synpred348_Express()&&(nextIs(ENTITY_ATTR_IDENT)))) ) {
                    alt232=2;
                }
                else if ( ((synpred349_Express()&&(nextIs(ENTITY_VAR_IDENT)))) ) {
                    alt232=3;
                }
                else if ( ((nextIs(ENTITY_PARAM_IDENT))) ) {
                    alt232=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 232, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // Express.g:1457:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_ref", "nextIs(ENTITY_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_entity_ref10466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1458:4: -> ^( ENTITY_REF IDENT[$id] )
                    {
                        // Express.g:1458:7: ^( ENTITY_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_REF, "ENTITY_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1459:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_ref", "nextIs(ENTITY_ATTR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_entity_ref10488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1460:4: -> ^( ENTITY_REF IDENT[$id] )
                    {
                        // Express.g:1460:7: ^( ENTITY_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_REF, "ENTITY_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1461:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_ref", "nextIs(ENTITY_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_entity_ref10510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1462:4: -> ^( ENTITY_REF IDENT[$id] )
                    {
                        // Express.g:1462:7: ^( ENTITY_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_REF, "ENTITY_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1463:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "entity_ref", "nextIs(ENTITY_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_entity_ref10532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1464:4: -> ^( ENTITY_REF IDENT[$id] )
                    {
                        // Express.g:1464:7: ^( ENTITY_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENTITY_REF, "ENTITY_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, entity_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "entity_ref"

    public static class type_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_ref"
    // Express.g:1467:1: type_ref : ({...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) );
    public final type_ref_return type_ref() throws RecognitionException {
        type_ref_return retval = new type_ref_return();
        retval.start = input.LT(1);
        int type_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // Express.g:1468:3: ({...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( TYPE_REF IDENT[$id] ) )
            int alt233=4;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==IDENT) ) {
                int LA233_1 = input.LA(2);

                if ( ((synpred350_Express()&&(nextIs(TYPE_IDENT)))) ) {
                    alt233=1;
                }
                else if ( ((synpred351_Express()&&(nextIs(TYPE_ATTR_IDENT)))) ) {
                    alt233=2;
                }
                else if ( ((synpred352_Express()&&(nextIs(TYPE_VAR_IDENT)))) ) {
                    alt233=3;
                }
                else if ( ((nextIs(TYPE_PARAM_IDENT))) ) {
                    alt233=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // Express.g:1468:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "type_ref", "nextIs(TYPE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_ref10561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1469:4: -> ^( TYPE_REF IDENT[$id] )
                    {
                        // Express.g:1469:7: ^( TYPE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_REF, "TYPE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1470:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "type_ref", "nextIs(TYPE_ATTR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_ref10583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1471:4: -> ^( TYPE_REF IDENT[$id] )
                    {
                        // Express.g:1471:7: ^( TYPE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_REF, "TYPE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1472:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "type_ref", "nextIs(TYPE_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_ref10605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1473:4: -> ^( TYPE_REF IDENT[$id] )
                    {
                        // Express.g:1473:7: ^( TYPE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_REF, "TYPE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1474:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "type_ref", "nextIs(TYPE_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_ref10627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1475:4: -> ^( TYPE_REF IDENT[$id] )
                    {
                        // Express.g:1475:7: ^( TYPE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_REF, "TYPE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, type_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_ref"

    public static class enumeration_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumeration_ref"
    // Express.g:1478:1: enumeration_ref : {...}?id= IDENT -> ^( ENUMERATION_REF IDENT[$id] ) ;
    public final enumeration_ref_return enumeration_ref() throws RecognitionException {
        enumeration_ref_return retval = new enumeration_ref_return();
        retval.start = input.LT(1);
        int enumeration_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // Express.g:1479:3: ({...}?id= IDENT -> ^( ENUMERATION_REF IDENT[$id] ) )
            // Express.g:1479:5: {...}?id= IDENT
            {
            if ( !((nextIs(ENUMERATION_IDENT))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enumeration_ref", "nextIs(ENUMERATION_IDENT)");
            }
            id=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumeration_ref10655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(id);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1480:4: -> ^( ENUMERATION_REF IDENT[$id] )
            {
                // Express.g:1480:7: ^( ENUMERATION_REF IDENT[$id] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUMERATION_REF, "ENUMERATION_REF"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, enumeration_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeration_ref"

    public static class attribute_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_ref"
    // Express.g:1483:1: attribute_ref : ({...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) );
    public final attribute_ref_return attribute_ref() throws RecognitionException {
        attribute_ref_return retval = new attribute_ref_return();
        retval.start = input.LT(1);
        int attribute_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // Express.g:1484:3: ({...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) )
            int alt234=3;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==IDENT) ) {
                int LA234_1 = input.LA(2);

                if ( ((synpred353_Express()&&(nextIs(ATTRIBUTE_IDENT)))) ) {
                    alt234=1;
                }
                else if ( ((synpred354_Express()&&(nextIs(ENTITY_ATTR_IDENT)))) ) {
                    alt234=2;
                }
                else if ( ((nextIs(TYPE_ATTR_IDENT))) ) {
                    alt234=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    // Express.g:1484:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ATTRIBUTE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_ref", "nextIs(ATTRIBUTE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_ref10683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1485:4: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1485:7: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1486:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_ref", "nextIs(ENTITY_ATTR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_ref10704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1487:4: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1487:7: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1488:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "attribute_ref", "nextIs(TYPE_ATTR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute_ref10725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1489:4: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1489:7: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, attribute_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_ref"

    public static class constant_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_ref"
    // Express.g:1492:1: constant_ref : {...}?id= IDENT -> ^( CONSTANT_REF IDENT[$id] ) ;
    public final constant_ref_return constant_ref() throws RecognitionException {
        constant_ref_return retval = new constant_ref_return();
        retval.start = input.LT(1);
        int constant_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // Express.g:1493:3: ({...}?id= IDENT -> ^( CONSTANT_REF IDENT[$id] ) )
            // Express.g:1493:5: {...}?id= IDENT
            {
            if ( !((nextIs(CONSTANT_IDENT))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constant_ref", "nextIs(CONSTANT_IDENT)");
            }
            id=(Token)match(input,IDENT,FOLLOW_IDENT_in_constant_ref10760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(id);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1494:4: -> ^( CONSTANT_REF IDENT[$id] )
            {
                // Express.g:1494:7: ^( CONSTANT_REF IDENT[$id] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTANT_REF, "CONSTANT_REF"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, constant_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_ref"

    public static class function_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_ref"
    // Express.g:1497:1: function_ref : {...}?id= IDENT -> ^( FUNCTION_REF IDENT[$id] ) ;
    public final function_ref_return function_ref() throws RecognitionException {
        function_ref_return retval = new function_ref_return();
        retval.start = input.LT(1);
        int function_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // Express.g:1498:3: ({...}?id= IDENT -> ^( FUNCTION_REF IDENT[$id] ) )
            // Express.g:1498:5: {...}?id= IDENT
            {
            if ( !((nextIs(FUNCTION_IDENT))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_ref", "nextIs(FUNCTION_IDENT)");
            }
            id=(Token)match(input,IDENT,FOLLOW_IDENT_in_function_ref10788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(id);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1499:4: -> ^( FUNCTION_REF IDENT[$id] )
            {
                // Express.g:1499:7: ^( FUNCTION_REF IDENT[$id] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_REF, "FUNCTION_REF"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, function_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_ref"

    public static class parameter_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_ref"
    // Express.g:1502:1: parameter_ref : ({...}?id= IDENT -> ^( PARAMETER_REF IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_REF IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_REF IDENT[$id] ) );
    public final parameter_ref_return parameter_ref() throws RecognitionException {
        parameter_ref_return retval = new parameter_ref_return();
        retval.start = input.LT(1);
        int parameter_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // Express.g:1503:3: ({...}?id= IDENT -> ^( PARAMETER_REF IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_REF IDENT[$id] ) | {...}?id= IDENT -> ^( PARAMETER_REF IDENT[$id] ) )
            int alt235=3;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==IDENT) ) {
                int LA235_1 = input.LA(2);

                if ( ((synpred355_Express()&&(nextIs(PARAMETER_IDENT)))) ) {
                    alt235=1;
                }
                else if ( ((synpred356_Express()&&(nextIs(ENTITY_PARAM_IDENT)))) ) {
                    alt235=2;
                }
                else if ( ((nextIs(TYPE_PARAM_IDENT))) ) {
                    alt235=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 235, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    // Express.g:1503:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(PARAMETER_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_ref", "nextIs(PARAMETER_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_ref10816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1504:4: -> ^( PARAMETER_REF IDENT[$id] )
                    {
                        // Express.g:1504:7: ^( PARAMETER_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_REF, "PARAMETER_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1505:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_ref", "nextIs(ENTITY_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_ref10837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1506:4: -> ^( PARAMETER_REF IDENT[$id] )
                    {
                        // Express.g:1506:7: ^( PARAMETER_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_REF, "PARAMETER_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1507:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_ref", "nextIs(TYPE_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_parameter_ref10858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1508:4: -> ^( PARAMETER_REF IDENT[$id] )
                    {
                        // Express.g:1508:7: ^( PARAMETER_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMETER_REF, "PARAMETER_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, parameter_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_ref"

    public static class variable_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_ref"
    // Express.g:1522:1: variable_ref : (id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) );
    public final variable_ref_return variable_ref() throws RecognitionException {
        variable_ref_return retval = new variable_ref_return();
        retval.start = input.LT(1);
        int variable_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // Express.g:1523:3: (id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( VARIABLE_REF IDENT[$id] ) )
            int alt236=4;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==IDENT) ) {
                int LA236_1 = input.LA(2);

                if ( (synpred357_Express()) ) {
                    alt236=1;
                }
                else if ( ((synpred358_Express()&&(nextIs(VARIABLE_IDENT)))) ) {
                    alt236=2;
                }
                else if ( ((synpred359_Express()&&(nextIs(ENTITY_VAR_IDENT)))) ) {
                    alt236=3;
                }
                else if ( ((nextIs(TYPE_VAR_IDENT))) ) {
                    alt236=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // Express.g:1523:5: id= IDENT
                    {
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_ref10888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1523:14: -> ^( VARIABLE_REF IDENT[$id] )
                    {
                        // Express.g:1523:17: ^( VARIABLE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_REF, "VARIABLE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1524:4: {...}?id= IDENT
                    {
                    if ( !((nextIs(VARIABLE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "variable_ref", "nextIs(VARIABLE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_ref10905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1525:4: -> ^( VARIABLE_REF IDENT[$id] )
                    {
                        // Express.g:1525:7: ^( VARIABLE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_REF, "VARIABLE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1526:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "variable_ref", "nextIs(ENTITY_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_ref10926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1527:4: -> ^( VARIABLE_REF IDENT[$id] )
                    {
                        // Express.g:1527:7: ^( VARIABLE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_REF, "VARIABLE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1528:5: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "variable_ref", "nextIs(TYPE_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable_ref10947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1529:4: -> ^( VARIABLE_REF IDENT[$id] )
                    {
                        // Express.g:1529:7: ^( VARIABLE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_REF, "VARIABLE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, variable_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_ref"

    public static class schema_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_ref"
    // Express.g:1532:1: schema_ref : {...}?id= IDENT -> ^( SCHEMA_REF IDENT[$id] ) ;
    public final schema_ref_return schema_ref() throws RecognitionException {
        schema_ref_return retval = new schema_ref_return();
        retval.start = input.LT(1);
        int schema_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // Express.g:1533:3: ({...}?id= IDENT -> ^( SCHEMA_REF IDENT[$id] ) )
            // Express.g:1533:5: {...}?id= IDENT
            {
            if ( !((nextIs(SCHEMA_IDENT))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "schema_ref", "nextIs(SCHEMA_IDENT)");
            }
            id=(Token)match(input,IDENT,FOLLOW_IDENT_in_schema_ref10975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(id);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1534:4: -> ^( SCHEMA_REF IDENT[$id] )
            {
                // Express.g:1534:7: ^( SCHEMA_REF IDENT[$id] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SCHEMA_REF, "SCHEMA_REF"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, schema_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_ref"

    public static class simple_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_id"
    // Express.g:1537:1: simple_id : IDENT -> ^( SIMPLE_ID IDENT ) ;
    public final simple_id_return simple_id() throws RecognitionException {
        simple_id_return retval = new simple_id_return();
        retval.start = input.LT(1);
        int simple_id_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT776=null;

        CommonTree IDENT776_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // Express.g:1538:3: ( IDENT -> ^( SIMPLE_ID IDENT ) )
            // Express.g:1538:5: IDENT
            {
            IDENT776=(Token)match(input,IDENT,FOLLOW_IDENT_in_simple_id11000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT776);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1538:11: -> ^( SIMPLE_ID IDENT )
            {
                // Express.g:1538:14: ^( SIMPLE_ID IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SIMPLE_ID, "SIMPLE_ID"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, simple_id_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_id"

    public static class type_label_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_label_ref"
    // Express.g:1541:1: type_label_ref : IDENT -> ^( TYPE_LABEL_REF IDENT ) ;
    public final type_label_ref_return type_label_ref() throws RecognitionException {
        type_label_ref_return retval = new type_label_ref_return();
        retval.start = input.LT(1);
        int type_label_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT777=null;

        CommonTree IDENT777_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // Express.g:1542:3: ( IDENT -> ^( TYPE_LABEL_REF IDENT ) )
            // Express.g:1542:5: IDENT
            {
            IDENT777=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_label_ref11021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT777);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1542:11: -> ^( TYPE_LABEL_REF IDENT )
            {
                // Express.g:1542:14: ^( TYPE_LABEL_REF IDENT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_LABEL_REF, "TYPE_LABEL_REF"), root_1);

                adaptor.addChild(root_1, stream_IDENT.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, type_label_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_label_ref"

    public static class procedure_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_ref"
    // Express.g:1545:1: procedure_ref : {...}?id= IDENT -> ^( PROCEDURE_REF IDENT[$id] ) ;
    public final procedure_ref_return procedure_ref() throws RecognitionException {
        procedure_ref_return retval = new procedure_ref_return();
        retval.start = input.LT(1);
        int procedure_ref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;

        CommonTree id_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // Express.g:1546:3: ({...}?id= IDENT -> ^( PROCEDURE_REF IDENT[$id] ) )
            // Express.g:1546:5: {...}?id= IDENT
            {
            if ( !((nextIs(PROCEDURE_IDENT))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "procedure_ref", "nextIs(PROCEDURE_IDENT)");
            }
            id=(Token)match(input,IDENT,FOLLOW_IDENT_in_procedure_ref11045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(id);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1547:4: -> ^( PROCEDURE_REF IDENT[$id] )
            {
                // Express.g:1547:7: ^( PROCEDURE_REF IDENT[$id] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCEDURE_REF, "PROCEDURE_REF"), root_1);

                adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, procedure_ref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_ref"

    public static class global_ident_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_ident"
    // Express.g:1550:1: global_ident : ({...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | IDENT -> ^( ATTRIBUTE_REF IDENT ) );
    public final global_ident_return global_ident() throws RecognitionException {
        global_ident_return retval = new global_ident_return();
        retval.start = input.LT(1);
        int global_ident_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token IDENT778=null;

        CommonTree id_tree=null;
        CommonTree IDENT778_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // Express.g:1553:3: ({...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | IDENT -> ^( ATTRIBUTE_REF IDENT ) )
            int alt237=17;
            alt237 = dfa237.predict(input);
            switch (alt237) {
                case 1 :
                    // Express.g:1553:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(CONSTANT_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(CONSTANT_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1553:40: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1553:43: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Express.g:1554:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(ENTITY_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1554:38: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1554:41: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Express.g:1555:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(FUNCTION_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(FUNCTION_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1555:40: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1555:43: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Express.g:1556:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(PROCEDURE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(PROCEDURE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1556:41: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1556:44: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Express.g:1557:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(PARAMETER_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(PARAMETER_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1557:41: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1557:44: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Express.g:1558:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(SCHEMA_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(SCHEMA_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1558:38: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1558:41: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Express.g:1559:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(TYPE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1559:36: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1559:39: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // Express.g:1560:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(VARIABLE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(VARIABLE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1560:40: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1560:43: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // Express.g:1561:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENUMERATION_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(ENUMERATION_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1561:43: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1561:46: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // Express.g:1562:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(ATTRIBUTE_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(ATTRIBUTE_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1562:41: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1562:44: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // Express.g:1563:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(ENTITY_ATTR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1563:43: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1563:46: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // Express.g:1564:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_ATTR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(TYPE_ATTR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1564:41: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1564:44: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // Express.g:1565:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(ENTITY_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1565:42: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1565:45: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // Express.g:1566:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_VAR_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(TYPE_VAR_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1566:40: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1566:43: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // Express.g:1567:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(ENTITY_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1567:44: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1567:47: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // Express.g:1568:6: {...}?id= IDENT
                    {
                    if ( !((nextIs(TYPE_PARAM_IDENT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "global_ident", "nextIs(TYPE_PARAM_IDENT)");
                    }
                    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11362); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1568:42: -> ^( ATTRIBUTE_REF IDENT[$id] )
                    {
                        // Express.g:1568:45: ^( ATTRIBUTE_REF IDENT[$id] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, id));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // Express.g:1569:6: IDENT
                    {
                    IDENT778=(Token)match(input,IDENT,FOLLOW_IDENT_in_global_ident11378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT778);



                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1569:12: -> ^( ATTRIBUTE_REF IDENT )
                    {
                        // Express.g:1569:15: ^( ATTRIBUTE_REF IDENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ATTRIBUTE_REF, "ATTRIBUTE_REF"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, global_ident_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "global_ident"

    // $ANTLR start synpred15_Express
    public final void synpred15_Express_fragment() throws RecognitionException {   
        // Express.g:392:68: ( stmt )
        // Express.g:392:68: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred15_Express1410);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Express

    // $ANTLR start synpred16_Express
    public final void synpred16_Express_fragment() throws RecognitionException {   
        // Express.g:392:5: ({...}? => 'alias' variable_id 'for' IDENT ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI )
        // Express.g:392:5: {...}? => 'alias' variable_id 'for' IDENT ( qualifier )* SEMI ( stmt )+ 'end_alias' SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred16_Express", " isFirst ");
        }
        match(input,295,FOLLOW_295_in_synpred16_Express1397); if (state.failed) return ;
        pushFollow(FOLLOW_variable_id_in_synpred16_Express1399);
        variable_id();

        state._fsp--;
        if (state.failed) return ;
        match(input,296,FOLLOW_296_in_synpred16_Express1401); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred16_Express1403); if (state.failed) return ;
        // Express.g:392:52: ( qualifier )*
        loop239:
        do {
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==LBRACK||LA239_0==DOT||LA239_0==BACKSLASH) ) {
                alt239=1;
            }


            switch (alt239) {
        	case 1 :
        	    // Express.g:0:0: qualifier
        	    {
        	    pushFollow(FOLLOW_qualifier_in_synpred16_Express1405);
        	    qualifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop239;
            }
        } while (true);

        match(input,SEMI,FOLLOW_SEMI_in_synpred16_Express1408); if (state.failed) return ;
        // Express.g:392:68: ( stmt )+
        int cnt240=0;
        loop240:
        do {
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( ((LA240_0>=PROCEDURE_INSERT && LA240_0<=PROCEDURE_REMOVE)||(LA240_0>=IDENT && LA240_0<=SEMI)||LA240_0==295||LA240_0==304||LA240_0==307||LA240_0==323||LA240_0==329||LA240_0==352||LA240_0==355||LA240_0==361) ) {
                alt240=1;
            }


            switch (alt240) {
        	case 1 :
        	    // Express.g:0:0: stmt
        	    {
        	    pushFollow(FOLLOW_stmt_in_synpred16_Express1410);
        	    stmt();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt240 >= 1 ) break loop240;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(240, input);
                    throw eee;
            }
            cnt240++;
        } while (true);

        match(input,297,FOLLOW_297_in_synpred16_Express1413); if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred16_Express1417); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Express

    // $ANTLR start synpred18_Express
    public final void synpred18_Express_fragment() throws RecognitionException {   
        // Express.g:393:61: ( stmt )
        // Express.g:393:61: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred18_Express1438);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Express

    // $ANTLR start synpred62_Express
    public final void synpred62_Express_fragment() throws RecognitionException {   
        // Express.g:501:15: ( stmt )
        // Express.g:501:15: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred62_Express2508);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_Express

    // $ANTLR start synpred63_Express
    public final void synpred63_Express_fragment() throws RecognitionException {   
        // Express.g:511:18: ( constant_body )
        // Express.g:511:18: constant_body
        {
        pushFollow(FOLLOW_constant_body_in_synpred63_Express2586);
        constant_body();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_Express

    // $ANTLR start synpred65_Express
    public final void synpred65_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:521:6: ({...}? =>id= IDENT )
        // Express.g:521:6: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred65_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred65_Express2660); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_Express

    // $ANTLR start synpred67_Express
    public final void synpred67_Express_fragment() throws RecognitionException {   
        // Express.g:530:6: ( subtype_constraint_decl )
        // Express.g:530:6: subtype_constraint_decl
        {
        pushFollow(FOLLOW_subtype_constraint_decl_in_synpred67_Express2712);
        subtype_constraint_decl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_Express

    // $ANTLR start synpred70_Express
    public final void synpred70_Express_fragment() throws RecognitionException {   
        // Express.g:538:5: ({...}? => logical_expression )
        // Express.g:538:5: {...}? => logical_expression
        {
        if ( !(( isFirst && input.LA(2) != COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred70_Express", " isFirst && input.LA(2) != COLON ");
        }
        pushFollow(FOLLOW_logical_expression_in_synpred70_Express2791);
        logical_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_Express

    // $ANTLR start synpred73_Express
    public final void synpred73_Express_fragment() throws RecognitionException {   
        // Express.g:549:57: ({...}? => 'abstract' )
        // Express.g:549:57: {...}? => 'abstract'
        {
        if ( !((!input.LT(2).getText().equals("supertype"))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred73_Express", "!input.LT(2).getText().equals(\"supertype\")");
        }
        match(input,312,FOLLOW_312_in_synpred73_Express2896); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_Express

    // $ANTLR start synpred74_Express
    public final void synpred74_Express_fragment() throws RecognitionException {   
        // Express.g:549:119: ( subsuper )
        // Express.g:549:119: subsuper
        {
        pushFollow(FOLLOW_subsuper_in_synpred74_Express2901);
        subsuper();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_Express

    // $ANTLR start synpred76_Express
    public final void synpred76_Express_fragment() throws RecognitionException {   
        // Express.g:559:6: ( explicit_attr )
        // Express.g:559:6: explicit_attr
        {
        pushFollow(FOLLOW_explicit_attr_in_synpred76_Express2972);
        explicit_attr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_Express

    // $ANTLR start synpred82_Express
    public final void synpred82_Express_fragment() throws RecognitionException {   
        // Express.g:564:27: ( subtype_declaration )
        // Express.g:564:27: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred82_Express3024);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_Express

    // $ANTLR start synpred83_Express
    public final void synpred83_Express_fragment() throws RecognitionException {   
        // Express.g:569:6: ( abstract_supertype_declaration )
        // Express.g:569:6: abstract_supertype_declaration
        {
        pushFollow(FOLLOW_abstract_supertype_declaration_in_synpred83_Express3053);
        abstract_supertype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_Express

    // $ANTLR start synpred86_Express
    public final void synpred86_Express_fragment() throws RecognitionException {   
        // Express.g:581:129: ( SEMI )
        // Express.g:581:129: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred86_Express3160); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_Express

    // $ANTLR start synpred87_Express
    public final void synpred87_Express_fragment() throws RecognitionException {   
        Token id=null;
        Token id2=null;

        // Express.g:581:6: ({...}? => 'subtype' 'of' LPAREN id= IDENT ( COMMA id2= IDENT )* RPAREN ( SEMI )? )
        // Express.g:581:6: {...}? => 'subtype' 'of' LPAREN id= IDENT ( COMMA id2= IDENT )* RPAREN ( SEMI )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred87_Express", " isFirst ");
        }
        match(input,315,FOLLOW_315_in_synpred87_Express3133); if (state.failed) return ;
        match(input,294,FOLLOW_294_in_synpred87_Express3135); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred87_Express3137); if (state.failed) return ;
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred87_Express3141); if (state.failed) return ;
        // Express.g:581:76: ( COMMA id2= IDENT )*
        loop241:
        do {
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==COMMA) ) {
                alt241=1;
            }


            switch (alt241) {
        	case 1 :
        	    // Express.g:581:78: COMMA id2= IDENT
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred87_Express3147); if (state.failed) return ;
        	    id2=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred87_Express3151); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop241;
            }
        } while (true);

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred87_Express3158); if (state.failed) return ;
        // Express.g:581:129: ( SEMI )?
        int alt242=2;
        int LA242_0 = input.LA(1);

        if ( (LA242_0==SEMI) ) {
            alt242=1;
        }
        switch (alt242) {
            case 1 :
                // Express.g:0:0: SEMI
                {
                match(input,SEMI,FOLLOW_SEMI_in_synpred87_Express3160); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred87_Express

    // $ANTLR start synpred89_Express
    public final void synpred89_Express_fragment() throws RecognitionException {   
        // Express.g:582:68: ( SEMI )
        // Express.g:582:68: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred89_Express3187); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_Express

    // $ANTLR start synpred90_Express
    public final void synpred90_Express_fragment() throws RecognitionException {   
        // Express.g:593:5: ({...}? => 'subtype_constraint' subtype_constraint_id 'for' IDENT SEMI )
        // Express.g:593:5: {...}? => 'subtype_constraint' subtype_constraint_id 'for' IDENT SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred90_Express", " isFirst ");
        }
        match(input,317,FOLLOW_317_in_synpred90_Express3248); if (state.failed) return ;
        pushFollow(FOLLOW_subtype_constraint_id_in_synpred90_Express3250);
        subtype_constraint_id();

        state._fsp--;
        if (state.failed) return ;
        match(input,296,FOLLOW_296_in_synpred90_Express3252); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred90_Express3254); if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred90_Express3256); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_Express

    // $ANTLR start synpred92_Express
    public final void synpred92_Express_fragment() throws RecognitionException {   
        // Express.g:599:25: ( total_over )
        // Express.g:599:25: total_over
        {
        pushFollow(FOLLOW_total_over_in_synpred92_Express3299);
        total_over();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_Express

    // $ANTLR start synpred93_Express
    public final void synpred93_Express_fragment() throws RecognitionException {   
        // Express.g:599:39: ( supertype_expression SEMI )
        // Express.g:599:39: supertype_expression SEMI
        {
        pushFollow(FOLLOW_supertype_expression_in_synpred93_Express3304);
        supertype_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred93_Express3306); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_Express

    // $ANTLR start synpred94_Express
    public final void synpred94_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:604:5: ({...}? =>id= IDENT )
        // Express.g:604:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred94_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred94_Express3344); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_Express

    // $ANTLR start synpred96_Express
    public final void synpred96_Express_fragment() throws RecognitionException {   
        // Express.g:615:5: ({...}? => 'total_over' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI )
        // Express.g:615:5: {...}? => 'total_over' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred96_Express", " isFirst ");
        }
        match(input,318,FOLLOW_318_in_synpred96_Express3410); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred96_Express3412); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred96_Express3414); if (state.failed) return ;
        // Express.g:615:46: ( COMMA IDENT )*
        loop243:
        do {
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==COMMA) ) {
                alt243=1;
            }


            switch (alt243) {
        	case 1 :
        	    // Express.g:615:48: COMMA IDENT
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred96_Express3418); if (state.failed) return ;
        	    match(input,IDENT,FOLLOW_IDENT_in_synpred96_Express3420); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop243;
            }
        } while (true);

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred96_Express3425); if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred96_Express3427); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_Express

    // $ANTLR start synpred100_Express
    public final void synpred100_Express_fragment() throws RecognitionException {   
        // Express.g:634:5: ( attribute_id )
        // Express.g:634:5: attribute_id
        {
        pushFollow(FOLLOW_attribute_id_in_synpred100_Express3525);
        attribute_id();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_Express

    // $ANTLR start synpred102_Express
    public final void synpred102_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:644:6: ({...}? =>id= IDENT )
        // Express.g:644:6: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred102_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred102_Express3603); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_Express

    // $ANTLR start synpred103_Express
    public final void synpred103_Express_fragment() throws RecognitionException {   
        // Express.g:645:6: ({...}? IDENT )
        // Express.g:645:6: {...}? IDENT
        {
        if ( !((nextIs(ATTRIBUTE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred103_Express", "nextIs(ATTRIBUTE_IDENT)");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred103_Express3614); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_Express

    // $ANTLR start synpred104_Express
    public final void synpred104_Express_fragment() throws RecognitionException {   
        // Express.g:647:6: ({...}? IDENT )
        // Express.g:647:6: {...}? IDENT
        {
        if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred104_Express", "nextIs(ENTITY_ATTR_IDENT)");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred104_Express3635); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_Express

    // $ANTLR start synpred105_Express
    public final void synpred105_Express_fragment() throws RecognitionException {   
        // Express.g:659:15: ( derived_attr )
        // Express.g:659:15: derived_attr
        {
        pushFollow(FOLLOW_derived_attr_in_synpred105_Express3714);
        derived_attr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_Express

    // $ANTLR start synpred106_Express
    public final void synpred106_Express_fragment() throws RecognitionException {   
        // Express.g:669:16: ( inverse_attr )
        // Express.g:669:16: inverse_attr
        {
        pushFollow(FOLLOW_inverse_attr_in_synpred106_Express3780);
        inverse_attr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_Express

    // $ANTLR start synpred110_Express
    public final void synpred110_Express_fragment() throws RecognitionException {   
        // Express.g:674:6: ({...}? => attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? IDENT 'for' IDENT SEMI )
        // Express.g:674:6: {...}? => attribute_decl COLON ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )? IDENT 'for' IDENT SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred110_Express", " isFirst ");
        }
        pushFollow(FOLLOW_attribute_decl_in_synpred110_Express3809);
        attribute_decl();

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred110_Express3811); if (state.failed) return ;
        // Express.g:674:42: ( ( 'set' | 'bag' ) ( bound_spec )? 'of' )?
        int alt246=2;
        int LA246_0 = input.LA(1);

        if ( (LA246_0==301||LA246_0==322) ) {
            alt246=1;
        }
        switch (alt246) {
            case 1 :
                // Express.g:674:44: ( 'set' | 'bag' ) ( bound_spec )? 'of'
                {
                if ( input.LA(1)==301||input.LA(1)==322 ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }

                // Express.g:674:62: ( bound_spec )?
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==LBRACK) ) {
                    alt245=1;
                }
                switch (alt245) {
                    case 1 :
                        // Express.g:0:0: bound_spec
                        {
                        pushFollow(FOLLOW_bound_spec_in_synpred110_Express3825);
                        bound_spec();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,294,FOLLOW_294_in_synpred110_Express3828); if (state.failed) return ;

                }
                break;

        }

        match(input,IDENT,FOLLOW_IDENT_in_synpred110_Express3833); if (state.failed) return ;
        match(input,296,FOLLOW_296_in_synpred110_Express3835); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred110_Express3837); if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred110_Express3839); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_Express

    // $ANTLR start synpred114_Express
    public final void synpred114_Express_fragment() throws RecognitionException {   
        // Express.g:680:17: ( unique_rule SEMI )
        // Express.g:680:17: unique_rule SEMI
        {
        pushFollow(FOLLOW_unique_rule_in_synpred114_Express3919);
        unique_rule();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred114_Express3921); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_Express

    // $ANTLR start synpred118_Express
    public final void synpred118_Express_fragment() throws RecognitionException {   
        // Express.g:685:5: ({...}? => ( IDENT ( COLON referenced_attribute )? | qualified_attribute ) ( COMMA referenced_attribute )* )
        // Express.g:685:5: {...}? => ( IDENT ( COLON referenced_attribute )? | qualified_attribute ) ( COMMA referenced_attribute )*
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred118_Express", " isFirst ");
        }
        // Express.g:685:20: ( IDENT ( COLON referenced_attribute )? | qualified_attribute )
        int alt250=2;
        int LA250_0 = input.LA(1);

        if ( (LA250_0==IDENT) ) {
            alt250=1;
        }
        else if ( (LA250_0==CONST_SELF) ) {
            alt250=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 250, 0, input);

            throw nvae;
        }
        switch (alt250) {
            case 1 :
                // Express.g:685:22: IDENT ( COLON referenced_attribute )?
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred118_Express3953); if (state.failed) return ;
                // Express.g:685:28: ( COLON referenced_attribute )?
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==COLON) ) {
                    alt249=1;
                }
                switch (alt249) {
                    case 1 :
                        // Express.g:685:30: COLON referenced_attribute
                        {
                        match(input,COLON,FOLLOW_COLON_in_synpred118_Express3957); if (state.failed) return ;
                        pushFollow(FOLLOW_referenced_attribute_in_synpred118_Express3959);
                        referenced_attribute();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // Express.g:685:62: qualified_attribute
                {
                pushFollow(FOLLOW_qualified_attribute_in_synpred118_Express3966);
                qualified_attribute();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // Express.g:685:84: ( COMMA referenced_attribute )*
        loop251:
        do {
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==COMMA) ) {
                alt251=1;
            }


            switch (alt251) {
        	case 1 :
        	    // Express.g:685:86: COMMA referenced_attribute
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred118_Express3972); if (state.failed) return ;
        	    pushFollow(FOLLOW_referenced_attribute_in_synpred118_Express3974);
        	    referenced_attribute();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop251;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred118_Express

    // $ANTLR start synpred121_Express
    public final void synpred121_Express_fragment() throws RecognitionException {   
        // Express.g:691:6: ({...}? => IDENT )
        // Express.g:691:6: {...}? => IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred121_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred121_Express4034); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_Express

    // $ANTLR start synpred122_Express
    public final void synpred122_Express_fragment() throws RecognitionException {   
        // Express.g:692:6: ( attribute_ref )
        // Express.g:692:6: attribute_ref
        {
        pushFollow(FOLLOW_attribute_ref_in_synpred122_Express4041);
        attribute_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_Express

    // $ANTLR start synpred125_Express
    public final void synpred125_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:702:5: ({...}? =>id= IDENT )
        // Express.g:702:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred125_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred125_Express4141); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_Express

    // $ANTLR start synpred127_Express
    public final void synpred127_Express_fragment() throws RecognitionException {   
        // Express.g:708:5: ({...}? => IDENT ( DOT IDENT )? )
        // Express.g:708:5: {...}? => IDENT ( DOT IDENT )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred127_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred127_Express4182); if (state.failed) return ;
        // Express.g:708:26: ( DOT IDENT )?
        int alt253=2;
        int LA253_0 = input.LA(1);

        if ( (LA253_0==DOT) ) {
            alt253=1;
        }
        switch (alt253) {
            case 1 :
                // Express.g:708:28: DOT IDENT
                {
                match(input,DOT,FOLLOW_DOT_in_synpred127_Express4186); if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred127_Express4188); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred127_Express

    // $ANTLR start synpred134_Express
    public final void synpred134_Express_fragment() throws RecognitionException {   
        // Express.g:746:20: ( algorithm_head )
        // Express.g:746:20: algorithm_head
        {
        pushFollow(FOLLOW_algorithm_head_in_synpred134_Express4462);
        algorithm_head();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_Express

    // $ANTLR start synpred135_Express
    public final void synpred135_Express_fragment() throws RecognitionException {   
        // Express.g:746:37: ( stmt )
        // Express.g:746:37: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred135_Express4466);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_Express

    // $ANTLR start synpred138_Express
    public final void synpred138_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:756:5: ({...}? =>id= IDENT )
        // Express.g:756:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred138_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred138_Express4580); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_Express

    // $ANTLR start synpred151_Express
    public final void synpred151_Express_fragment() throws RecognitionException {   
        // Express.g:791:6: ( parameter_ref )
        // Express.g:791:6: parameter_ref
        {
        pushFollow(FOLLOW_parameter_ref_in_synpred151_Express4896);
        parameter_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_Express

    // $ANTLR start synpred154_Express
    public final void synpred154_Express_fragment() throws RecognitionException {   
        // Express.g:811:6: ({...}? => BACKSLASH IDENT )
        // Express.g:811:6: {...}? => BACKSLASH IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred154_Express", " isFirst ");
        }
        match(input,BACKSLASH,FOLLOW_BACKSLASH_in_synpred154_Express5034); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred154_Express5036); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_Express

    // $ANTLR start synpred155_Express
    public final void synpred155_Express_fragment() throws RecognitionException {   
        // Express.g:817:38: ( stmt )
        // Express.g:817:38: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred155_Express5077);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_Express

    // $ANTLR start synpred157_Express
    public final void synpred157_Express_fragment() throws RecognitionException {   
        // Express.g:823:13: ( stmt )
        // Express.g:823:13: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred157_Express5122);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_Express

    // $ANTLR start synpred176_Express
    public final void synpred176_Express_fragment() throws RecognitionException {   
        // Express.g:941:5: ({...}? => IDENT )
        // Express.g:941:5: {...}? => IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred176_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred176_Express5993); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_Express

    // $ANTLR start synpred177_Express
    public final void synpred177_Express_fragment() throws RecognitionException {   
        // Express.g:942:6: ( entity_ref )
        // Express.g:942:6: entity_ref
        {
        pushFollow(FOLLOW_entity_ref_in_synpred177_Express6000);
        entity_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_Express

    // $ANTLR start synpred179_Express
    public final void synpred179_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:969:5: ({...}? =>id= IDENT )
        // Express.g:969:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred179_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred179_Express6179); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_Express

    // $ANTLR start synpred180_Express
    public final void synpred180_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:970:5: ({...}?id= IDENT )
        // Express.g:970:5: {...}?id= IDENT
        {
        if ( !((nextIs(PARAMETER_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred180_Express", "nextIs(PARAMETER_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred180_Express6191); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_Express

    // $ANTLR start synpred181_Express
    public final void synpred181_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:971:5: ({...}?id= IDENT )
        // Express.g:971:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred181_Express", "nextIs(ENTITY_PARAM_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred181_Express6210); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_Express

    // $ANTLR start synpred183_Express
    public final void synpred183_Express_fragment() throws RecognitionException {   
        // Express.g:977:6: ( named_types )
        // Express.g:977:6: named_types
        {
        pushFollow(FOLLOW_named_types_in_synpred183_Express6270);
        named_types();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_Express

    // $ANTLR start synpred188_Express
    public final void synpred188_Express_fragment() throws RecognitionException {   
        // Express.g:1001:21: ( algorithm_head )
        // Express.g:1001:21: algorithm_head
        {
        pushFollow(FOLLOW_algorithm_head_in_synpred188_Express6457);
        algorithm_head();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Express

    // $ANTLR start synpred189_Express
    public final void synpred189_Express_fragment() throws RecognitionException {   
        // Express.g:1001:37: ( stmt )
        // Express.g:1001:37: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred189_Express6460);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_Express

    // $ANTLR start synpred194_Express
    public final void synpred194_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1013:5: ({...}? =>id= IDENT )
        // Express.g:1013:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred194_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred194_Express6580); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_Express

    // $ANTLR start synpred196_Express
    public final void synpred196_Express_fragment() throws RecognitionException {   
        // Express.g:1019:5: ({...}? => IDENT ( actual_parameter_list )? )
        // Express.g:1019:5: {...}? => IDENT ( actual_parameter_list )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred196_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred196_Express6620); if (state.failed) return ;
        // Express.g:1019:26: ( actual_parameter_list )?
        int alt259=2;
        int LA259_0 = input.LA(1);

        if ( (LA259_0==LPAREN) ) {
            alt259=1;
        }
        switch (alt259) {
            case 1 :
                // Express.g:1019:28: actual_parameter_list
                {
                pushFollow(FOLLOW_actual_parameter_list_in_synpred196_Express6624);
                actual_parameter_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred196_Express

    // $ANTLR start synpred197_Express
    public final void synpred197_Express_fragment() throws RecognitionException {   
        // Express.g:1020:5: ({...}? => built_in_constant )
        // Express.g:1020:5: {...}? => built_in_constant
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred197_Express", " isFirst ");
        }
        pushFollow(FOLLOW_built_in_constant_in_synpred197_Express6636);
        built_in_constant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_Express

    // $ANTLR start synpred199_Express
    public final void synpred199_Express_fragment() throws RecognitionException {   
        // Express.g:1021:5: ({...}? => built_in_function ( actual_parameter_list )? )
        // Express.g:1021:5: {...}? => built_in_function ( actual_parameter_list )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred199_Express", " isFirst ");
        }
        pushFollow(FOLLOW_built_in_function_in_synpred199_Express6645);
        built_in_function();

        state._fsp--;
        if (state.failed) return ;
        // Express.g:1021:72: ( actual_parameter_list )?
        int alt260=2;
        int LA260_0 = input.LA(1);

        if ( (LA260_0==LPAREN) ) {
            alt260=1;
        }
        switch (alt260) {
            case 1 :
                // Express.g:1021:74: actual_parameter_list
                {
                pushFollow(FOLLOW_actual_parameter_list_in_synpred199_Express6651);
                actual_parameter_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred199_Express

    // $ANTLR start synpred200_Express
    public final void synpred200_Express_fragment() throws RecognitionException {   
        // Express.g:1022:6: ( function_call )
        // Express.g:1022:6: function_call
        {
        pushFollow(FOLLOW_function_call_in_synpred200_Express6661);
        function_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_Express

    // $ANTLR start synpred201_Express
    public final void synpred201_Express_fragment() throws RecognitionException {   
        // Express.g:1023:6: ( attribute_ref )
        // Express.g:1023:6: attribute_ref
        {
        pushFollow(FOLLOW_attribute_ref_in_synpred201_Express6676);
        attribute_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_Express

    // $ANTLR start synpred202_Express
    public final void synpred202_Express_fragment() throws RecognitionException {   
        // Express.g:1024:6: ( constant_factor )
        // Express.g:1024:6: constant_factor
        {
        pushFollow(FOLLOW_constant_factor_in_synpred202_Express6691);
        constant_factor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_Express

    // $ANTLR start synpred203_Express
    public final void synpred203_Express_fragment() throws RecognitionException {   
        // Express.g:1025:6: ( population )
        // Express.g:1025:6: population
        {
        pushFollow(FOLLOW_population_in_synpred203_Express6706);
        population();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_Express

    // $ANTLR start synpred205_Express
    public final void synpred205_Express_fragment() throws RecognitionException {   
        // Express.g:1031:6: ( group_qualifier )
        // Express.g:1031:6: group_qualifier
        {
        pushFollow(FOLLOW_group_qualifier_in_synpred205_Express6758);
        group_qualifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_Express

    // $ANTLR start synpred209_Express
    public final void synpred209_Express_fragment() throws RecognitionException {   
        Token id=null;
        resource_or_rename_return ei = null;


        // Express.g:1046:5: ({...}? => 'reference' 'from' id= IDENT ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )? SEMI )
        // Express.g:1046:5: {...}? => 'reference' 'from' id= IDENT ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )? SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred209_Express", " isFirst ");
        }
        match(input,348,FOLLOW_348_in_synpred209_Express6891); if (state.failed) return ;
        match(input,349,FOLLOW_349_in_synpred209_Express6893); if (state.failed) return ;
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred209_Express6897); if (state.failed) return ;
        // Express.g:1046:48: ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )?
        int alt263=2;
        int LA263_0 = input.LA(1);

        if ( (LA263_0==LPAREN) ) {
            alt263=1;
        }
        switch (alt263) {
            case 1 :
                // Express.g:1046:51: LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred209_Express6902); if (state.failed) return ;
                pushFollow(FOLLOW_resource_or_rename_in_synpred209_Express6907);
                ei=resource_or_rename();

                state._fsp--;
                if (state.failed) return ;
                // Express.g:1047:4: ( COMMA ei= resource_or_rename )*
                loop262:
                do {
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==COMMA) ) {
                        alt262=1;
                    }


                    switch (alt262) {
                	case 1 :
                	    // Express.g:1047:7: COMMA ei= resource_or_rename
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred209_Express6919); if (state.failed) return ;
                	    pushFollow(FOLLOW_resource_or_rename_in_synpred209_Express6924);
                	    ei=resource_or_rename();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop262;
                    }
                } while (true);

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred209_Express6933); if (state.failed) return ;

                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred209_Express6943); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_Express

    // $ANTLR start synpred221_Express
    public final void synpred221_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1072:6: ({...}? =>id= IDENT )
        // Express.g:1072:6: {...}? =>id= IDENT
        {
        if ( !((nextIs(CONSTANT_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred221_Express", "nextIs(CONSTANT_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred221_Express7212); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_Express

    // $ANTLR start synpred222_Express
    public final void synpred222_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1074:6: ({...}? =>id= IDENT )
        // Express.g:1074:6: {...}? =>id= IDENT
        {
        if ( !((nextIs(ENTITY_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred222_Express", "nextIs(ENTITY_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred222_Express7243); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_Express

    // $ANTLR start synpred223_Express
    public final void synpred223_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1076:6: ({...}? =>id= IDENT )
        // Express.g:1076:6: {...}? =>id= IDENT
        {
        if ( !((nextIs(FUNCTION_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred223_Express", "nextIs(FUNCTION_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred223_Express7274); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_Express

    // $ANTLR start synpred224_Express
    public final void synpred224_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1078:6: ({...}? =>id= IDENT )
        // Express.g:1078:6: {...}? =>id= IDENT
        {
        if ( !((nextIs(PROCEDURE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred224_Express", "nextIs(PROCEDURE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred224_Express7305); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_Express

    // $ANTLR start synpred225_Express
    public final void synpred225_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1080:6: ({...}? =>id= IDENT )
        // Express.g:1080:6: {...}? =>id= IDENT
        {
        if ( !((nextIs(TYPE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred225_Express", "nextIs(TYPE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred225_Express7336); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_Express

    // $ANTLR start synpred229_Express
    public final void synpred229_Express_fragment() throws RecognitionException {   
        // Express.g:1091:60: ( stmt )
        // Express.g:1091:60: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred229_Express7432);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_Express

    // $ANTLR start synpred231_Express
    public final void synpred231_Express_fragment() throws RecognitionException {   
        Token id=null;
        rename_id_return s = null;


        // Express.g:1101:5: ({...}? =>id= IDENT ( 'as' s= rename_id )? )
        // Express.g:1101:5: {...}? =>id= IDENT ( 'as' s= rename_id )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred231_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred231_Express7499); if (state.failed) return ;
        // Express.g:1101:65: ( 'as' s= rename_id )?
        int alt265=2;
        int LA265_0 = input.LA(1);

        if ( (LA265_0==354) ) {
            alt265=1;
        }
        switch (alt265) {
            case 1 :
                // Express.g:1101:67: 'as' s= rename_id
                {
                match(input,354,FOLLOW_354_in_synpred231_Express7505); if (state.failed) return ;
                pushFollow(FOLLOW_rename_id_in_synpred231_Express7509);
                s=rename_id();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred231_Express

    // $ANTLR start synpred233_Express
    public final void synpred233_Express_fragment() throws RecognitionException {   
        // Express.g:1102:6: ( resource_ref ( 'as' rename_id )? )
        // Express.g:1102:6: resource_ref ( 'as' rename_id )?
        {
        pushFollow(FOLLOW_resource_ref_in_synpred233_Express7521);
        resource_ref();

        state._fsp--;
        if (state.failed) return ;
        // Express.g:1102:19: ( 'as' rename_id )?
        int alt266=2;
        int LA266_0 = input.LA(1);

        if ( (LA266_0==354) ) {
            alt266=1;
        }
        switch (alt266) {
            case 1 :
                // Express.g:1102:21: 'as' rename_id
                {
                match(input,354,FOLLOW_354_in_synpred233_Express7525); if (state.failed) return ;
                pushFollow(FOLLOW_rename_id_in_synpred233_Express7527);
                rename_id();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred233_Express

    // $ANTLR start synpred235_Express
    public final void synpred235_Express_fragment() throws RecognitionException {   
        // Express.g:1110:5: ( constant_ref )
        // Express.g:1110:5: constant_ref
        {
        pushFollow(FOLLOW_constant_ref_in_synpred235_Express7606);
        constant_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_Express

    // $ANTLR start synpred236_Express
    public final void synpred236_Express_fragment() throws RecognitionException {   
        // Express.g:1112:5: ( entity_ref )
        // Express.g:1112:5: entity_ref
        {
        pushFollow(FOLLOW_entity_ref_in_synpred236_Express7623);
        entity_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_Express

    // $ANTLR start synpred237_Express
    public final void synpred237_Express_fragment() throws RecognitionException {   
        // Express.g:1114:5: ( function_ref )
        // Express.g:1114:5: function_ref
        {
        pushFollow(FOLLOW_function_ref_in_synpred237_Express7640);
        function_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_Express

    // $ANTLR start synpred238_Express
    public final void synpred238_Express_fragment() throws RecognitionException {   
        // Express.g:1116:5: ( procedure_ref )
        // Express.g:1116:5: procedure_ref
        {
        pushFollow(FOLLOW_procedure_ref_in_synpred238_Express7657);
        procedure_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_Express

    // $ANTLR start synpred240_Express
    public final void synpred240_Express_fragment() throws RecognitionException {   
        // Express.g:1128:36: ( algorithm_head )
        // Express.g:1128:36: algorithm_head
        {
        pushFollow(FOLLOW_algorithm_head_in_synpred240_Express7748);
        algorithm_head();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_Express

    // $ANTLR start synpred241_Express
    public final void synpred241_Express_fragment() throws RecognitionException {   
        // Express.g:1128:52: ( stmt )
        // Express.g:1128:52: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred241_Express7751);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_Express

    // $ANTLR start synpred243_Express
    public final void synpred243_Express_fragment() throws RecognitionException {   
        // Express.g:1133:5: ({...}? => 'rule' rule_id 'for' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI )
        // Express.g:1133:5: {...}? => 'rule' rule_id 'for' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred243_Express", " isFirst ");
        }
        match(input,357,FOLLOW_357_in_synpred243_Express7797); if (state.failed) return ;
        pushFollow(FOLLOW_rule_id_in_synpred243_Express7799);
        rule_id();

        state._fsp--;
        if (state.failed) return ;
        match(input,296,FOLLOW_296_in_synpred243_Express7801); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred243_Express7803); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred243_Express7805); if (state.failed) return ;
        // Express.g:1133:54: ( COMMA IDENT )*
        loop267:
        do {
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==COMMA) ) {
                alt267=1;
            }


            switch (alt267) {
        	case 1 :
        	    // Express.g:1133:56: COMMA IDENT
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred243_Express7809); if (state.failed) return ;
        	    match(input,IDENT,FOLLOW_IDENT_in_synpred243_Express7811); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop267;
            }
        } while (true);

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred243_Express7816); if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred243_Express7818); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_Express

    // $ANTLR start synpred245_Express
    public final void synpred245_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1151:6: ({...}?id= IDENT )
        // Express.g:1151:6: {...}?id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred245_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred245_Express7920); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_Express

    // $ANTLR start synpred246_Express
    public final void synpred246_Express_fragment() throws RecognitionException {   
        // Express.g:1156:5: ( interface_specification )
        // Express.g:1156:5: interface_specification
        {
        pushFollow(FOLLOW_interface_specification_in_synpred246_Express7952);
        interface_specification();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_Express

    // $ANTLR start synpred249_Express
    public final void synpred249_Express_fragment() throws RecognitionException {   
        // Express.g:1156:61: ( rule_decl )
        // Express.g:1156:61: rule_decl
        {
        pushFollow(FOLLOW_rule_decl_in_synpred249_Express7964);
        rule_decl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_Express

    // $ANTLR start synpred251_Express
    public final void synpred251_Express_fragment() throws RecognitionException {   
        // Express.g:1170:6: ( reference_clause )
        // Express.g:1170:6: reference_clause
        {
        pushFollow(FOLLOW_reference_clause_in_synpred251_Express8075);
        reference_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_Express

    // $ANTLR start synpred254_Express
    public final void synpred254_Express_fragment() throws RecognitionException {   
        Token id=null;
        named_type_or_rename_return ei = null;


        // Express.g:1175:5: ({...}? => 'use' 'from' id= IDENT ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )? SEMI )
        // Express.g:1175:5: {...}? => 'use' 'from' id= IDENT ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )? SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred254_Express", " isFirst ");
        }
        match(input,360,FOLLOW_360_in_synpred254_Express8114); if (state.failed) return ;
        match(input,349,FOLLOW_349_in_synpred254_Express8116); if (state.failed) return ;
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred254_Express8120); if (state.failed) return ;
        // Express.g:1176:3: ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )?
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( (LA270_0==LPAREN) ) {
            alt270=1;
        }
        switch (alt270) {
            case 1 :
                // Express.g:1176:5: LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred254_Express8127); if (state.failed) return ;
                pushFollow(FOLLOW_named_type_or_rename_in_synpred254_Express8131);
                ei=named_type_or_rename();

                state._fsp--;
                if (state.failed) return ;
                // Express.g:1177:3: ( COMMA ei= named_type_or_rename )*
                loop269:
                do {
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==COMMA) ) {
                        alt269=1;
                    }


                    switch (alt269) {
                	case 1 :
                	    // Express.g:1177:5: COMMA ei= named_type_or_rename
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred254_Express8140); if (state.failed) return ;
                	    pushFollow(FOLLOW_named_type_or_rename_in_synpred254_Express8144);
                	    ei=named_type_or_rename();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop269;
                    }
                } while (true);

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred254_Express8154); if (state.failed) return ;

                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred254_Express8159); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_Express

    // $ANTLR start synpred258_Express
    public final void synpred258_Express_fragment() throws RecognitionException {   
        Token id=null;
        rename_id_return s = null;


        // Express.g:1185:5: ({...}? =>id= IDENT ( 'as' s= rename_id )? )
        // Express.g:1185:5: {...}? =>id= IDENT ( 'as' s= rename_id )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred258_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred258_Express8232); if (state.failed) return ;
        // Express.g:1185:65: ( 'as' s= rename_id )?
        int alt272=2;
        int LA272_0 = input.LA(1);

        if ( (LA272_0==354) ) {
            alt272=1;
        }
        switch (alt272) {
            case 1 :
                // Express.g:1185:67: 'as' s= rename_id
                {
                match(input,354,FOLLOW_354_in_synpred258_Express8238); if (state.failed) return ;
                pushFollow(FOLLOW_rename_id_in_synpred258_Express8242);
                s=rename_id();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred258_Express

    // $ANTLR start synpred259_Express
    public final void synpred259_Express_fragment() throws RecognitionException {   
        // Express.g:1186:27: ( entity_id )
        // Express.g:1186:27: entity_id
        {
        pushFollow(FOLLOW_entity_id_in_synpred259_Express8262);
        entity_id();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_Express

    // $ANTLR start synpred267_Express
    public final void synpred267_Express_fragment() throws RecognitionException {   
        // Express.g:1208:6: ({...}? => unary_op ( ( LPAREN expression RPAREN ) | primary ) )
        // Express.g:1208:6: {...}? => unary_op ( ( LPAREN expression RPAREN ) | primary )
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred267_Express", " isFirst ");
        }
        pushFollow(FOLLOW_unary_op_in_synpred267_Express8475);
        unary_op();

        state._fsp--;
        if (state.failed) return ;
        // Express.g:1208:30: ( ( LPAREN expression RPAREN ) | primary )
        int alt274=2;
        int LA274_0 = input.LA(1);

        if ( (LA274_0==LPAREN) ) {
            alt274=1;
        }
        else if ( ((LA274_0>=CONST_E && LA274_0<=FUNCTION_SIZEOF)||LA274_0==IDENT||(LA274_0>=QUESTION && LA274_0<=STAR)||(LA274_0>=FLOAT && LA274_0<=STRING)||(LA274_0>=338 && LA274_0<=340)) ) {
            alt274=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 274, 0, input);

            throw nvae;
        }
        switch (alt274) {
            case 1 :
                // Express.g:1208:32: ( LPAREN expression RPAREN )
                {
                // Express.g:1208:32: ( LPAREN expression RPAREN )
                // Express.g:1208:33: LPAREN expression RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred267_Express8480); if (state.failed) return ;
                pushFollow(FOLLOW_expression_in_synpred267_Express8482);
                expression();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred267_Express8484); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                // Express.g:1208:61: primary
                {
                pushFollow(FOLLOW_primary_in_synpred267_Express8489);
                primary();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred267_Express

    // $ANTLR start synpred268_Express
    public final void synpred268_Express_fragment() throws RecognitionException {   
        // Express.g:1209:6: ({...}? => LPAREN expression RPAREN )
        // Express.g:1209:6: {...}? => LPAREN expression RPAREN
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred268_Express", " isFirst ");
        }
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred268_Express8501); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred268_Express8503);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred268_Express8505); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_Express

    // $ANTLR start synpred269_Express
    public final void synpred269_Express_fragment() throws RecognitionException {   
        // Express.g:1210:6: ({...}? => literal )
        // Express.g:1210:6: {...}? => literal
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred269_Express", " isFirst ");
        }
        pushFollow(FOLLOW_literal_in_synpred269_Express8515);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_Express

    // $ANTLR start synpred271_Express
    public final void synpred271_Express_fragment() throws RecognitionException {   
        // Express.g:1211:6: ({...}? => built_in_constant ( qualifier )* )
        // Express.g:1211:6: {...}? => built_in_constant ( qualifier )*
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred271_Express", " isFirst ");
        }
        pushFollow(FOLLOW_built_in_constant_in_synpred271_Express8525);
        built_in_constant();

        state._fsp--;
        if (state.failed) return ;
        // Express.g:1211:39: ( qualifier )*
        loop275:
        do {
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==LBRACK||LA275_0==DOT||LA275_0==BACKSLASH) ) {
                alt275=1;
            }


            switch (alt275) {
        	case 1 :
        	    // Express.g:1211:41: qualifier
        	    {
        	    pushFollow(FOLLOW_qualifier_in_synpred271_Express8529);
        	    qualifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop275;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred271_Express

    // $ANTLR start synpred274_Express
    public final void synpred274_Express_fragment() throws RecognitionException {   
        // Express.g:1212:6: ({...}? => built_in_function ( actual_parameter_list )? ( qualifier )* )
        // Express.g:1212:6: {...}? => built_in_function ( actual_parameter_list )? ( qualifier )*
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred274_Express", " isFirst ");
        }
        pushFollow(FOLLOW_built_in_function_in_synpred274_Express8542);
        built_in_function();

        state._fsp--;
        if (state.failed) return ;
        // Express.g:1212:39: ( actual_parameter_list )?
        int alt276=2;
        int LA276_0 = input.LA(1);

        if ( (LA276_0==LPAREN) ) {
            alt276=1;
        }
        switch (alt276) {
            case 1 :
                // Express.g:1212:41: actual_parameter_list
                {
                pushFollow(FOLLOW_actual_parameter_list_in_synpred274_Express8546);
                actual_parameter_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // Express.g:1212:66: ( qualifier )*
        loop277:
        do {
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==LBRACK||LA277_0==DOT||LA277_0==BACKSLASH) ) {
                alt277=1;
            }


            switch (alt277) {
        	case 1 :
        	    // Express.g:1212:68: qualifier
        	    {
        	    pushFollow(FOLLOW_qualifier_in_synpred274_Express8553);
        	    qualifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop277;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred274_Express

    // $ANTLR start synpred278_Express
    public final void synpred278_Express_fragment() throws RecognitionException {   
        // Express.g:1213:86: ( DOT IDENT )
        // Express.g:1213:86: DOT IDENT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred278_Express8595); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred278_Express8597); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_Express

    // $ANTLR start synpred280_Express
    public final void synpred280_Express_fragment() throws RecognitionException {   
        // Express.g:1213:6: ({...}? => IDENT ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ( DOT IDENT )? ( qualifier )* )
        // Express.g:1213:6: {...}? => IDENT ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ( DOT IDENT )? ( qualifier )*
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred280_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred280_Express8566); if (state.failed) return ;
        // Express.g:1213:27: ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
        int alt283=2;
        int LA283_0 = input.LA(1);

        if ( (LA283_0==LPAREN) ) {
            alt283=1;
        }
        switch (alt283) {
            case 1 :
                // Express.g:1213:29: LPAREN ( expression ( COMMA expression )* )? RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred280_Express8570); if (state.failed) return ;
                // Express.g:1213:36: ( expression ( COMMA expression )* )?
                int alt282=2;
                int LA282_0 = input.LA(1);

                if ( ((LA282_0>=CONST_E && LA282_0<=FUNCTION_SIZEOF)||LA282_0==NOT||LA282_0==LPAREN||(LA282_0>=PLUS && LA282_0<=LBRACK)||LA282_0==IDENT||(LA282_0>=QUESTION && LA282_0<=STAR)||LA282_0==LCURLY||(LA282_0>=FLOAT && LA282_0<=STRING)||LA282_0==QUERY||(LA282_0>=338 && LA282_0<=340)) ) {
                    alt282=1;
                }
                switch (alt282) {
                    case 1 :
                        // Express.g:1213:38: expression ( COMMA expression )*
                        {
                        pushFollow(FOLLOW_expression_in_synpred280_Express8574);
                        expression();

                        state._fsp--;
                        if (state.failed) return ;
                        // Express.g:1213:49: ( COMMA expression )*
                        loop281:
                        do {
                            int alt281=2;
                            int LA281_0 = input.LA(1);

                            if ( (LA281_0==COMMA) ) {
                                alt281=1;
                            }


                            switch (alt281) {
                        	case 1 :
                        	    // Express.g:1213:51: COMMA expression
                        	    {
                        	    match(input,COMMA,FOLLOW_COMMA_in_synpred280_Express8578); if (state.failed) return ;
                        	    pushFollow(FOLLOW_expression_in_synpred280_Express8580);
                        	    expression();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }
                        	    break;

                        	default :
                        	    break loop281;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred280_Express8588); if (state.failed) return ;

                }
                break;

        }

        // Express.g:1213:84: ( DOT IDENT )?
        int alt284=2;
        int LA284_0 = input.LA(1);

        if ( (LA284_0==DOT) ) {
            int LA284_1 = input.LA(2);

            if ( (LA284_1==IDENT) ) {
                int LA284_3 = input.LA(3);

                if ( (synpred278_Express()) ) {
                    alt284=1;
                }
            }
        }
        switch (alt284) {
            case 1 :
                // Express.g:1213:86: DOT IDENT
                {
                match(input,DOT,FOLLOW_DOT_in_synpred280_Express8595); if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred280_Express8597); if (state.failed) return ;

                }
                break;

        }

        // Express.g:1213:99: ( qualifier )*
        loop285:
        do {
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==LBRACK||LA285_0==DOT||LA285_0==BACKSLASH) ) {
                alt285=1;
            }


            switch (alt285) {
        	case 1 :
        	    // Express.g:1213:101: qualifier
        	    {
        	    pushFollow(FOLLOW_qualifier_in_synpred280_Express8604);
        	    qualifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop285;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred280_Express

    // $ANTLR start synpred281_Express
    public final void synpred281_Express_fragment() throws RecognitionException {   
        // Express.g:1214:6: ({...}? => entity_constructor )
        // Express.g:1214:6: {...}? => entity_constructor
        {
        if ( !(( input.LA(2)==LPAREN )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred281_Express", " input.LA(2)==LPAREN ");
        }
        pushFollow(FOLLOW_entity_constructor_in_synpred281_Express8617);
        entity_constructor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_Express

    // $ANTLR start synpred282_Express
    public final void synpred282_Express_fragment() throws RecognitionException {   
        // Express.g:1215:6: ({...}? => enumeration_reference )
        // Express.g:1215:6: {...}? => enumeration_reference
        {
        if ( !((nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred282_Express", "nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)");
        }
        pushFollow(FOLLOW_enumeration_reference_in_synpred282_Express8635);
        enumeration_reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_Express

    // $ANTLR start synpred294_Express
    public final void synpred294_Express_fragment() throws RecognitionException {   
        // Express.g:1235:5: ({...}? => IDENT ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? ) SEMI )
        // Express.g:1235:5: {...}? => IDENT ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? ) SEMI
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred294_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred294_Express8846); if (state.failed) return ;
        // Express.g:1235:26: ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? )
        int alt289=2;
        int LA289_0 = input.LA(1);

        if ( (LA289_0==LBRACK||LA289_0==COLEQ||LA289_0==DOT||LA289_0==BACKSLASH) ) {
            alt289=1;
        }
        else if ( (LA289_0==LPAREN||LA289_0==SEMI) ) {
            alt289=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 289, 0, input);

            throw nvae;
        }
        switch (alt289) {
            case 1 :
                // Express.g:1235:28: ( qualifier )* COLEQ expression
                {
                // Express.g:1235:28: ( qualifier )*
                loop287:
                do {
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==LBRACK||LA287_0==DOT||LA287_0==BACKSLASH) ) {
                        alt287=1;
                    }


                    switch (alt287) {
                	case 1 :
                	    // Express.g:0:0: qualifier
                	    {
                	    pushFollow(FOLLOW_qualifier_in_synpred294_Express8850);
                	    qualifier();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop287;
                    }
                } while (true);

                match(input,COLEQ,FOLLOW_COLEQ_in_synpred294_Express8853); if (state.failed) return ;
                pushFollow(FOLLOW_expression_in_synpred294_Express8855);
                expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // Express.g:1235:58: ( actual_parameter_list )?
                {
                // Express.g:1235:58: ( actual_parameter_list )?
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==LPAREN) ) {
                    alt288=1;
                }
                switch (alt288) {
                    case 1 :
                        // Express.g:0:0: actual_parameter_list
                        {
                        pushFollow(FOLLOW_actual_parameter_list_in_synpred294_Express8859);
                        actual_parameter_list();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred294_Express8864); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_Express

    // $ANTLR start synpred295_Express
    public final void synpred295_Express_fragment() throws RecognitionException {   
        // Express.g:1236:6: ( alias_stmt )
        // Express.g:1236:6: alias_stmt
        {
        pushFollow(FOLLOW_alias_stmt_in_synpred295_Express8873);
        alias_stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_Express

    // $ANTLR start synpred296_Express
    public final void synpred296_Express_fragment() throws RecognitionException {   
        // Express.g:1237:6: ( assignment_stmt )
        // Express.g:1237:6: assignment_stmt
        {
        pushFollow(FOLLOW_assignment_stmt_in_synpred296_Express8888);
        assignment_stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_Express

    // $ANTLR start synpred302_Express
    public final void synpred302_Express_fragment() throws RecognitionException {   
        // Express.g:1243:6: ( procedure_call_stmt )
        // Express.g:1243:6: procedure_call_stmt
        {
        pushFollow(FOLLOW_procedure_call_stmt_in_synpred302_Express8979);
        procedure_call_stmt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_Express

    // $ANTLR start synpred306_Express
    public final void synpred306_Express_fragment() throws RecognitionException {   
        // Express.g:1255:49: ( SEMI )
        // Express.g:1255:49: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred306_Express9089); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_Express

    // $ANTLR start synpred311_Express
    public final void synpred311_Express_fragment() throws RecognitionException {   
        // Express.g:1275:5: ({...}? => IDENT )
        // Express.g:1275:5: {...}? => IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred311_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred311_Express9232); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_Express

    // $ANTLR start synpred312_Express
    public final void synpred312_Express_fragment() throws RecognitionException {   
        // Express.g:1276:6: ( entity_ref )
        // Express.g:1276:6: entity_ref
        {
        pushFollow(FOLLOW_entity_ref_in_synpred312_Express9239);
        entity_ref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_Express

    // $ANTLR start synpred318_Express
    public final void synpred318_Express_fragment() throws RecognitionException {   
        constructed_types_return eids2 = null;


        // Express.g:1324:6: (eids2= constructed_types )
        // Express.g:1324:6: eids2= constructed_types
        {
        pushFollow(FOLLOW_constructed_types_in_synpred318_Express9508);
        eids2=constructed_types();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_Express

    // $ANTLR start synpred321_Express
    public final void synpred321_Express_fragment() throws RecognitionException {   
        // Express.g:1327:5: ({...}? => IDENT )
        // Express.g:1327:5: {...}? => IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred321_Express", " isFirst ");
        }
        match(input,IDENT,FOLLOW_IDENT_in_synpred321_Express9558); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_Express

    // $ANTLR start synpred322_Express
    public final void synpred322_Express_fragment() throws RecognitionException {   
        enumeration_type_return eids2 = null;


        // Express.g:1333:5: ({...}? =>eids2= enumeration_type )
        // Express.g:1333:5: {...}? =>eids2= enumeration_type
        {
        if ( !(( input.LT(1).getText().equals("ENUMERATION")||input.LT(2).getText().equals("ENUMERATION") )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred322_Express", " input.LT(1).getText().equals(\"ENUMERATION\")||input.LT(2).getText().equals(\"ENUMERATION\") ");
        }
        pushFollow(FOLLOW_enumeration_type_in_synpred322_Express9599);
        eids2=enumeration_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_Express

    // $ANTLR start synpred325_Express
    public final void synpred325_Express_fragment() throws RecognitionException {   
        enumeration_extension_return eids3 = null;


        // Express.g:1348:109: (eids3= enumeration_extension )
        // Express.g:1348:109: eids3= enumeration_extension
        {
        pushFollow(FOLLOW_enumeration_extension_in_synpred325_Express9690);
        eids3=enumeration_extension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_Express

    // $ANTLR start synpred328_Express
    public final void synpred328_Express_fragment() throws RecognitionException {   
        Token id=null;
        enumeration_items_return eids2 = null;


        // Express.g:1363:5: ({...}? => 'based_on' id= IDENT ( 'with' eids2= enumeration_items )? )
        // Express.g:1363:5: {...}? => 'based_on' id= IDENT ( 'with' eids2= enumeration_items )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred328_Express", " isFirst ");
        }
        match(input,368,FOLLOW_368_in_synpred328_Express9790); if (state.failed) return ;
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred328_Express9794); if (state.failed) return ;
        // Express.g:1363:73: ( 'with' eids2= enumeration_items )?
        int alt290=2;
        int LA290_0 = input.LA(1);

        if ( (LA290_0==369) ) {
            alt290=1;
        }
        switch (alt290) {
            case 1 :
                // Express.g:1363:75: 'with' eids2= enumeration_items
                {
                match(input,369,FOLLOW_369_in_synpred328_Express9800); if (state.failed) return ;
                pushFollow(FOLLOW_enumeration_items_in_synpred328_Express9804);
                eids2=enumeration_items();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred328_Express

    // $ANTLR start synpred330_Express
    public final void synpred330_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1369:5: ({...}? =>id= IDENT )
        // Express.g:1369:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred330_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred330_Express9863); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_Express

    // $ANTLR start synpred334_Express
    public final void synpred334_Express_fragment() throws RecognitionException {   
        // Express.g:1375:63: ( select_extension )
        // Express.g:1375:63: select_extension
        {
        pushFollow(FOLLOW_select_extension_in_synpred334_Express9916);
        select_extension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_Express

    // $ANTLR start synpred337_Express
    public final void synpred337_Express_fragment() throws RecognitionException {   
        // Express.g:1385:5: ({...}? => 'based_on' IDENT ( 'with' select_list )? )
        // Express.g:1385:5: {...}? => 'based_on' IDENT ( 'with' select_list )?
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred337_Express", " isFirst ");
        }
        match(input,368,FOLLOW_368_in_synpred337_Express9996); if (state.failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred337_Express9998); if (state.failed) return ;
        // Express.g:1385:38: ( 'with' select_list )?
        int alt291=2;
        int LA291_0 = input.LA(1);

        if ( (LA291_0==369) ) {
            alt291=1;
        }
        switch (alt291) {
            case 1 :
                // Express.g:1385:40: 'with' select_list
                {
                match(input,369,FOLLOW_369_in_synpred337_Express10002); if (state.failed) return ;
                pushFollow(FOLLOW_select_list_in_synpred337_Express10004);
                select_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred337_Express

    // $ANTLR start synpred339_Express
    public final void synpred339_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1391:5: ({...}? =>id= IDENT )
        // Express.g:1391:5: {...}? =>id= IDENT
        {
        if ( !(( isFirst )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred339_Express", " isFirst ");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred339_Express10062); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_Express

    // $ANTLR start synpred342_Express
    public final void synpred342_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1427:5: (id= IDENT )
        // Express.g:1427:5: id= IDENT
        {
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred342_Express10228); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_Express

    // $ANTLR start synpred343_Express
    public final void synpred343_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1428:6: ({...}?id= IDENT )
        // Express.g:1428:6: {...}?id= IDENT
        {
        if ( state.backtracking==0 ) {
          log.debug("variable spotted");
        }
        if ( !((nextIs(VARIABLE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred343_Express", "nextIs(VARIABLE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred343_Express10252); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_Express

    // $ANTLR start synpred344_Express
    public final void synpred344_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1430:6: ({...}?id= IDENT )
        // Express.g:1430:6: {...}?id= IDENT
        {
        if ( state.backtracking==0 ) {
          log.debug("variable spotted");
        }
        if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred344_Express", "nextIs(ENTITY_VAR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred344_Express10277); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_Express

    // $ANTLR start synpred345_Express
    public final void synpred345_Express_fragment() throws RecognitionException {   
        // Express.g:1437:37: ( domain_rule SEMI )
        // Express.g:1437:37: domain_rule SEMI
        {
        pushFollow(FOLLOW_domain_rule_in_synpred345_Express10340);
        domain_rule();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred345_Express10343); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_Express

    // $ANTLR start synpred347_Express
    public final void synpred347_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1457:5: ({...}?id= IDENT )
        // Express.g:1457:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred347_Express", "nextIs(ENTITY_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred347_Express10466); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_Express

    // $ANTLR start synpred348_Express
    public final void synpred348_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1459:5: ({...}?id= IDENT )
        // Express.g:1459:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred348_Express", "nextIs(ENTITY_ATTR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred348_Express10488); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_Express

    // $ANTLR start synpred349_Express
    public final void synpred349_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1461:5: ({...}?id= IDENT )
        // Express.g:1461:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred349_Express", "nextIs(ENTITY_VAR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred349_Express10510); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_Express

    // $ANTLR start synpred350_Express
    public final void synpred350_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1468:5: ({...}?id= IDENT )
        // Express.g:1468:5: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred350_Express", "nextIs(TYPE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred350_Express10561); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_Express

    // $ANTLR start synpred351_Express
    public final void synpred351_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1470:5: ({...}?id= IDENT )
        // Express.g:1470:5: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_ATTR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred351_Express", "nextIs(TYPE_ATTR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred351_Express10583); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_Express

    // $ANTLR start synpred352_Express
    public final void synpred352_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1472:5: ({...}?id= IDENT )
        // Express.g:1472:5: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_VAR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred352_Express", "nextIs(TYPE_VAR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred352_Express10605); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_Express

    // $ANTLR start synpred353_Express
    public final void synpred353_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1484:5: ({...}?id= IDENT )
        // Express.g:1484:5: {...}?id= IDENT
        {
        if ( !((nextIs(ATTRIBUTE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred353_Express", "nextIs(ATTRIBUTE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred353_Express10683); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_Express

    // $ANTLR start synpred354_Express
    public final void synpred354_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1486:5: ({...}?id= IDENT )
        // Express.g:1486:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred354_Express", "nextIs(ENTITY_ATTR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred354_Express10704); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_Express

    // $ANTLR start synpred355_Express
    public final void synpred355_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1503:5: ({...}?id= IDENT )
        // Express.g:1503:5: {...}?id= IDENT
        {
        if ( !((nextIs(PARAMETER_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred355_Express", "nextIs(PARAMETER_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred355_Express10816); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_Express

    // $ANTLR start synpred356_Express
    public final void synpred356_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1505:5: ({...}?id= IDENT )
        // Express.g:1505:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred356_Express", "nextIs(ENTITY_PARAM_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred356_Express10837); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_Express

    // $ANTLR start synpred357_Express
    public final void synpred357_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1523:5: (id= IDENT )
        // Express.g:1523:5: id= IDENT
        {
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred357_Express10888); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_Express

    // $ANTLR start synpred358_Express
    public final void synpred358_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1524:4: ({...}?id= IDENT )
        // Express.g:1524:4: {...}?id= IDENT
        {
        if ( !((nextIs(VARIABLE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred358_Express", "nextIs(VARIABLE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred358_Express10905); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_Express

    // $ANTLR start synpred359_Express
    public final void synpred359_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1526:5: ({...}?id= IDENT )
        // Express.g:1526:5: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred359_Express", "nextIs(ENTITY_VAR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred359_Express10926); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_Express

    // $ANTLR start synpred360_Express
    public final void synpred360_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1553:6: ({...}?id= IDENT )
        // Express.g:1553:6: {...}?id= IDENT
        {
        if ( !((nextIs(CONSTANT_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred360_Express", "nextIs(CONSTANT_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred360_Express11077); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_Express

    // $ANTLR start synpred361_Express
    public final void synpred361_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1554:6: ({...}?id= IDENT )
        // Express.g:1554:6: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred361_Express", "nextIs(ENTITY_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred361_Express11096); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_Express

    // $ANTLR start synpred362_Express
    public final void synpred362_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1555:6: ({...}?id= IDENT )
        // Express.g:1555:6: {...}?id= IDENT
        {
        if ( !((nextIs(FUNCTION_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred362_Express", "nextIs(FUNCTION_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred362_Express11115); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_Express

    // $ANTLR start synpred363_Express
    public final void synpred363_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1556:6: ({...}?id= IDENT )
        // Express.g:1556:6: {...}?id= IDENT
        {
        if ( !((nextIs(PROCEDURE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred363_Express", "nextIs(PROCEDURE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred363_Express11134); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_Express

    // $ANTLR start synpred364_Express
    public final void synpred364_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1557:6: ({...}?id= IDENT )
        // Express.g:1557:6: {...}?id= IDENT
        {
        if ( !((nextIs(PARAMETER_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred364_Express", "nextIs(PARAMETER_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred364_Express11153); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_Express

    // $ANTLR start synpred365_Express
    public final void synpred365_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1558:6: ({...}?id= IDENT )
        // Express.g:1558:6: {...}?id= IDENT
        {
        if ( !((nextIs(SCHEMA_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred365_Express", "nextIs(SCHEMA_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred365_Express11172); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_Express

    // $ANTLR start synpred366_Express
    public final void synpred366_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1559:6: ({...}?id= IDENT )
        // Express.g:1559:6: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred366_Express", "nextIs(TYPE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred366_Express11191); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_Express

    // $ANTLR start synpred367_Express
    public final void synpred367_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1560:6: ({...}?id= IDENT )
        // Express.g:1560:6: {...}?id= IDENT
        {
        if ( !((nextIs(VARIABLE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred367_Express", "nextIs(VARIABLE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred367_Express11210); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_Express

    // $ANTLR start synpred368_Express
    public final void synpred368_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1561:6: ({...}?id= IDENT )
        // Express.g:1561:6: {...}?id= IDENT
        {
        if ( !((nextIs(ENUMERATION_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred368_Express", "nextIs(ENUMERATION_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred368_Express11229); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_Express

    // $ANTLR start synpred369_Express
    public final void synpred369_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1562:6: ({...}?id= IDENT )
        // Express.g:1562:6: {...}?id= IDENT
        {
        if ( !((nextIs(ATTRIBUTE_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred369_Express", "nextIs(ATTRIBUTE_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred369_Express11248); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred369_Express

    // $ANTLR start synpred370_Express
    public final void synpred370_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1563:6: ({...}?id= IDENT )
        // Express.g:1563:6: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_ATTR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred370_Express", "nextIs(ENTITY_ATTR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred370_Express11267); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_Express

    // $ANTLR start synpred371_Express
    public final void synpred371_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1564:6: ({...}?id= IDENT )
        // Express.g:1564:6: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_ATTR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred371_Express", "nextIs(TYPE_ATTR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred371_Express11286); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_Express

    // $ANTLR start synpred372_Express
    public final void synpred372_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1565:6: ({...}?id= IDENT )
        // Express.g:1565:6: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_VAR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred372_Express", "nextIs(ENTITY_VAR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred372_Express11305); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_Express

    // $ANTLR start synpred373_Express
    public final void synpred373_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1566:6: ({...}?id= IDENT )
        // Express.g:1566:6: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_VAR_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred373_Express", "nextIs(TYPE_VAR_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred373_Express11324); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_Express

    // $ANTLR start synpred374_Express
    public final void synpred374_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1567:6: ({...}?id= IDENT )
        // Express.g:1567:6: {...}?id= IDENT
        {
        if ( !((nextIs(ENTITY_PARAM_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred374_Express", "nextIs(ENTITY_PARAM_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred374_Express11343); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_Express

    // $ANTLR start synpred375_Express
    public final void synpred375_Express_fragment() throws RecognitionException {   
        Token id=null;

        // Express.g:1568:6: ({...}?id= IDENT )
        // Express.g:1568:6: {...}?id= IDENT
        {
        if ( !((nextIs(TYPE_PARAM_IDENT))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred375_Express", "nextIs(TYPE_PARAM_IDENT)");
        }
        id=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred375_Express11362); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_Express

    // Delegated rules

    public final boolean synpred282_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Express() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Express_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA33 dfa33 = new DFA33(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA237 dfa237 = new DFA237(this);
    static final String DFA33_eotS =
        "\u0551\uffff";
    static final String DFA33_eofS =
        "\u0551\uffff";
    static final String DFA33_minS =
        "\3\u00d4\1\u00fc\4\u00d4\u0139\0\u0410\uffff";
    static final String DFA33_maxS =
        "\3\u0154\1\u00fc\4\u0154\u0139\0\u0410\uffff";
    static final String DFA33_acceptS =
        "\u0157\uffff\1\1\1\2\u03f8\uffff";
    static final String DFA33_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1"+
        "\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1"+
        "\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1"+
        "\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1"+
        "\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1"+
        "\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1"+
        "\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1"+
        "\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1"+
        "\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\1"+
        "\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1"+
        "\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1"+
        "\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1"+
        "\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1"+
        "\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1"+
        "\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1"+
        "\u00f1\1\u00f2\1\u00f3\1\u00f4\1\u00f5\1\u00f6\1\u00f7\1\u00f8\1"+
        "\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1\u0100\1"+
        "\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107\1\u0108\1"+
        "\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110\1"+
        "\u0111\1\u0112\1\u0113\1\u0114\1\u0115\1\u0116\1\u0117\1\u0118\1"+
        "\u0119\1\u011a\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120\1"+
        "\u0121\1\u0122\1\u0123\1\u0124\1\u0125\1\u0126\1\u0127\1\u0128\1"+
        "\u0129\1\u012a\1\u012b\1\u012c\1\u012d\1\u012e\1\u012f\1\u0130\1"+
        "\u0131\1\u0132\1\u0133\1\u0134\1\u0135\1\u0136\1\u0137\1\u0138\u0410"+
        "\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\16\1\17\1\20\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
            "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\50\2\uffff\1\6\5\uffff"+
            "\1\7\2\uffff\1\4\1\5\1\1\2\uffff\1\60\2\uffff\1\21\1\22\3\uffff"+
            "\1\2\3\uffff\1\10\1\11\1\15\2\uffff\1\3\74\uffff\1\12\1\13\1"+
            "\14",
            "\1\76\1\77\1\100\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
            "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
            "\1\124\1\125\1\126\1\127\1\131\1\132\1\133\1\134\1\135\1\136"+
            "\1\137\1\130\2\uffff\1\66\5\uffff\1\67\2\uffff\1\64\1\65\1\61"+
            "\1\141\1\uffff\1\140\2\uffff\1\101\1\102\3\uffff\1\62\3\uffff"+
            "\1\70\1\71\1\75\2\uffff\1\63\74\uffff\1\72\1\73\1\74",
            "\1\157\1\160\1\161\1\164\1\165\1\166\1\167\1\170\1\171\1\172"+
            "\1\173\1\174\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083"+
            "\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1\u008a\1\u008b\1\u008c"+
            "\1\u008d\1\u008e\1\u008f\1\u0090\1\u0089\2\uffff\1\147\5\uffff"+
            "\1\150\2\uffff\1\145\1\146\1\142\2\uffff\1\u0091\2\uffff\1\162"+
            "\1\163\3\uffff\1\143\3\uffff\1\151\1\152\1\156\2\uffff\1\144"+
            "\74\uffff\1\153\1\154\1\155",
            "\1\u0092",
            "\1\u009b\1\u009c\1\u009d\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1"+
            "\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab"+
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3"+
            "\1\u00b4\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc"+
            "\1\u00b5\10\uffff\1\u0093\7\uffff\1\u009a\2\uffff\1\u009e\1"+
            "\u009f\7\uffff\1\u0094\1\u0095\1\u0099\77\uffff\1\u0096\1\u0097"+
            "\1\u0098",
            "\1\u00c5\1\u00c6\1\u00c7\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1"+
            "\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5"+
            "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd"+
            "\1\u00de\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6"+
            "\1\u00df\10\uffff\1\u00bd\7\uffff\1\u00c4\2\uffff\1\u00c8\1"+
            "\u00c9\7\uffff\1\u00be\1\u00bf\1\u00c3\77\uffff\1\u00c0\1\u00c1"+
            "\1\u00c2",
            "\1\u00ef\1\u00f0\1\u00f1\1\u00f4\1\u00f5\1\u00f6\1\u00f7\1"+
            "\u00f8\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff"+
            "\1\u0100\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
            "\1\u0108\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110"+
            "\1\u0109\10\uffff\1\u00e7\7\uffff\1\u00ee\2\uffff\1\u00f2\1"+
            "\u00f3\7\uffff\1\u00e8\1\u00e9\1\u00ed\77\uffff\1\u00ea\1\u00eb"+
            "\1\u00ec",
            "\1\u011e\1\u011f\1\u0120\1\u0123\1\u0124\1\u0125\1\u0126\1"+
            "\u0127\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d\1\u012e"+
            "\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135\1\u0136"+
            "\1\u0137\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f"+
            "\1\u0138\2\uffff\1\u0116\5\uffff\1\u0117\2\uffff\1\u0114\1\u0115"+
            "\1\u0111\2\uffff\1\u0140\2\uffff\1\u0121\1\u0122\3\uffff\1\u0112"+
            "\3\uffff\1\u0118\1\u0119\1\u011d\2\uffff\1\u0113\74\uffff\1"+
            "\u011a\1\u011b\1\u011c",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "536:1: domain_rule options {k=2; } : ({...}? => logical_expression | ( label COLON )? logical_expression -> ^( DOMAIN_RULE ( label )? logical_expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_10 = input.LA(1);

                         
                        int index33_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_11 = input.LA(1);

                         
                        int index33_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_12 = input.LA(1);

                         
                        int index33_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_13 = input.LA(1);

                         
                        int index33_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA33_14 = input.LA(1);

                         
                        int index33_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA33_15 = input.LA(1);

                         
                        int index33_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA33_16 = input.LA(1);

                         
                        int index33_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA33_17 = input.LA(1);

                         
                        int index33_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA33_18 = input.LA(1);

                         
                        int index33_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA33_19 = input.LA(1);

                         
                        int index33_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_19);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA33_20 = input.LA(1);

                         
                        int index33_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_20);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA33_21 = input.LA(1);

                         
                        int index33_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_21);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA33_22 = input.LA(1);

                         
                        int index33_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_22);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA33_23 = input.LA(1);

                         
                        int index33_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_23);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA33_24 = input.LA(1);

                         
                        int index33_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_24);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA33_25 = input.LA(1);

                         
                        int index33_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA33_26 = input.LA(1);

                         
                        int index33_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA33_27 = input.LA(1);

                         
                        int index33_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_27);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA33_28 = input.LA(1);

                         
                        int index33_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_28);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA33_29 = input.LA(1);

                         
                        int index33_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_29);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA33_30 = input.LA(1);

                         
                        int index33_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_30);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA33_31 = input.LA(1);

                         
                        int index33_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_31);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA33_32 = input.LA(1);

                         
                        int index33_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_32);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA33_33 = input.LA(1);

                         
                        int index33_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_33);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA33_34 = input.LA(1);

                         
                        int index33_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_34);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA33_35 = input.LA(1);

                         
                        int index33_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_35);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA33_36 = input.LA(1);

                         
                        int index33_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_36);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA33_37 = input.LA(1);

                         
                        int index33_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_37);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA33_38 = input.LA(1);

                         
                        int index33_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_38);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA33_39 = input.LA(1);

                         
                        int index33_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_39);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA33_40 = input.LA(1);

                         
                        int index33_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_40);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA33_41 = input.LA(1);

                         
                        int index33_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_41);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA33_42 = input.LA(1);

                         
                        int index33_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_42);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA33_43 = input.LA(1);

                         
                        int index33_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_43);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA33_44 = input.LA(1);

                         
                        int index33_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_44);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA33_45 = input.LA(1);

                         
                        int index33_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_45);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA33_46 = input.LA(1);

                         
                        int index33_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_46);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA33_47 = input.LA(1);

                         
                        int index33_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_47);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA33_48 = input.LA(1);

                         
                        int index33_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_48);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA33_49 = input.LA(1);

                         
                        int index33_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_49);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA33_50 = input.LA(1);

                         
                        int index33_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_50);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA33_51 = input.LA(1);

                         
                        int index33_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_51);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA33_52 = input.LA(1);

                         
                        int index33_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_52);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA33_53 = input.LA(1);

                         
                        int index33_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_53);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA33_54 = input.LA(1);

                         
                        int index33_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_54);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA33_55 = input.LA(1);

                         
                        int index33_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_55);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA33_56 = input.LA(1);

                         
                        int index33_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_56);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA33_57 = input.LA(1);

                         
                        int index33_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_57);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA33_58 = input.LA(1);

                         
                        int index33_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_58);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA33_59 = input.LA(1);

                         
                        int index33_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_59);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA33_60 = input.LA(1);

                         
                        int index33_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_60);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA33_61 = input.LA(1);

                         
                        int index33_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_61);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA33_62 = input.LA(1);

                         
                        int index33_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_62);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA33_63 = input.LA(1);

                         
                        int index33_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_63);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA33_64 = input.LA(1);

                         
                        int index33_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_64);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA33_65 = input.LA(1);

                         
                        int index33_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_65);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA33_66 = input.LA(1);

                         
                        int index33_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_66);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA33_67 = input.LA(1);

                         
                        int index33_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_67);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA33_68 = input.LA(1);

                         
                        int index33_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_68);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA33_69 = input.LA(1);

                         
                        int index33_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_69);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA33_70 = input.LA(1);

                         
                        int index33_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_70);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA33_71 = input.LA(1);

                         
                        int index33_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_71);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA33_72 = input.LA(1);

                         
                        int index33_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_72);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA33_73 = input.LA(1);

                         
                        int index33_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_73);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA33_74 = input.LA(1);

                         
                        int index33_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_74);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA33_75 = input.LA(1);

                         
                        int index33_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_75);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA33_76 = input.LA(1);

                         
                        int index33_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_76);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA33_77 = input.LA(1);

                         
                        int index33_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_77);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA33_78 = input.LA(1);

                         
                        int index33_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_78);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA33_79 = input.LA(1);

                         
                        int index33_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_79);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA33_80 = input.LA(1);

                         
                        int index33_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_80);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA33_81 = input.LA(1);

                         
                        int index33_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_81);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA33_82 = input.LA(1);

                         
                        int index33_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_82);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA33_83 = input.LA(1);

                         
                        int index33_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_83);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA33_84 = input.LA(1);

                         
                        int index33_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_84);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA33_85 = input.LA(1);

                         
                        int index33_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_85);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA33_86 = input.LA(1);

                         
                        int index33_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_86);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA33_87 = input.LA(1);

                         
                        int index33_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_87);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA33_88 = input.LA(1);

                         
                        int index33_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_88);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA33_89 = input.LA(1);

                         
                        int index33_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_89);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA33_90 = input.LA(1);

                         
                        int index33_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_90);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA33_91 = input.LA(1);

                         
                        int index33_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_91);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA33_92 = input.LA(1);

                         
                        int index33_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_92);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA33_93 = input.LA(1);

                         
                        int index33_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_93);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA33_94 = input.LA(1);

                         
                        int index33_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_94);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA33_95 = input.LA(1);

                         
                        int index33_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_95);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA33_96 = input.LA(1);

                         
                        int index33_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_96);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA33_97 = input.LA(1);

                         
                        int index33_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_97);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA33_98 = input.LA(1);

                         
                        int index33_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_98);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA33_99 = input.LA(1);

                         
                        int index33_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_99);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA33_100 = input.LA(1);

                         
                        int index33_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_100);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA33_101 = input.LA(1);

                         
                        int index33_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_101);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA33_102 = input.LA(1);

                         
                        int index33_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_102);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA33_103 = input.LA(1);

                         
                        int index33_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_103);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA33_104 = input.LA(1);

                         
                        int index33_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_104);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA33_105 = input.LA(1);

                         
                        int index33_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_105);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA33_106 = input.LA(1);

                         
                        int index33_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_106);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA33_107 = input.LA(1);

                         
                        int index33_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_107);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA33_108 = input.LA(1);

                         
                        int index33_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_108);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA33_109 = input.LA(1);

                         
                        int index33_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_109);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA33_110 = input.LA(1);

                         
                        int index33_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_110);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA33_111 = input.LA(1);

                         
                        int index33_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_111);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA33_112 = input.LA(1);

                         
                        int index33_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_112);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA33_113 = input.LA(1);

                         
                        int index33_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_113);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA33_114 = input.LA(1);

                         
                        int index33_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_114);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA33_115 = input.LA(1);

                         
                        int index33_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_115);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA33_116 = input.LA(1);

                         
                        int index33_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_116);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA33_117 = input.LA(1);

                         
                        int index33_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_117);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA33_118 = input.LA(1);

                         
                        int index33_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_118);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA33_119 = input.LA(1);

                         
                        int index33_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_119);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA33_120 = input.LA(1);

                         
                        int index33_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_120);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA33_121 = input.LA(1);

                         
                        int index33_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_121);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA33_122 = input.LA(1);

                         
                        int index33_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_122);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA33_123 = input.LA(1);

                         
                        int index33_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_123);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA33_124 = input.LA(1);

                         
                        int index33_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_124);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA33_125 = input.LA(1);

                         
                        int index33_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_125);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA33_126 = input.LA(1);

                         
                        int index33_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_126);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA33_127 = input.LA(1);

                         
                        int index33_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_127);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA33_128 = input.LA(1);

                         
                        int index33_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_128);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA33_129 = input.LA(1);

                         
                        int index33_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_129);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA33_130 = input.LA(1);

                         
                        int index33_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_130);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA33_131 = input.LA(1);

                         
                        int index33_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_131);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA33_132 = input.LA(1);

                         
                        int index33_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_132);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA33_133 = input.LA(1);

                         
                        int index33_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_133);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA33_134 = input.LA(1);

                         
                        int index33_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_134);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA33_135 = input.LA(1);

                         
                        int index33_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_135);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA33_136 = input.LA(1);

                         
                        int index33_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_136);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA33_137 = input.LA(1);

                         
                        int index33_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_137);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA33_138 = input.LA(1);

                         
                        int index33_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_138);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA33_139 = input.LA(1);

                         
                        int index33_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_139);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA33_140 = input.LA(1);

                         
                        int index33_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_140);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA33_141 = input.LA(1);

                         
                        int index33_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_141);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA33_142 = input.LA(1);

                         
                        int index33_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_142);
                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA33_143 = input.LA(1);

                         
                        int index33_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_143);
                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA33_144 = input.LA(1);

                         
                        int index33_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_144);
                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA33_145 = input.LA(1);

                         
                        int index33_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_145);
                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA33_146 = input.LA(1);

                         
                        int index33_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_146);
                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA33_147 = input.LA(1);

                         
                        int index33_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_147);
                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA33_148 = input.LA(1);

                         
                        int index33_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_148);
                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA33_149 = input.LA(1);

                         
                        int index33_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_149);
                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA33_150 = input.LA(1);

                         
                        int index33_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_150);
                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA33_151 = input.LA(1);

                         
                        int index33_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_151);
                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA33_152 = input.LA(1);

                         
                        int index33_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_152);
                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA33_153 = input.LA(1);

                         
                        int index33_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_153);
                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA33_154 = input.LA(1);

                         
                        int index33_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_154);
                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA33_155 = input.LA(1);

                         
                        int index33_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_155);
                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA33_156 = input.LA(1);

                         
                        int index33_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_156);
                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA33_157 = input.LA(1);

                         
                        int index33_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_157);
                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA33_158 = input.LA(1);

                         
                        int index33_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_158);
                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA33_159 = input.LA(1);

                         
                        int index33_159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_159);
                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA33_160 = input.LA(1);

                         
                        int index33_160 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_160);
                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA33_161 = input.LA(1);

                         
                        int index33_161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_161);
                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA33_162 = input.LA(1);

                         
                        int index33_162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_162);
                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA33_163 = input.LA(1);

                         
                        int index33_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_163);
                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA33_164 = input.LA(1);

                         
                        int index33_164 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_164);
                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA33_165 = input.LA(1);

                         
                        int index33_165 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_165);
                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA33_166 = input.LA(1);

                         
                        int index33_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_166);
                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA33_167 = input.LA(1);

                         
                        int index33_167 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_167);
                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA33_168 = input.LA(1);

                         
                        int index33_168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_168);
                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA33_169 = input.LA(1);

                         
                        int index33_169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_169);
                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA33_170 = input.LA(1);

                         
                        int index33_170 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_170);
                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA33_171 = input.LA(1);

                         
                        int index33_171 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_171);
                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA33_172 = input.LA(1);

                         
                        int index33_172 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_172);
                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA33_173 = input.LA(1);

                         
                        int index33_173 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_173);
                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA33_174 = input.LA(1);

                         
                        int index33_174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_174);
                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA33_175 = input.LA(1);

                         
                        int index33_175 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_175);
                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA33_176 = input.LA(1);

                         
                        int index33_176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_176);
                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA33_177 = input.LA(1);

                         
                        int index33_177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_177);
                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA33_178 = input.LA(1);

                         
                        int index33_178 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_178);
                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA33_179 = input.LA(1);

                         
                        int index33_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_179);
                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA33_180 = input.LA(1);

                         
                        int index33_180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_180);
                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA33_181 = input.LA(1);

                         
                        int index33_181 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_181);
                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA33_182 = input.LA(1);

                         
                        int index33_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_182);
                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA33_183 = input.LA(1);

                         
                        int index33_183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_183);
                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA33_184 = input.LA(1);

                         
                        int index33_184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_184);
                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA33_185 = input.LA(1);

                         
                        int index33_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_185);
                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA33_186 = input.LA(1);

                         
                        int index33_186 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_186);
                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA33_187 = input.LA(1);

                         
                        int index33_187 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_187);
                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA33_188 = input.LA(1);

                         
                        int index33_188 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_188);
                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA33_189 = input.LA(1);

                         
                        int index33_189 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_189);
                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA33_190 = input.LA(1);

                         
                        int index33_190 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_190);
                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA33_191 = input.LA(1);

                         
                        int index33_191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_191);
                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA33_192 = input.LA(1);

                         
                        int index33_192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_192);
                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA33_193 = input.LA(1);

                         
                        int index33_193 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_193);
                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA33_194 = input.LA(1);

                         
                        int index33_194 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_194);
                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA33_195 = input.LA(1);

                         
                        int index33_195 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_195);
                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA33_196 = input.LA(1);

                         
                        int index33_196 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_196);
                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA33_197 = input.LA(1);

                         
                        int index33_197 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_197);
                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA33_198 = input.LA(1);

                         
                        int index33_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_198);
                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA33_199 = input.LA(1);

                         
                        int index33_199 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_199);
                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA33_200 = input.LA(1);

                         
                        int index33_200 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_200);
                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA33_201 = input.LA(1);

                         
                        int index33_201 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_201);
                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA33_202 = input.LA(1);

                         
                        int index33_202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_202);
                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA33_203 = input.LA(1);

                         
                        int index33_203 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_203);
                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA33_204 = input.LA(1);

                         
                        int index33_204 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_204);
                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA33_205 = input.LA(1);

                         
                        int index33_205 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_205);
                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA33_206 = input.LA(1);

                         
                        int index33_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_206);
                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA33_207 = input.LA(1);

                         
                        int index33_207 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_207);
                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA33_208 = input.LA(1);

                         
                        int index33_208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_208);
                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA33_209 = input.LA(1);

                         
                        int index33_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_209);
                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA33_210 = input.LA(1);

                         
                        int index33_210 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_210);
                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA33_211 = input.LA(1);

                         
                        int index33_211 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_211);
                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA33_212 = input.LA(1);

                         
                        int index33_212 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_212);
                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA33_213 = input.LA(1);

                         
                        int index33_213 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_213);
                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA33_214 = input.LA(1);

                         
                        int index33_214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_214);
                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA33_215 = input.LA(1);

                         
                        int index33_215 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_215);
                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA33_216 = input.LA(1);

                         
                        int index33_216 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_216);
                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA33_217 = input.LA(1);

                         
                        int index33_217 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_217);
                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA33_218 = input.LA(1);

                         
                        int index33_218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_218);
                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA33_219 = input.LA(1);

                         
                        int index33_219 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_219);
                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA33_220 = input.LA(1);

                         
                        int index33_220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_220);
                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA33_221 = input.LA(1);

                         
                        int index33_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_221);
                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA33_222 = input.LA(1);

                         
                        int index33_222 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_222);
                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA33_223 = input.LA(1);

                         
                        int index33_223 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_223);
                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA33_224 = input.LA(1);

                         
                        int index33_224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_224);
                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA33_225 = input.LA(1);

                         
                        int index33_225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_225);
                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA33_226 = input.LA(1);

                         
                        int index33_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_226);
                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA33_227 = input.LA(1);

                         
                        int index33_227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_227);
                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA33_228 = input.LA(1);

                         
                        int index33_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_228);
                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA33_229 = input.LA(1);

                         
                        int index33_229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_229);
                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA33_230 = input.LA(1);

                         
                        int index33_230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_230);
                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA33_231 = input.LA(1);

                         
                        int index33_231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_231);
                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA33_232 = input.LA(1);

                         
                        int index33_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_232);
                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA33_233 = input.LA(1);

                         
                        int index33_233 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_233);
                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA33_234 = input.LA(1);

                         
                        int index33_234 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_234);
                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA33_235 = input.LA(1);

                         
                        int index33_235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_235);
                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA33_236 = input.LA(1);

                         
                        int index33_236 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_236);
                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA33_237 = input.LA(1);

                         
                        int index33_237 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_237);
                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA33_238 = input.LA(1);

                         
                        int index33_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_238);
                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA33_239 = input.LA(1);

                         
                        int index33_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_239);
                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA33_240 = input.LA(1);

                         
                        int index33_240 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_240);
                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA33_241 = input.LA(1);

                         
                        int index33_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_241);
                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA33_242 = input.LA(1);

                         
                        int index33_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_242);
                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA33_243 = input.LA(1);

                         
                        int index33_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_243);
                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA33_244 = input.LA(1);

                         
                        int index33_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_244);
                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA33_245 = input.LA(1);

                         
                        int index33_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_245);
                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA33_246 = input.LA(1);

                         
                        int index33_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_246);
                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA33_247 = input.LA(1);

                         
                        int index33_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_247);
                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA33_248 = input.LA(1);

                         
                        int index33_248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_248);
                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA33_249 = input.LA(1);

                         
                        int index33_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_249);
                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA33_250 = input.LA(1);

                         
                        int index33_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_250);
                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA33_251 = input.LA(1);

                         
                        int index33_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_251);
                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA33_252 = input.LA(1);

                         
                        int index33_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_252);
                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA33_253 = input.LA(1);

                         
                        int index33_253 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_253);
                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA33_254 = input.LA(1);

                         
                        int index33_254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_254);
                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA33_255 = input.LA(1);

                         
                        int index33_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_255);
                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA33_256 = input.LA(1);

                         
                        int index33_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_256);
                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA33_257 = input.LA(1);

                         
                        int index33_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_257);
                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA33_258 = input.LA(1);

                         
                        int index33_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_258);
                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA33_259 = input.LA(1);

                         
                        int index33_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_259);
                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA33_260 = input.LA(1);

                         
                        int index33_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_260);
                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA33_261 = input.LA(1);

                         
                        int index33_261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_261);
                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA33_262 = input.LA(1);

                         
                        int index33_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_262);
                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA33_263 = input.LA(1);

                         
                        int index33_263 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_263);
                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA33_264 = input.LA(1);

                         
                        int index33_264 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_264);
                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA33_265 = input.LA(1);

                         
                        int index33_265 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_265);
                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA33_266 = input.LA(1);

                         
                        int index33_266 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_266);
                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA33_267 = input.LA(1);

                         
                        int index33_267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_267);
                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA33_268 = input.LA(1);

                         
                        int index33_268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_268);
                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA33_269 = input.LA(1);

                         
                        int index33_269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_269);
                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA33_270 = input.LA(1);

                         
                        int index33_270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_270);
                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA33_271 = input.LA(1);

                         
                        int index33_271 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_271);
                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA33_272 = input.LA(1);

                         
                        int index33_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_272);
                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA33_273 = input.LA(1);

                         
                        int index33_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_273);
                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA33_274 = input.LA(1);

                         
                        int index33_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_274);
                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA33_275 = input.LA(1);

                         
                        int index33_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_275);
                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA33_276 = input.LA(1);

                         
                        int index33_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_276);
                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA33_277 = input.LA(1);

                         
                        int index33_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_277);
                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA33_278 = input.LA(1);

                         
                        int index33_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_278);
                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA33_279 = input.LA(1);

                         
                        int index33_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_279);
                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA33_280 = input.LA(1);

                         
                        int index33_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_280);
                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA33_281 = input.LA(1);

                         
                        int index33_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_281);
                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA33_282 = input.LA(1);

                         
                        int index33_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_282);
                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA33_283 = input.LA(1);

                         
                        int index33_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_283);
                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA33_284 = input.LA(1);

                         
                        int index33_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_284);
                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA33_285 = input.LA(1);

                         
                        int index33_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_285);
                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA33_286 = input.LA(1);

                         
                        int index33_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_286);
                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA33_287 = input.LA(1);

                         
                        int index33_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_287);
                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA33_288 = input.LA(1);

                         
                        int index33_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_288);
                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA33_289 = input.LA(1);

                         
                        int index33_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_289);
                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA33_290 = input.LA(1);

                         
                        int index33_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_290);
                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA33_291 = input.LA(1);

                         
                        int index33_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_291);
                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA33_292 = input.LA(1);

                         
                        int index33_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_292);
                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA33_293 = input.LA(1);

                         
                        int index33_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_293);
                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA33_294 = input.LA(1);

                         
                        int index33_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_294);
                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA33_295 = input.LA(1);

                         
                        int index33_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_295);
                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA33_296 = input.LA(1);

                         
                        int index33_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_296);
                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA33_297 = input.LA(1);

                         
                        int index33_297 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_297);
                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA33_298 = input.LA(1);

                         
                        int index33_298 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_298);
                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA33_299 = input.LA(1);

                         
                        int index33_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_299);
                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA33_300 = input.LA(1);

                         
                        int index33_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_300);
                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA33_301 = input.LA(1);

                         
                        int index33_301 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_301);
                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA33_302 = input.LA(1);

                         
                        int index33_302 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_302);
                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA33_303 = input.LA(1);

                         
                        int index33_303 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_303);
                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA33_304 = input.LA(1);

                         
                        int index33_304 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_304);
                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA33_305 = input.LA(1);

                         
                        int index33_305 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_305);
                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA33_306 = input.LA(1);

                         
                        int index33_306 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_306);
                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA33_307 = input.LA(1);

                         
                        int index33_307 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_307);
                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA33_308 = input.LA(1);

                         
                        int index33_308 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_308);
                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA33_309 = input.LA(1);

                         
                        int index33_309 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_309);
                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA33_310 = input.LA(1);

                         
                        int index33_310 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_310);
                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA33_311 = input.LA(1);

                         
                        int index33_311 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_311);
                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA33_312 = input.LA(1);

                         
                        int index33_312 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_312);
                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA33_313 = input.LA(1);

                         
                        int index33_313 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_313);
                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA33_314 = input.LA(1);

                         
                        int index33_314 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_314);
                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA33_315 = input.LA(1);

                         
                        int index33_315 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_315);
                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA33_316 = input.LA(1);

                         
                        int index33_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_316);
                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA33_317 = input.LA(1);

                         
                        int index33_317 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_317);
                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA33_318 = input.LA(1);

                         
                        int index33_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_318);
                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA33_319 = input.LA(1);

                         
                        int index33_319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_319);
                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA33_320 = input.LA(1);

                         
                        int index33_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred70_Express()&&( isFirst && input.LA(2) != COLON ))) ) {s = 343;}

                        else if ( (true) ) {s = 344;}

                         
                        input.seek(index33_320);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\13\uffff";
    static final String DFA36_eofS =
        "\13\uffff";
    static final String DFA36_minS =
        "\1\u00d6\1\uffff\10\0\1\uffff";
    static final String DFA36_maxS =
        "\1\u0174\1\uffff\10\0\1\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA36_specialS =
        "\2\uffff\1\2\1\6\1\5\1\7\1\0\1\3\1\1\1\4\1\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\4\55\uffff\1\3\1\2\46\uffff\1\7\13\uffff\1\1\1\11\2\1\4\uffff"+
            "\1\5\1\6\62\uffff\1\10",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "549:119: ( subsuper )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred74_Express()&&( isFirst ))||(synpred74_Express()&&(nextIs(TYPE_ATTR_IDENT)))||(synpred74_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred74_Express()&&(nextIs(ATTRIBUTE_IDENT))))) ) {s = 1;}

                        else if ( (((nextIs(ATTRIBUTE_IDENT))||(nextIs(TYPE_ATTR_IDENT))||( isFirst )||(nextIs(ENTITY_ATTR_IDENT)))) ) {s = 10;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA51_eotS =
        "\12\uffff";
    static final String DFA51_eofS =
        "\12\uffff";
    static final String DFA51_minS =
        "\1\u013b\1\u0126\1\u00fc\1\u0104\1\u00fd\1\u0104\1\0\1\u00fd\2\uffff";
    static final String DFA51_maxS =
        "\1\u013b\1\u0126\1\u00fc\1\u0104\1\u00fe\1\u0104\1\0\1\u00fe\2\uffff";
    static final String DFA51_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA51_specialS =
        "\6\uffff\1\0\3\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\1",
            "\1\2",
            "\1\3",
            "\1\4",
            "\1\5\1\6",
            "\1\7",
            "\1\uffff",
            "\1\5\1\6",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "580:1: subtype_declaration : ({...}? => 'subtype' 'of' LPAREN id= IDENT ( COMMA id2= IDENT )* RPAREN ( SEMI )? | 'subtype' 'of' LPAREN entity_ref ( COMMA entity_ref )* RPAREN ( SEMI )? -> ^( SUBTYPE_DECLARATION ( entity_ref )+ ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_6 = input.LA(1);

                         
                        int index51_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred87_Express()&&( isFirst ))) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index51_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\25\uffff";
    static final String DFA92_eofS =
        "\25\uffff";
    static final String DFA92_minS =
        "\1\u00f4\7\uffff\14\0\1\uffff";
    static final String DFA92_maxS =
        "\1\u016c\7\uffff\14\0\1\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA92_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\17\1\20\16\uffff\1\10\1\16\41\uffff\1\11\10\uffff\1\12\2"+
            "\uffff\1\13\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\5\uffff\1\14"+
            "\1\uffff\1\1\3\uffff\1\15\6\uffff\1\1\10\uffff\1\1\6\uffff\1"+
            "\21\2\uffff\1\22\5\uffff\1\23\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "746:20: ( algorithm_head )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_8 = input.LA(1);

                         
                        int index92_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred134_Express()&&(nextIs(PARAMETER_IDENT)))||(synpred134_Express()&&(nextIs(PROCEDURE_IDENT)))||synpred134_Express()||(synpred134_Express()&&(nextIs(TYPE_PARAM_IDENT)))||(synpred134_Express()&&(nextIs(ENTITY_VAR_IDENT)))||(synpred134_Express()&&(nextIs(VARIABLE_IDENT)))||(synpred134_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred134_Express()&&( isFirst ))||(synpred134_Express()&&(nextIs(TYPE_VAR_IDENT))))) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_9 = input.LA(1);

                         
                        int index92_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred134_Express()||(synpred134_Express()&&( isFirst )))) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA92_10 = input.LA(1);

                         
                        int index92_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA92_12 = input.LA(1);

                         
                        int index92_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index92_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\26\uffff";
    static final String DFA131_eofS =
        "\26\uffff";
    static final String DFA131_minS =
        "\1\u00f4\7\uffff\15\0\1\uffff";
    static final String DFA131_maxS =
        "\1\u016c\7\uffff\15\0\1\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA131_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\17\1\20\16\uffff\1\10\1\16\41\uffff\1\11\10\uffff\1\12\2"+
            "\uffff\1\13\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\5\uffff\1\14"+
            "\1\uffff\1\1\3\uffff\1\15\6\uffff\1\1\7\uffff\1\24\1\1\6\uffff"+
            "\1\21\2\uffff\1\22\5\uffff\1\23\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1001:21: ( algorithm_head )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_8 = input.LA(1);

                         
                        int index131_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred188_Express()||(synpred188_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred188_Express()&&(nextIs(VARIABLE_IDENT)))||(synpred188_Express()&&(nextIs(TYPE_PARAM_IDENT)))||(synpred188_Express()&&(nextIs(PROCEDURE_IDENT)))||(synpred188_Express()&&( isFirst ))||(synpred188_Express()&&(nextIs(TYPE_VAR_IDENT)))||(synpred188_Express()&&(nextIs(PARAMETER_IDENT)))||(synpred188_Express()&&(nextIs(ENTITY_VAR_IDENT))))) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_9 = input.LA(1);

                         
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred188_Express()||(synpred188_Express()&&( isFirst )))) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_10 = input.LA(1);

                         
                        int index131_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_11 = input.LA(1);

                         
                        int index131_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA131_12 = input.LA(1);

                         
                        int index131_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA131_13 = input.LA(1);

                         
                        int index131_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA131_14 = input.LA(1);

                         
                        int index131_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA131_15 = input.LA(1);

                         
                        int index131_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA131_16 = input.LA(1);

                         
                        int index131_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA131_17 = input.LA(1);

                         
                        int index131_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA131_18 = input.LA(1);

                         
                        int index131_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA131_19 = input.LA(1);

                         
                        int index131_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_19);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA131_20 = input.LA(1);

                         
                        int index131_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index131_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA140_eotS =
        "\54\uffff";
    static final String DFA140_eofS =
        "\54\uffff";
    static final String DFA140_minS =
        "\1\u00d4\43\0\10\uffff";
    static final String DFA140_maxS =
        "\1\u0108\43\0\10\uffff";
    static final String DFA140_acceptS =
        "\44\uffff\1\1\1\4\1\5\1\6\1\7\1\10\1\2\1\3";
    static final String DFA140_specialS =
        "\1\uffff\1\4\1\11\1\36\1\42\1\25\1\26\1\27\1\12\1\16\1\0\1\6\1\33"+
        "\1\37\1\22\1\30\1\13\1\17\1\1\1\7\1\34\1\40\1\23\1\31\1\14\1\20"+
        "\1\2\1\10\1\35\1\41\1\24\1\32\1\15\1\21\1\3\1\5\10\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\2\1\3\1\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\35"+
            "\1\36\1\37\1\40\1\41\1\42\1\43\1\34\20\uffff\1\1\2\uffff\1\5"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "1018:1: qualifiable_factor : ({...}? => IDENT ( actual_parameter_list )? | {...}? => built_in_constant | {...}? => built_in_function ( actual_parameter_list )? | function_call -> ^( QUALIFIABLE_FACTOR function_call ) | attribute_ref -> ^( QUALIFIABLE_FACTOR attribute_ref ) | constant_factor -> ^( QUALIFIABLE_FACTOR constant_factor ) | population -> ^( QUALIFIABLE_FACTOR population ) | general_ref -> ^( QUALIFIABLE_FACTOR general_ref ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_10 = input.LA(1);

                         
                        int index140_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA140_18 = input.LA(1);

                         
                        int index140_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA140_26 = input.LA(1);

                         
                        int index140_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_26);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA140_34 = input.LA(1);

                         
                        int index140_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_34);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA140_1 = input.LA(1);

                         
                        int index140_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred196_Express()&&( isFirst ))) ) {s = 36;}

                        else if ( ((synpred200_Express()&&(nextIs(FUNCTION_IDENT)))) ) {s = 37;}

                        else if ( (((synpred201_Express()&&(nextIs(ATTRIBUTE_IDENT)))||(synpred201_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred201_Express()&&(nextIs(TYPE_ATTR_IDENT))))) ) {s = 38;}

                        else if ( ((synpred202_Express()&&(nextIs(CONSTANT_IDENT)))) ) {s = 39;}

                        else if ( (((synpred203_Express()&&(nextIs(ENTITY_ATTR_IDENT)))||(synpred203_Express()&&(nextIs(ENTITY_IDENT)))||(synpred203_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred203_Express()&&(nextIs(ENTITY_VAR_IDENT))))) ) {s = 40;}

                        else if ( (true) ) {s = 41;}

                         
                        input.seek(index140_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA140_35 = input.LA(1);

                         
                        int index140_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_35);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA140_11 = input.LA(1);

                         
                        int index140_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA140_19 = input.LA(1);

                         
                        int index140_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA140_27 = input.LA(1);

                         
                        int index140_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred197_Express()&&( isFirst ))) ) {s = 42;}

                        else if ( (synpred202_Express()) ) {s = 39;}

                         
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA140_8 = input.LA(1);

                         
                        int index140_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_8);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA140_16 = input.LA(1);

                         
                        int index140_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA140_24 = input.LA(1);

                         
                        int index140_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA140_32 = input.LA(1);

                         
                        int index140_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_32);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA140_9 = input.LA(1);

                         
                        int index140_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_9);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA140_17 = input.LA(1);

                         
                        int index140_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA140_25 = input.LA(1);

                         
                        int index140_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_25);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA140_33 = input.LA(1);

                         
                        int index140_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA140_14 = input.LA(1);

                         
                        int index140_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_14);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA140_22 = input.LA(1);

                         
                        int index140_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA140_30 = input.LA(1);

                         
                        int index140_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA140_5 = input.LA(1);

                         
                        int index140_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred197_Express()&&( isFirst ))) ) {s = 42;}

                        else if ( (synpred202_Express()) ) {s = 39;}

                         
                        input.seek(index140_5);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA140_6 = input.LA(1);

                         
                        int index140_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred197_Express()&&( isFirst ))) ) {s = 42;}

                        else if ( (synpred202_Express()) ) {s = 39;}

                         
                        input.seek(index140_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA140_7 = input.LA(1);

                         
                        int index140_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_7);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA140_15 = input.LA(1);

                         
                        int index140_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_15);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA140_23 = input.LA(1);

                         
                        int index140_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_23);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA140_31 = input.LA(1);

                         
                        int index140_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_31);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA140_12 = input.LA(1);

                         
                        int index140_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_12);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA140_20 = input.LA(1);

                         
                        int index140_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_20);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA140_28 = input.LA(1);

                         
                        int index140_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_28);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA140_3 = input.LA(1);

                         
                        int index140_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred197_Express()&&( isFirst ))) ) {s = 42;}

                        else if ( (synpred202_Express()) ) {s = 39;}

                         
                        input.seek(index140_3);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA140_13 = input.LA(1);

                         
                        int index140_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_13);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA140_21 = input.LA(1);

                         
                        int index140_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_21);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA140_29 = input.LA(1);

                         
                        int index140_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred199_Express()&&( isFirst ))) ) {s = 43;}

                        else if ( (synpred200_Express()) ) {s = 37;}

                         
                        input.seek(index140_29);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA140_4 = input.LA(1);

                         
                        int index140_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred197_Express()&&( isFirst ))) ) {s = 42;}

                        else if ( (synpred202_Express()) ) {s = 39;}

                         
                        input.seek(index140_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\20\uffff";
    static final String DFA147_eofS =
        "\20\uffff";
    static final String DFA147_minS =
        "\1\u015c\1\u015d\1\u0104\1\u00fc\1\u0104\1\0\1\u00fd\2\uffff\2\u0104"+
        "\1\u0105\2\u00fd\1\u0104\1\u00fd";
    static final String DFA147_maxS =
        "\1\u015c\1\u015d\1\u0104\1\u0105\1\u0104\1\0\1\u0162\2\uffff\2\u0104"+
        "\1\u0105\1\u00fe\1\u0162\1\u0104\1\u00fe";
    static final String DFA147_acceptS =
        "\7\uffff\1\1\1\2\7\uffff";
    static final String DFA147_specialS =
        "\5\uffff\1\0\12\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\1",
            "\1\2",
            "\1\3",
            "\1\4\10\uffff\1\5",
            "\1\6",
            "\1\uffff",
            "\1\12\1\13\143\uffff\1\11",
            "",
            "",
            "\1\14",
            "\1\15",
            "\1\5",
            "\1\12\1\13",
            "\1\12\1\13\143\uffff\1\16",
            "\1\17",
            "\1\12\1\13"
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "1045:1: reference_clause : ({...}? => 'reference' 'from' id= IDENT ( LPAREN ei= resource_or_rename ( COMMA ei= resource_or_rename )* RPAREN )? SEMI | 'reference' 'from' schema_ref ( LPAREN resource_or_rename ( COMMA resource_or_rename )* RPAREN )? SEMI -> ^( REFERENCE_CLAUSE schema_ref ( resource_or_rename )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_5 = input.LA(1);

                         
                        int index147_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred209_Express()&&( isFirst ))) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index147_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\26\uffff";
    static final String DFA161_eofS =
        "\26\uffff";
    static final String DFA161_minS =
        "\1\u00f4\7\uffff\15\0\1\uffff";
    static final String DFA161_maxS =
        "\1\u0174\7\uffff\15\0\1\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA161_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\17\1\20\16\uffff\1\10\1\16\41\uffff\1\11\10\uffff\1\12\2"+
            "\uffff\1\13\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\5\uffff\1\14"+
            "\1\uffff\1\1\3\uffff\1\15\6\uffff\1\1\10\uffff\1\1\6\uffff\1"+
            "\21\2\uffff\1\22\5\uffff\1\23\2\uffff\1\1\7\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "1128:36: ( algorithm_head )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_8 = input.LA(1);

                         
                        int index161_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred240_Express()&&(nextIs(PARAMETER_IDENT)))||(synpred240_Express()&&(nextIs(PROCEDURE_IDENT)))||synpred240_Express()||(synpred240_Express()&&( isFirst ))||(synpred240_Express()&&(nextIs(TYPE_VAR_IDENT)))||(synpred240_Express()&&(nextIs(VARIABLE_IDENT)))||(synpred240_Express()&&(nextIs(ENTITY_VAR_IDENT)))||(synpred240_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||(synpred240_Express()&&(nextIs(TYPE_PARAM_IDENT))))) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_9 = input.LA(1);

                         
                        int index161_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred240_Express()||(synpred240_Express()&&( isFirst )))) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_10 = input.LA(1);

                         
                        int index161_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_11 = input.LA(1);

                         
                        int index161_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_12 = input.LA(1);

                         
                        int index161_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA161_13 = input.LA(1);

                         
                        int index161_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA161_14 = input.LA(1);

                         
                        int index161_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA161_15 = input.LA(1);

                         
                        int index161_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA161_16 = input.LA(1);

                         
                        int index161_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA161_17 = input.LA(1);

                         
                        int index161_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA161_18 = input.LA(1);

                         
                        int index161_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA161_19 = input.LA(1);

                         
                        int index161_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_19);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA161_20 = input.LA(1);

                         
                        int index161_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Express()) ) {s = 1;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index161_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\14\uffff";
    static final String DFA165_eofS =
        "\14\uffff";
    static final String DFA165_minS =
        "\1\u0165\1\u0104\1\u0128\1\u00fc\1\u0104\1\u00fd\1\u0104\1\u0105"+
        "\1\u00fd\1\0\2\uffff";
    static final String DFA165_maxS =
        "\1\u0165\1\u0104\1\u0128\1\u00fc\1\u0104\1\u00fe\1\u0104\1\u0105"+
        "\1\u00fe\1\0\2\uffff";
    static final String DFA165_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA165_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\1",
            "\1\2",
            "\1\3",
            "\1\4",
            "\1\5",
            "\1\6\1\7",
            "\1\10",
            "\1\11",
            "\1\6\1\7",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "1132:1: rule_head : ({...}? => 'rule' rule_id 'for' LPAREN IDENT ( COMMA IDENT )* RPAREN SEMI | 'rule' rule_id 'for' LPAREN entity_ref ( COMMA entity_ref )* RPAREN SEMI -> ^( RULE_HEAD rule_id ( entity_ref )+ ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_9 = input.LA(1);

                         
                        int index165_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred243_Express()&&( isFirst ))) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index165_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\20\uffff";
    static final String DFA176_eofS =
        "\20\uffff";
    static final String DFA176_minS =
        "\1\u0168\1\u015d\1\u0104\1\u00fc\1\u0104\1\0\1\u00fd\2\uffff\2\u0104"+
        "\1\u0105\2\u00fd\1\u0104\1\u00fd";
    static final String DFA176_maxS =
        "\1\u0168\1\u015d\1\u0104\1\u0105\1\u0104\1\0\1\u0162\2\uffff\2\u0104"+
        "\1\u0105\1\u00fe\1\u0162\1\u0104\1\u00fe";
    static final String DFA176_acceptS =
        "\7\uffff\1\1\1\2\7\uffff";
    static final String DFA176_specialS =
        "\5\uffff\1\0\12\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\1",
            "\1\2",
            "\1\3",
            "\1\4\10\uffff\1\5",
            "\1\6",
            "\1\uffff",
            "\1\12\1\13\143\uffff\1\11",
            "",
            "",
            "\1\14",
            "\1\15",
            "\1\5",
            "\1\12\1\13",
            "\1\12\1\13\143\uffff\1\16",
            "\1\17",
            "\1\12\1\13"
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "1174:1: use_clause : ({...}? => 'use' 'from' id= IDENT ( LPAREN ei= named_type_or_rename ( COMMA ei= named_type_or_rename )* RPAREN )? SEMI | 'use' 'from' schema_ref ( LPAREN named_type_or_rename ( COMMA named_type_or_rename )* RPAREN )? SEMI -> ^( USE_CLAUSE schema_ref ( named_type_or_rename )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_5 = input.LA(1);

                         
                        int index176_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred254_Express()&&( isFirst ))) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index176_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA194_eotS =
        "\72\uffff";
    static final String DFA194_eofS =
        "\72\uffff";
    static final String DFA194_minS =
        "\1\u00d4\3\uffff\55\0\11\uffff";
    static final String DFA194_maxS =
        "\1\u0154\3\uffff\55\0\11\uffff";
    static final String DFA194_acceptS =
        "\1\uffff\1\1\1\2\1\3\55\uffff\1\4\1\14\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13";
    static final String DFA194_specialS =
        "\4\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\11\uffff}>";
    static final String[] DFA194_transitionS = {
            "\1\16\1\17\1\20\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
            "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\50\2\uffff\1\6\5\uffff"+
            "\1\7\2\uffff\1\4\1\5\1\1\2\uffff\1\60\2\uffff\1\21\1\22\3\uffff"+
            "\1\2\3\uffff\1\10\1\11\1\15\2\uffff\1\3\74\uffff\1\12\1\13\1"+
            "\14",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "1204:1: simple_factor : ( aggregate_initializer -> ^( SIMPLE_FACTOR aggregate_initializer ) | interval -> ^( SIMPLE_FACTOR interval ) | query_expression -> ^( SIMPLE_FACTOR query_expression ) | {...}? => unary_op ( ( LPAREN expression RPAREN ) | primary ) | {...}? => LPAREN expression RPAREN | {...}? => literal | {...}? => built_in_constant ( qualifier )* | {...}? => built_in_function ( actual_parameter_list )? ( qualifier )* | {...}? => IDENT ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ( DOT IDENT )? ( qualifier )* | {...}? => entity_constructor -> ^( SIMPLE_FACTOR entity_constructor ) | {...}? => enumeration_reference -> ^( SIMPLE_FACTOR enumeration_reference ) | ( unary_op )? ( ( LPAREN expression RPAREN ) | primary ) -> ^( SIMPLE_FACTOR ( unary_op )? ( expression )? ( primary )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA194_4 = input.LA(1);

                         
                        int index194_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred267_Express()&&( isFirst ))) ) {s = 49;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA194_5 = input.LA(1);

                         
                        int index194_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred267_Express()&&( isFirst ))) ) {s = 49;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA194_6 = input.LA(1);

                         
                        int index194_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred267_Express()&&( isFirst ))) ) {s = 49;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA194_7 = input.LA(1);

                         
                        int index194_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred268_Express()&&( isFirst ))) ) {s = 51;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA194_8 = input.LA(1);

                         
                        int index194_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred269_Express()&&( isFirst ))) ) {s = 52;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA194_9 = input.LA(1);

                         
                        int index194_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred269_Express()&&( isFirst ))) ) {s = 52;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA194_10 = input.LA(1);

                         
                        int index194_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred269_Express()&&( isFirst ))) ) {s = 52;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA194_11 = input.LA(1);

                         
                        int index194_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred269_Express()&&( isFirst ))) ) {s = 52;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA194_12 = input.LA(1);

                         
                        int index194_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred269_Express()&&( isFirst ))) ) {s = 52;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA194_13 = input.LA(1);

                         
                        int index194_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred269_Express()&&( isFirst ))) ) {s = 52;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA194_14 = input.LA(1);

                         
                        int index194_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_Express()&&( isFirst ))) ) {s = 53;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA194_15 = input.LA(1);

                         
                        int index194_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_Express()&&( isFirst ))) ) {s = 53;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA194_16 = input.LA(1);

                         
                        int index194_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_Express()&&( isFirst ))) ) {s = 53;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA194_17 = input.LA(1);

                         
                        int index194_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_Express()&&( isFirst ))) ) {s = 53;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA194_18 = input.LA(1);

                         
                        int index194_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_Express()&&( isFirst ))) ) {s = 53;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA194_19 = input.LA(1);

                         
                        int index194_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA194_20 = input.LA(1);

                         
                        int index194_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA194_21 = input.LA(1);

                         
                        int index194_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_21);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA194_22 = input.LA(1);

                         
                        int index194_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_22);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA194_23 = input.LA(1);

                         
                        int index194_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_23);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA194_24 = input.LA(1);

                         
                        int index194_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA194_25 = input.LA(1);

                         
                        int index194_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_25);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA194_26 = input.LA(1);

                         
                        int index194_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_26);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA194_27 = input.LA(1);

                         
                        int index194_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_27);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA194_28 = input.LA(1);

                         
                        int index194_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_28);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA194_29 = input.LA(1);

                         
                        int index194_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_29);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA194_30 = input.LA(1);

                         
                        int index194_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_30);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA194_31 = input.LA(1);

                         
                        int index194_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_31);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA194_32 = input.LA(1);

                         
                        int index194_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_32);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA194_33 = input.LA(1);

                         
                        int index194_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_33);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA194_34 = input.LA(1);

                         
                        int index194_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_34);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA194_35 = input.LA(1);

                         
                        int index194_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_35);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA194_36 = input.LA(1);

                         
                        int index194_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_36);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA194_37 = input.LA(1);

                         
                        int index194_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_37);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA194_38 = input.LA(1);

                         
                        int index194_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_38);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA194_39 = input.LA(1);

                         
                        int index194_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_39);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA194_40 = input.LA(1);

                         
                        int index194_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_40);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA194_41 = input.LA(1);

                         
                        int index194_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_41);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA194_42 = input.LA(1);

                         
                        int index194_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_42);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA194_43 = input.LA(1);

                         
                        int index194_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_43);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA194_44 = input.LA(1);

                         
                        int index194_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_44);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA194_45 = input.LA(1);

                         
                        int index194_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_45);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA194_46 = input.LA(1);

                         
                        int index194_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_46);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA194_47 = input.LA(1);

                         
                        int index194_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_Express()&&( isFirst ))) ) {s = 54;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_47);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA194_48 = input.LA(1);

                         
                        int index194_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred280_Express()&&( isFirst ))) ) {s = 55;}

                        else if ( ((((synpred281_Express()&&( input.LA(2)==LPAREN ))&&(nextIs(ENTITY_ATTR_IDENT)))||((synpred281_Express()&&( input.LA(2)==LPAREN ))&&(nextIs(ENTITY_VAR_IDENT)))||((synpred281_Express()&&( input.LA(2)==LPAREN ))&&(nextIs(ENTITY_PARAM_IDENT)))||((synpred281_Express()&&( input.LA(2)==LPAREN ))&&(nextIs(ENTITY_IDENT))))) ) {s = 56;}

                        else if ( ((((synpred282_Express()&&(nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)))&&( isFirst ))||((synpred282_Express()&&(nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)))&&(nextIs(TYPE_VAR_IDENT)))||((synpred282_Express()&&(nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)))&&(nextIs(TYPE_ATTR_IDENT)))||((synpred282_Express()&&(nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)))&&(nextIs(ENUMERATION_IDENT)))||((synpred282_Express()&&(nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)))&&(nextIs(TYPE_IDENT)))||((synpred282_Express()&&(nextIs(ENUMERATION_IDENT) || nextIs(ENUMERATION_IDENT, 3)))&&(nextIs(TYPE_PARAM_IDENT))))) ) {s = 57;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index194_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 194, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA199_eotS =
        "\17\uffff";
    static final String DFA199_eofS =
        "\17\uffff";
    static final String DFA199_minS =
        "\1\u00f4\1\0\15\uffff";
    static final String DFA199_maxS =
        "\1\u0169\1\0\15\uffff";
    static final String DFA199_acceptS =
        "\2\uffff\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12\1\13\1\14\1"+
        "\1\1\3";
    static final String DFA199_specialS =
        "\1\uffff\1\0\15\uffff}>";
    static final String[] DFA199_transitionS = {
            "\2\10\16\uffff\1\1\1\7\41\uffff\1\2\10\uffff\1\3\2\uffff\1\4"+
            "\17\uffff\1\5\5\uffff\1\6\26\uffff\1\12\2\uffff\1\13\5\uffff"+
            "\1\14",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "1234:1: stmt : ({...}? => IDENT ( ( qualifier )* COLEQ expression | ( actual_parameter_list )? ) SEMI | alias_stmt -> ^( STMT alias_stmt ) | assignment_stmt -> ^( STMT assignment_stmt ) | case_stmt -> ^( STMT case_stmt ) | compound_stmt -> ^( STMT compound_stmt ) | escape_stmt -> ^( STMT escape_stmt ) | if_stmt -> ^( STMT if_stmt ) | null_stmt -> ^( STMT null_stmt ) | procedure_call_stmt -> ^( STMT procedure_call_stmt ) | repeat_stmt -> ^( STMT repeat_stmt ) | return_stmt -> ^( STMT return_stmt ) | skip_stmt -> ^( STMT skip_stmt ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA199_1 = input.LA(1);

                         
                        int index199_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred294_Express()&&( isFirst ))) ) {s = 13;}

                        else if ( (((synpred296_Express()&&(nextIs(TYPE_PARAM_IDENT)))||(synpred296_Express()&&(nextIs(TYPE_VAR_IDENT)))||(synpred296_Express()&&(nextIs(ENTITY_PARAM_IDENT)))||synpred296_Express()||(synpred296_Express()&&(nextIs(PARAMETER_IDENT)))||(synpred296_Express()&&(nextIs(VARIABLE_IDENT)))||(synpred296_Express()&&(nextIs(ENTITY_VAR_IDENT))))) ) {s = 14;}

                        else if ( ((synpred302_Express()&&(nextIs(PROCEDURE_IDENT)))) ) {s = 8;}

                         
                        input.seek(index199_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 199, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA237_eotS =
        "\23\uffff";
    static final String DFA237_eofS =
        "\23\uffff";
    static final String DFA237_minS =
        "\1\u0104\1\0\21\uffff";
    static final String DFA237_maxS =
        "\1\u0104\1\0\21\uffff";
    static final String DFA237_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21";
    static final String DFA237_specialS =
        "\1\uffff\1\0\21\uffff}>";
    static final String[] DFA237_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA237_eot = DFA.unpackEncodedString(DFA237_eotS);
    static final short[] DFA237_eof = DFA.unpackEncodedString(DFA237_eofS);
    static final char[] DFA237_min = DFA.unpackEncodedStringToUnsignedChars(DFA237_minS);
    static final char[] DFA237_max = DFA.unpackEncodedStringToUnsignedChars(DFA237_maxS);
    static final short[] DFA237_accept = DFA.unpackEncodedString(DFA237_acceptS);
    static final short[] DFA237_special = DFA.unpackEncodedString(DFA237_specialS);
    static final short[][] DFA237_transition;

    static {
        int numStates = DFA237_transitionS.length;
        DFA237_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA237_transition[i] = DFA.unpackEncodedString(DFA237_transitionS[i]);
        }
    }

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = DFA237_eot;
            this.eof = DFA237_eof;
            this.min = DFA237_min;
            this.max = DFA237_max;
            this.accept = DFA237_accept;
            this.special = DFA237_special;
            this.transition = DFA237_transition;
        }
        public String getDescription() {
            return "1550:1: global_ident : ({...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | {...}?id= IDENT -> ^( ATTRIBUTE_REF IDENT[$id] ) | IDENT -> ^( ATTRIBUTE_REF IDENT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA237_1 = input.LA(1);

                         
                        int index237_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred360_Express()&&(nextIs(CONSTANT_IDENT)))) ) {s = 2;}

                        else if ( ((synpred361_Express()&&(nextIs(ENTITY_IDENT)))) ) {s = 3;}

                        else if ( ((synpred362_Express()&&(nextIs(FUNCTION_IDENT)))) ) {s = 4;}

                        else if ( ((synpred363_Express()&&(nextIs(PROCEDURE_IDENT)))) ) {s = 5;}

                        else if ( ((synpred364_Express()&&(nextIs(PARAMETER_IDENT)))) ) {s = 6;}

                        else if ( ((synpred365_Express()&&(nextIs(SCHEMA_IDENT)))) ) {s = 7;}

                        else if ( ((synpred366_Express()&&(nextIs(TYPE_IDENT)))) ) {s = 8;}

                        else if ( ((synpred367_Express()&&(nextIs(VARIABLE_IDENT)))) ) {s = 9;}

                        else if ( ((synpred368_Express()&&(nextIs(ENUMERATION_IDENT)))) ) {s = 10;}

                        else if ( ((synpred369_Express()&&(nextIs(ATTRIBUTE_IDENT)))) ) {s = 11;}

                        else if ( ((synpred370_Express()&&(nextIs(ENTITY_ATTR_IDENT)))) ) {s = 12;}

                        else if ( ((synpred371_Express()&&(nextIs(TYPE_ATTR_IDENT)))) ) {s = 13;}

                        else if ( ((synpred372_Express()&&(nextIs(ENTITY_VAR_IDENT)))) ) {s = 14;}

                        else if ( ((synpred373_Express()&&(nextIs(TYPE_VAR_IDENT)))) ) {s = 15;}

                        else if ( ((synpred374_Express()&&(nextIs(ENTITY_PARAM_IDENT)))) ) {s = 16;}

                        else if ( ((synpred375_Express()&&(nextIs(TYPE_PARAM_IDENT)))) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index237_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 237, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_LPAREN_in_actual_parameter_list1060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_parameter_in_actual_parameter_list1063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_actual_parameter_list1068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_parameter_in_actual_parameter_list1071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_actual_parameter_list1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_add_like_op1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_add_like_op1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_add_like_op1132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_in_add_like_op1147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_aggregate_initializer1169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271197L,0x00000000001C0000L});
    public static final BitSet FOLLOW_element_in_aggregate_initializer1175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_aggregate_initializer1181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_element_in_aggregate_initializer1184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RBRACK_in_aggregate_initializer1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_aggregate_source1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_293_in_aggregate_type1242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000008L});
    public static final BitSet FOLLOW_COLON_in_aggregate_type1246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_label_in_aggregate_type1249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_aggregate_type1255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_aggregate_type1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_type_in_aggregation_types1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_aggregation_types1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_type_in_aggregation_types1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_type_in_aggregation_types1331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_algorithm_head1353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L,0x0000100002010020L});
    public static final BitSet FOLLOW_constant_decl_in_algorithm_head1356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_local_decl_in_algorithm_head1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_295_in_alias_stmt1397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variable_id_in_alias_stmt1399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_alias_stmt1401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_alias_stmt1403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A22L});
    public static final BitSet FOLLOW_qualifier_in_alias_stmt1405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A22L});
    public static final BitSet FOLLOW_SEMI_in_alias_stmt1408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_alias_stmt1410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090280002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_297_in_alias_stmt1413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_alias_stmt1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_295_in_alias_stmt1425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variable_id_in_alias_stmt1427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_alias_stmt1429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_general_ref_in_alias_stmt1431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A22L});
    public static final BitSet FOLLOW_qualifier_in_alias_stmt1433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A22L});
    public static final BitSet FOLLOW_SEMI_in_alias_stmt1436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_alias_stmt1438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090280002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_297_in_alias_stmt1441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_alias_stmt1445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_298_in_array_type1478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_bound_spec_in_array_type1481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_array_type1484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_299_in_array_type1490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_300_in_array_type1499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_array_type1505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_ref_in_assignment_stmt1532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A42L});
    public static final BitSet FOLLOW_qualifier_in_assignment_stmt1534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A42L});
    public static final BitSet FOLLOW_COLEQ_in_assignment_stmt1539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_assignment_stmt1542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_assignment_stmt1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_301_in_bag_type1574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_bag_type1577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_bag_type1580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_bag_type1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregation_types_in_base_type1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_types_in_base_type1624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_types_in_base_type1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_302_in_binary_type1660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_width_spec_in_binary_type1663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_303_in_boolean_type1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_expression_in_bound_11707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_expression_in_bound_21728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_bound_spec1749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_bound_1_in_bound_spec1752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_bound_spec1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_bound_2_in_bound_spec1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RBRACK_in_bound_spec1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_E_in_built_in_constant1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PI_in_built_in_constant1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_SELF_in_built_in_constant1817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_built_in_constant1832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_built_in_constant1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_ABS_in_built_in_function1871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_ACOS_in_built_in_function1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_ASIN_in_built_in_function1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_ATAN_in_built_in_function1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_BLENGTH_in_built_in_function1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_COS_in_built_in_function1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_EXISTS_in_built_in_function1962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_EXP_in_built_in_function1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_FORMAT_in_built_in_function1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_HIBOUND_in_built_in_function2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_HIINDEX_in_built_in_function2023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_LENGTH_in_built_in_function2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_LOBOUND_in_built_in_function2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_LOINDEX_in_built_in_function2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_LOG_in_built_in_function2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_LOG2_in_built_in_function2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_LOG10_in_built_in_function2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_NVL_in_built_in_function2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_ODD_in_built_in_function2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_ROLESOF_in_built_in_function2168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_SIN_in_built_in_function2184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_SIZEOF_in_built_in_function2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_SQRT_in_built_in_function2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_TAN_in_built_in_function2232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_TYPEOF_in_built_in_function2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_USEDIN_in_built_in_function2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_VALUE_in_built_in_function2280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_VALUE_IN_in_built_in_function2296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_VALUE_UNIQUE_in_built_in_function2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_INSERT_in_built_in_procedure2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_REMOVE_in_built_in_procedure2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_label_in_case_action2374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_case_action2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_case_label_in_case_action2383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_case_action2389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_case_action2392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_case_label2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_304_in_case_stmt2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_selector_in_case_stmt2447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_case_stmt2450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0006000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_case_action_in_case_stmt2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0006000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_305_in_case_stmt2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_case_stmt2463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_case_stmt2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_306_in_case_stmt2472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_case_stmt2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_307_in_compound_stmt2505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_compound_stmt2508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00190080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_308_in_compound_stmt2512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_compound_stmt2515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_id_in_constant_body2540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_constant_body2543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_constant_body2546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLEQ_in_constant_body2549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_constant_body2552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_constant_body2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_309_in_constant_decl2583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_constant_body_in_constant_decl2586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000010L});
    public static final BitSet FOLLOW_310_in_constant_decl2590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_constant_decl2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_constant_in_constant_factor2618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_ref_in_constant_factor2633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_constant_id2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_constant_id2671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_decl_in_declaration2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_constraint_decl_in_declaration2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_decl_in_declaration2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_decl_in_declaration2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_in_declaration2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_expression_in_domain_rule2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_domain_rule2803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_domain_rule2806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_logical_expression_in_domain_rule2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_element2844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_element2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_repetition_in_element2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_311_in_entity_head2884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_id_in_entity_head2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0D00000000000020L});
    public static final BitSet FOLLOW_312_in_entity_head2896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0D00000000000020L});
    public static final BitSet FOLLOW_subsuper_in_entity_head2901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_entity_head2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_head_in_entity_decl2938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0200100000000010L,0x0010000000000003L});
    public static final BitSet FOLLOW_entity_body_in_entity_decl2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_313_in_entity_decl2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_entity_decl2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_attr_in_entity_body2972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000100000000010L,0x0010000000000003L});
    public static final BitSet FOLLOW_derive_clause_in_entity_body2975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000000000002L});
    public static final BitSet FOLLOW_inverse_clause_in_entity_body2978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_unique_clause_in_entity_body2981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_where_clause_in_entity_body2984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supertype_constraint_in_subsuper3021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_subtype_declaration_in_subsuper3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_supertype_declaration_in_supertype_constraint3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supertype_rule_in_supertype_constraint3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_312_in_abstract_supertype_declaration3096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_314_in_abstract_supertype_declaration3098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_subtype_constraint_in_abstract_supertype_declaration3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_315_in_subtype_declaration3133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_subtype_declaration3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_subtype_declaration3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_subtype_declaration3141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_subtype_declaration3147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_subtype_declaration3151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subtype_declaration3158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_declaration3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_315_in_subtype_declaration3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_subtype_declaration3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_subtype_declaration3172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_subtype_declaration3174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_subtype_declaration3178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_subtype_declaration3180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subtype_declaration3185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_declaration3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_constraint_head_in_subtype_constraint_decl3214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x5100000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_subtype_constraint_body_in_subtype_constraint_decl3216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_316_in_subtype_constraint_decl3218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_constraint_decl3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_317_in_subtype_constraint_head3248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_subtype_constraint_id_in_subtype_constraint_head3250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_subtype_constraint_head3252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_subtype_constraint_head3254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_constraint_head3256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_317_in_subtype_constraint_head3262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_subtype_constraint_id_in_subtype_constraint_head3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_subtype_constraint_head3266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_subtype_constraint_head3268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_constraint_head3270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_supertype_in_subtype_constraint_body3296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x4000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_total_over_in_subtype_constraint_body3299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_expression_in_subtype_constraint_body3304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_constraint_body3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_subtype_constraint_id3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_subtype_constraint_id3356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_312_in_abstract_supertype3382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_314_in_abstract_supertype3384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_abstract_supertype3386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_318_in_total_over3410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_total_over3412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_total_over3414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_total_over3418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_total_over3420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_total_over3425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_total_over3427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_318_in_total_over3433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_total_over3435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_total_over3437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_total_over3441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_total_over3443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_total_over3448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_total_over3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_decl_in_explicit_attr3479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_explicit_attr3482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_attribute_decl_in_explicit_attr3484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_explicit_attr3488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_299_in_explicit_attr3490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_explicit_attr3493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_explicit_attr3495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_id_in_attribute_decl3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_redeclared_attribute_in_attribute_decl3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_attribute_in_redeclared_attribute3562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_319_in_redeclared_attribute3566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_attribute_id_in_redeclared_attribute3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_id3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_id3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_id3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_id3656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_SELF_in_qualified_attribute3682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_group_qualifier_in_qualified_attribute3684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_attribute_qualifier_in_qualified_attribute3686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_320_in_derive_clause3712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_derived_attr_in_derive_clause3714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_attribute_decl_in_derived_attr3740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_derived_attr3742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_derived_attr3744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLEQ_in_derived_attr3746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_derived_attr3748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_derived_attr3750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_321_in_inverse_clause3778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_inverse_attr_in_inverse_clause3780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_attribute_decl_in_inverse_attr3809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_inverse_attr3811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_inverse_attr3815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_inverse_attr3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_inverse_attr3828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_inverse_attr3833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_inverse_attr3835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_inverse_attr3837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_inverse_attr3839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_decl_in_inverse_attr3846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_inverse_attr3848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_322_in_inverse_attr3854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_301_in_inverse_attr3858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_inverse_attr3862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_inverse_attr3865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_inverse_attr3870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_inverse_attr3872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_global_ident_in_inverse_attr3874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_inverse_attr3878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_300_in_unique_clause3915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_unique_rule_in_unique_clause3919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_unique_clause3921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_unique_rule3953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_unique_rule3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_referenced_attribute_in_unique_rule3959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_qualified_attribute_in_unique_rule3966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unique_rule3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_referenced_attribute_in_unique_rule3974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_label_in_unique_rule3986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_unique_rule3988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_referenced_attribute_in_unique_rule3993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unique_rule3997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_referenced_attribute_in_unique_rule3999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_referenced_attribute4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_ref_in_referenced_attribute4041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_attribute_in_referenced_attribute4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_entity_constructor4078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_entity_constructor4080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD04FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_entity_constructor4086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_entity_constructor4092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_entity_constructor4095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_entity_constructor4106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_entity_id4141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_entity_id4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumeration_reference4182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_enumeration_reference4186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_enumeration_reference4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_ref_in_enumeration_reference4199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_enumeration_reference4202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_enumeration_ref_in_enumeration_reference4208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_323_in_escape_stmt4235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_escape_stmt4238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_expression4260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000003F00C000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_rel_op_extended_in_expression4266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_simple_expression_in_expression4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_factor_in_factor4303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_factor4309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_simple_factor_in_factor4312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_id_in_formal_parameter4343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_formal_parameter4349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_parameter_id_in_formal_parameter4352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_formal_parameter4359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_formal_parameter4362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_attribute_qualifier4389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_global_ident_in_attribute_qualifier4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_function_in_function_call4419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_function_ref_in_function_call4423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_actual_parameter_list_in_function_call4427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_head_in_function_decl4460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x20A90080002711B3L,0x00001209021D0228L});
    public static final BitSet FOLLOW_algorithm_head_in_function_decl4462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_function_decl4466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0218L});
    public static final BitSet FOLLOW_324_in_function_decl4470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_function_decl4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_325_in_function_head4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_function_id_in_function_head4508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_function_head4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_formal_parameter_in_function_head4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_function_head4524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_formal_parameter_in_function_head4527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_function_head4534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_function_head4541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_function_head4544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_function_head4547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_function_id4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_function_id4592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_type_in_generalized_types4629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_aggregation_types_in_generalized_types4645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_type_in_generalized_types4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_entity_type_in_generalized_types4675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_array_type_in_general_aggregation_types4697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_bag_type_in_general_aggregation_types4712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_list_type_in_general_aggregation_types4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_set_type_in_general_aggregation_types4742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_298_in_general_array_type4764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_general_array_type4766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_general_array_type4770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_299_in_general_array_type4772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000F42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_300_in_general_array_type4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_general_array_type4779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_301_in_general_bag_type4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_general_bag_type4816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_general_bag_type4820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_general_bag_type4823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_326_in_general_list_type4851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_general_list_type4854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_general_list_type4858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000F42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_300_in_general_list_type4861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_general_list_type4865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_ref_in_general_ref4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_ref_in_general_ref4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_322_in_general_set_type4933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_general_set_type4936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_general_set_type4940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_general_set_type4943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_327_in_generic_type4972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_generic_type4978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_label_in_generic_type4981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_328_in_generic_entity_type5009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKSLASH_in_group_qualifier5034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_group_qualifier5036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKSLASH_in_group_qualifier5043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_group_qualifier5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_329_in_if_stmt5070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_logical_expression_in_if_stmt5072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_330_in_if_stmt5075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_if_stmt5077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C1A08L});
    public static final BitSet FOLLOW_else_clause_in_if_stmt5081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_331_in_if_stmt5085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_if_stmt5088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_332_in_else_clause5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_else_clause5122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_numeric_expression_in_increment5148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_in_increment_control5173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLEQ_in_increment_control5176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_bound_1_in_increment_control5179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_333_in_increment_control5182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_bound_2_in_increment_control5185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_334_in_increment_control5191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_increment_in_increment_control5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_expression_in_index5229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_15254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_25279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_index_qualifier5304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_index_1_in_index_qualifier5307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_COLON_in_index_qualifier5313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_index_2_in_index_qualifier5316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RBRACK_in_index_qualifier5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_335_in_integer_type5350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interval5372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_interval_low_in_interval5375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_interval_op_in_interval5378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_interval_item_in_interval5381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_interval_op_in_interval5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_interval_high_in_interval5387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RCURLY_in_interval5390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_interval_high5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_interval_item5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_interval_low5476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_interval_op5501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_interval_op5518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_label5540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_326_in_list_type5564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_list_type5567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_list_type5571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_300_in_list_type5574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_list_type5578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_literal5611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_literal5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_literal_in_literal5650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_336_in_local_decl5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_local_variable_in_local_decl5696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000020000L});
    public static final BitSet FOLLOW_337_in_local_decl5699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_local_decl5702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_in_local_variable5728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_local_variable5734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variable_id_in_local_variable5737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_local_variable5744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_parameter_type_in_local_variable5747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_COLEQ_in_local_variable5753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_local_variable5756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_local_variable5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_logical_expression5793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_338_in_logical_literal5818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_339_in_logical_literal5833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_340_in_logical_literal5848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_341_in_logical_type5870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_multiplication_like_op5892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVSIGN_in_multiplication_like_op5907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplication_like_op5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_multiplication_like_op5937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_multiplication_like_op5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLEBAR_in_multiplication_like_op5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_named_types5993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_named_types6000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_ref_in_named_types6015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_null_stmt6044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_342_in_number_type6064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_numeric_expression6084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_343_in_one_of6106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_one_of6109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_expression_in_one_of6112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_one_of6118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_expression_in_one_of6121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_one_of6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_parameter6153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_id6179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_id6191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_id6210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_id6229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generalized_types_in_parameter_type6254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_types_in_parameter_type6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_types_in_parameter_type6286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_population6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_expression_in_precision_spec6332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiable_factor_in_primary6369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_primary6371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_built_in_procedure_in_procedure_call_stmt6402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_procedure_ref_in_procedure_call_stmt6408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_actual_parameter_list_in_procedure_call_stmt6417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_procedure_call_stmt6424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_head_in_procedure_decl6455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x20A90080002711B3L,0x00001209031D0228L});
    public static final BitSet FOLLOW_algorithm_head_in_procedure_decl6457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209011C0208L});
    public static final BitSet FOLLOW_stmt_in_procedure_decl6460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209011C0208L});
    public static final BitSet FOLLOW_344_in_procedure_decl6464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_procedure_decl6467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_345_in_procedure_head6501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_procedure_id_in_procedure_head6504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_head6511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000004000000L});
    public static final BitSet FOLLOW_346_in_procedure_head6514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_formal_parameter_in_procedure_head6518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_procedure_head6524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000004000000L});
    public static final BitSet FOLLOW_346_in_procedure_head6527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_formal_parameter_in_procedure_head6531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_head6538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_procedure_head6545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_procedure_id6580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_procedure_id6593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiable_factor6620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_actual_parameter_list_in_qualifiable_factor6624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_constant_in_qualifiable_factor6636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_function_in_qualifiable_factor6645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_actual_parameter_list_in_qualifiable_factor6651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_qualifiable_factor6661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_ref_in_qualifiable_factor6676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_factor_in_qualifiable_factor6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_population_in_qualifiable_factor6706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_ref_in_qualifiable_factor6721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_qualifier_in_qualifier6743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_qualifier_in_qualifier6758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_qualifier_in_qualifier6773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUERY_in_query_expression6795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_query_expression6797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variable_id_in_query_expression6801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LTSTAR_in_query_expression6804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_aggregate_source_in_query_expression6807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_BAR_in_query_expression6810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_logical_expression_in_query_expression6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_query_expression6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_347_in_real_type6848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_real_type6854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_precision_spec_in_real_type6857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_real_type6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_348_in_reference_clause6891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_349_in_reference_clause6893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_reference_clause6897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_reference_clause6902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x003FFFFFFFF00000L,0x0000000000000190L});
    public static final BitSet FOLLOW_resource_or_rename_in_reference_clause6907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_reference_clause6919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x003FFFFFFFF00000L,0x0000000000000190L});
    public static final BitSet FOLLOW_resource_or_rename_in_reference_clause6924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_reference_clause6933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_reference_clause6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_348_in_reference_clause6952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_349_in_reference_clause6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_schema_ref_in_reference_clause6957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_reference_clause6966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x003FFFFFFFF00000L,0x0000000000000190L});
    public static final BitSet FOLLOW_resource_or_rename_in_reference_clause6969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_reference_clause6975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x003FFFFFFFF00000L,0x0000000000000190L});
    public static final BitSet FOLLOW_resource_or_rename_in_reference_clause6978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_reference_clause6985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_reference_clause6992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_rel_op7019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_rel_op7034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_rel_op7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_rel_op7065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTGT_in_rel_op7080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_rel_op7095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLTGT_in_rel_op7111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLEQCOL_in_rel_op7126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_in_rel_op_extended7148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_350_in_rel_op_extended7163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_351_in_rel_op_extended7178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rename_id7212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rename_id7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rename_id7274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rename_id7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rename_id7336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rename_id7362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_control_in_repeat_control7378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0028000000000000L});
    public static final BitSet FOLLOW_while_control_in_repeat_control7382 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_until_control_in_repeat_control7386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_352_in_repeat_stmt7422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L,0x0028000000000000L});
    public static final BitSet FOLLOW_repeat_control_in_repeat_stmt7426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_repeat_stmt7429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_repeat_stmt7432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x0000020B001C0208L});
    public static final BitSet FOLLOW_353_in_repeat_stmt7436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_repeat_stmt7440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_expression_in_repetition7467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_resource_or_rename7499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_resource_or_rename7505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_resource_or_rename7509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_resource_ref_in_resource_or_rename7521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_resource_or_rename7525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_resource_or_rename7527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_ident_in_resource_or_rename7552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_resource_or_rename7557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_resource_or_rename7560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_ref_in_resource_ref7606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_resource_ref7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_ref_in_resource_ref7640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_ref_in_resource_ref7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_ref_in_resource_ref7674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_355_in_return_stmt7699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_return_stmt7705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_return_stmt7708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_return_stmt7711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_return_stmt7718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_head_in_rule_decl7744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x20A90080002711B3L,0x00101209021D0228L});
    public static final BitSet FOLLOW_algorithm_head_in_rule_decl7748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00100209001C0208L});
    public static final BitSet FOLLOW_stmt_in_rule_decl7751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00100209001C0208L});
    public static final BitSet FOLLOW_where_clause_in_rule_decl7755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_356_in_rule_decl7758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_rule_decl7762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_357_in_rule_head7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rule_id_in_rule_head7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_rule_head7801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_rule_head7803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_rule_head7805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rule_head7809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_rule_head7811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_rule_head7816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_rule_head7818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_357_in_rule_head7825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rule_id_in_rule_head7828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_rule_head7831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_rule_head7834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_rule_head7837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rule_head7843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_ref_in_rule_head7846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_rule_head7853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_rule_head7856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rule_id7890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_schema_id7920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_schema_id7931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_specification_in_schema_body7952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L,0x0000112012010020L});
    public static final BitSet FOLLOW_constant_decl_in_schema_body7955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L,0x0000102002010020L});
    public static final BitSet FOLLOW_declaration_in_schema_body7960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L,0x0000102002010020L});
    public static final BitSet FOLLOW_rule_decl_in_schema_body7964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L,0x0000102002010020L});
    public static final BitSet FOLLOW_358_in_schema_decl8002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_schema_id_in_schema_decl8006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
    public static final BitSet FOLLOW_schema_version_id_in_schema_decl8010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_schema_decl8014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L,0x0000112012010020L});
    public static final BitSet FOLLOW_schema_body_in_schema_decl8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_359_in_schema_decl8018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_schema_decl8020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_schema_version_id8053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_clause_in_interface_specification8075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_use_clause_in_interface_specification8090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_360_in_use_clause8114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_349_in_use_clause8116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_use_clause8120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_use_clause8127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_type_or_rename_in_use_clause8131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_use_clause8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_type_or_rename_in_use_clause8144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_use_clause8154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_use_clause8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_360_in_use_clause8171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_349_in_use_clause8173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_schema_ref_in_use_clause8175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_use_clause8179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_type_or_rename_in_use_clause8181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_use_clause8185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_type_or_rename_in_use_clause8187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_use_clause8192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_use_clause8197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_named_type_or_rename8232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_named_type_or_rename8238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_named_type_or_rename8242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_types_in_named_type_or_rename8254 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_named_type_or_rename8258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_entity_id_in_named_type_or_rename8262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_named_type_or_rename8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selector8301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_322_in_set_type8323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_set_type8326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_set_type8330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000FC2000000010L,0x00000400086081C4L});
    public static final BitSet FOLLOW_base_type_in_set_type8333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_simple_expression8360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8180000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_add_like_op_in_simple_expression8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_term_in_simple_expression8369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8180000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_aggregate_initializer_in_simple_factor8425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_in_simple_factor8442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_simple_factor8457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_simple_factor8475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_LPAREN_in_simple_factor8480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_simple_factor8482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_simple_factor8484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_simple_factor8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_simple_factor8501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_simple_factor8503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_simple_factor8505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_simple_factor8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_constant_in_simple_factor8525 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_simple_factor8529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_built_in_function_in_simple_factor8542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_actual_parameter_list_in_simple_factor8546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_simple_factor8553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_IDENT_in_simple_factor8566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_LPAREN_in_simple_factor8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD04FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_simple_factor8574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_simple_factor8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_simple_factor8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_simple_factor8588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_DOT_in_simple_factor8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_simple_factor8597 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_simple_factor8604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_entity_constructor_in_simple_factor8617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_reference_in_simple_factor8635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_simple_factor8650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_LPAREN_in_simple_factor8656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_simple_factor8659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_simple_factor8662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_simple_factor8667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_binary_type_in_simple_types8706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_type_in_simple_types8721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_type_in_simple_types8737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_type_in_simple_types8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_type_in_simple_types8769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_type_in_simple_types8784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_type_in_simple_types8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_361_in_skip_stmt8821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_skip_stmt8824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_stmt8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000A62L});
    public static final BitSet FOLLOW_qualifier_in_stmt8850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A42L});
    public static final BitSet FOLLOW_COLEQ_in_stmt8853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_stmt8855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_actual_parameter_list_in_stmt8859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_stmt8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_stmt_in_stmt8873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_stmt_in_stmt8888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_stmt8903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escape_stmt_in_stmt8933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_stmt8949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_stmt8964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_call_stmt_in_stmt8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_repeat_stmt_in_stmt8995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_stmt9010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skip_stmt_in_stmt9026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_362_in_string_type9048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_width_spec_in_string_type9051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_294_in_subtype_constraint9078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_subtype_constraint9081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_expression_in_subtype_constraint9084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subtype_constraint9087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_subtype_constraint9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supertype_factor_in_supertype_expression9115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_363_in_supertype_expression9121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_factor_in_supertype_expression9124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_supertype_term_in_supertype_factor9154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AND_in_supertype_factor9160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_term_in_supertype_factor9163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_312_in_supertype_rule9193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_314_in_supertype_rule9197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_subtype_constraint_in_supertype_rule9200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_supertype_term9232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_supertype_term9239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_one_of_in_supertype_term9254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_supertype_term9271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000010L,0x0000000000800000L});
    public static final BitSet FOLLOW_supertype_expression_in_supertype_term9274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_supertype_term9277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_syntax_in_start9303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_language_version_id_in_syntax9318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_schema_decl_in_syntax9321 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_schema_decl_in_syntax9323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LCURLY_in_language_version_id9353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LANG_VERSION_in_language_version_id9355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RCURLY_in_language_version_id9357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_factor_in_term9380 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0E00000000000000L,0x0000000000180100L});
    public static final BitSet FOLLOW_multiplication_like_op_in_term9386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_factor_in_term9389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0E00000000000000L,0x0000000000180100L});
    public static final BitSet FOLLOW_364_in_type_decl9436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_id_in_type_decl9440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ASSIGN_in_type_decl9444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000E42000000010L,0x0004C400086081C4L});
    public static final BitSet FOLLOW_underlying_type_in_type_decl9448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_type_decl9450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010200000000000L});
    public static final BitSet FOLLOW_where_clause_in_type_decl9452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_365_in_type_decl9455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_type_decl9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructed_types_in_underlying_type9508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregation_types_in_underlying_type9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_types_in_underlying_type9541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_underlying_type9558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_ref_in_underlying_type9565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_type_in_constructed_types9599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_type_in_constructed_types9620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_366_in_enumeration_type9665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_367_in_enumeration_type9672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_294_in_enumeration_type9677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_enumeration_items_in_enumeration_type9681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_extension_in_enumeration_type9690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_enumeration_items9735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_enumeration_id_in_enumeration_items9739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_enumeration_items9745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_enumeration_id_in_enumeration_items9749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_enumeration_items9756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_368_in_enumeration_extension9790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_enumeration_extension9794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_369_in_enumeration_extension9800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_enumeration_items_in_enumeration_extension9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_368_in_enumeration_extension9816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_ref_in_enumeration_extension9818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_369_in_enumeration_extension9822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_enumeration_items_in_enumeration_extension9824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumeration_id9863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumeration_id9876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_366_in_select_type9902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000100L});
    public static final BitSet FOLLOW_328_in_select_type9905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_370_in_select_type9908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_select_list_in_select_type9912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_extension_in_select_type9916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_select_list9954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_types_in_select_list9956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_select_list9960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_types_in_select_list9962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_select_list9967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_368_in_select_extension9996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_select_extension9998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_369_in_select_extension10002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_select_list_in_select_extension10004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_368_in_select_extension10014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_ref_in_select_extension10016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_369_in_select_extension10020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_select_list_in_select_extension10022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_id10062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_id10075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_label10102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_label_id10124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unary_op10146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_op10161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unary_op10176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_371_in_until_control10198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_logical_expression_in_until_control10201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_id10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_id10252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_id10277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_id10302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_372_in_where_clause10328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_domain_rule_in_where_clause10331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_where_clause10334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_domain_rule_in_where_clause10340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_where_clause10343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_373_in_while_control10372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_logical_expression_in_while_control10375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_expression_in_width10400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_width_spec10425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_width_in_width_spec10428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_width_spec10431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_374_in_width_spec10434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_entity_ref10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_entity_ref10488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_entity_ref10510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_entity_ref10532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_ref10561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_ref10583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_ref10605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_ref10627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumeration_ref10655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_ref10683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_ref10704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_ref10725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_constant_ref10760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_function_ref10788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_ref10816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_ref10837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_parameter_ref10858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_ref10888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_ref10905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_ref10926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variable_ref10947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_schema_ref10975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_id11000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_type_label_ref11021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_procedure_ref11045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_global_ident11378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred15_Express1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_295_in_synpred16_Express1397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variable_id_in_synpred16_Express1399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_synpred16_Express1401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred16_Express1403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A22L});
    public static final BitSet FOLLOW_qualifier_in_synpred16_Express1405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A22L});
    public static final BitSet FOLLOW_SEMI_in_synpred16_Express1408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090080002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_stmt_in_synpred16_Express1410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x907FFFFFFFF00000L,0x00090280002711B3L,0x00000209001C0208L});
    public static final BitSet FOLLOW_297_in_synpred16_Express1413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred16_Express1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred18_Express1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred62_Express2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_body_in_synpred63_Express2586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred65_Express2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_constraint_decl_in_synpred67_Express2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_expression_in_synpred70_Express2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_312_in_synpred73_Express2896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subsuper_in_synpred74_Express2901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_attr_in_synpred76_Express2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred82_Express3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_supertype_declaration_in_synpred83_Express3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred86_Express3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_315_in_synpred87_Express3133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_synpred87_Express3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred87_Express3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred87_Express3141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred87_Express3147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred87_Express3151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred87_Express3158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred87_Express3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred89_Express3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_317_in_synpred90_Express3248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_subtype_constraint_id_in_synpred90_Express3250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_synpred90_Express3252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred90_Express3254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred90_Express3256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_total_over_in_synpred92_Express3299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supertype_expression_in_synpred93_Express3304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred93_Express3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred94_Express3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_318_in_synpred96_Express3410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred96_Express3412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred96_Express3414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred96_Express3418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred96_Express3420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred96_Express3425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred96_Express3427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_id_in_synpred100_Express3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred102_Express3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred103_Express3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred104_Express3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_derived_attr_in_synpred105_Express3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inverse_attr_in_synpred106_Express3780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_decl_in_synpred110_Express3809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_synpred110_Express3811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_synpred110_Express3815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_bound_spec_in_synpred110_Express3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_294_in_synpred110_Express3828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred110_Express3833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_synpred110_Express3835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred110_Express3837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred110_Express3839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unique_rule_in_synpred114_Express3919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred114_Express3921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred118_Express3953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_synpred118_Express3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_referenced_attribute_in_synpred118_Express3959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_qualified_attribute_in_synpred118_Express3966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred118_Express3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000010L});
    public static final BitSet FOLLOW_referenced_attribute_in_synpred118_Express3974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred121_Express4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_ref_in_synpred122_Express4041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred125_Express4141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred127_Express4182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_synpred127_Express4186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred127_Express4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_algorithm_head_in_synpred134_Express4462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred135_Express4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred138_Express4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_ref_in_synpred151_Express4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKSLASH_in_synpred154_Express5034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred154_Express5036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred155_Express5077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred157_Express5122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred176_Express5993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_synpred177_Express6000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred179_Express6179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred180_Express6191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred181_Express6210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_types_in_synpred183_Express6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_algorithm_head_in_synpred188_Express6457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred189_Express6460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred194_Express6580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred196_Express6620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_actual_parameter_list_in_synpred196_Express6624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_constant_in_synpred197_Express6636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_function_in_synpred199_Express6645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_actual_parameter_list_in_synpred199_Express6651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_synpred200_Express6661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_ref_in_synpred201_Express6676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_factor_in_synpred202_Express6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_population_in_synpred203_Express6706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_qualifier_in_synpred205_Express6758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_348_in_synpred209_Express6891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_349_in_synpred209_Express6893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred209_Express6897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_synpred209_Express6902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x003FFFFFFFF00000L,0x0000000000000190L});
    public static final BitSet FOLLOW_resource_or_rename_in_synpred209_Express6907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred209_Express6919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x003FFFFFFFF00000L,0x0000000000000190L});
    public static final BitSet FOLLOW_resource_or_rename_in_synpred209_Express6924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred209_Express6933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred209_Express6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred221_Express7212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred222_Express7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred223_Express7274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred224_Express7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred225_Express7336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred229_Express7432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred231_Express7499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_synpred231_Express7505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_synpred231_Express7509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_resource_ref_in_synpred233_Express7521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_synpred233_Express7525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_synpred233_Express7527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_ref_in_synpred235_Express7606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_synpred236_Express7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_ref_in_synpred237_Express7640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_ref_in_synpred238_Express7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_algorithm_head_in_synpred240_Express7748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred241_Express7751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_357_in_synpred243_Express7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rule_id_in_synpred243_Express7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_296_in_synpred243_Express7801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred243_Express7803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred243_Express7805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred243_Express7809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred243_Express7811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred243_Express7816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred243_Express7818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred245_Express7920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_specification_in_synpred246_Express7952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_decl_in_synpred249_Express7964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_clause_in_synpred251_Express8075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_360_in_synpred254_Express8114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_349_in_synpred254_Express8116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred254_Express8120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_synpred254_Express8127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_type_or_rename_in_synpred254_Express8131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred254_Express8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_named_type_or_rename_in_synpred254_Express8144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred254_Express8154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred254_Express8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred258_Express8232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_354_in_synpred258_Express8238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_rename_id_in_synpred258_Express8242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_id_in_synpred259_Express8262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_synpred267_Express8475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred267_Express8480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_synpred267_Express8482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred267_Express8484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_synpred267_Express8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred268_Express8501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_synpred268_Express8503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred268_Express8505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred269_Express8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_built_in_constant_in_synpred271_Express8525 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_synpred271_Express8529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_built_in_function_in_synpred274_Express8542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_actual_parameter_list_in_synpred274_Express8546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_synpred274_Express8553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_DOT_in_synpred278_Express8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred278_Express8597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred280_Express8566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_LPAREN_in_synpred280_Express8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD04FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_synpred280_Express8574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred280_Express8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_synpred280_Express8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred280_Express8588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_DOT_in_synpred280_Express8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred280_Express8597 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_qualifier_in_synpred280_Express8604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A02L});
    public static final BitSet FOLLOW_entity_constructor_in_synpred281_Express8617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_reference_in_synpred282_Express8635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred294_Express8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000A62L});
    public static final BitSet FOLLOW_qualifier_in_synpred294_Express8850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A42L});
    public static final BitSet FOLLOW_COLEQ_in_synpred294_Express8853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x904FFFFFFFF00000L,0x0000000000271193L,0x00000000001C0000L});
    public static final BitSet FOLLOW_expression_in_synpred294_Express8855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_actual_parameter_list_in_synpred294_Express8859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred294_Express8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_stmt_in_synpred295_Express8873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_stmt_in_synpred296_Express8888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_call_stmt_in_synpred302_Express8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred306_Express9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred311_Express9232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entity_ref_in_synpred312_Express9239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructed_types_in_synpred318_Express9508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred321_Express9558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_type_in_synpred322_Express9599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeration_extension_in_synpred325_Express9690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_368_in_synpred328_Express9790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred328_Express9794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_369_in_synpred328_Express9800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_enumeration_items_in_synpred328_Express9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred330_Express9863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_extension_in_synpred334_Express9916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_368_in_synpred337_Express9996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_synpred337_Express9998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_369_in_synpred337_Express10002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_select_list_in_synpred337_Express10004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred339_Express10062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred342_Express10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred343_Express10252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred344_Express10277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_domain_rule_in_synpred345_Express10340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred345_Express10343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred347_Express10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred348_Express10488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred349_Express10510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred350_Express10561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred351_Express10583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred352_Express10605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred353_Express10683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred354_Express10704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred355_Express10816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred356_Express10837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred357_Express10888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred358_Express10905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred359_Express10926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred360_Express11077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred361_Express11096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred362_Express11115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred363_Express11134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred364_Express11153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred365_Express11172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred366_Express11191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred367_Express11210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred368_Express11229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred369_Express11248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred370_Express11267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred371_Express11286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred372_Express11305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred373_Express11324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred374_Express11343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred375_Express11362 = new BitSet(new long[]{0x0000000000000002L});

}